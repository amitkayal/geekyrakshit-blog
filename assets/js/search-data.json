{
  
    
        "post0": {
            "title": "Balloon Detection using Mask RCNN",
            "content": "!pip install -U torch torchvision !pip install git+https://github.com/facebookresearch/fvcore.git !git clone https://github.com/facebookresearch/detectron2 detectron2_repo !pip install -e detectron2_repo . Collecting torch Downloading https://files.pythonhosted.org/packages/ae/05/50a05de5337f7a924bb8bd70c6936230642233e424d6a9747ef1cfbde353/torch-1.3.0-cp36-cp36m-manylinux1_x86_64.whl (773.1MB) |████████████████████████████████| 773.1MB 31kB/s Collecting torchvision Downloading https://files.pythonhosted.org/packages/fc/23/d418c9102d4054d19d57ccf0aca18b7c1c1f34cc0a136760b493f78ddb06/torchvision-0.4.1-cp36-cp36m-manylinux1_x86_64.whl (10.1MB) |████████████████████████████████| 10.1MB 27.4MB/s Requirement already satisfied, skipping upgrade: numpy in /usr/local/lib/python3.6/dist-packages (from torch) (1.16.5) Requirement already satisfied, skipping upgrade: pillow&gt;=4.1.1 in /usr/local/lib/python3.6/dist-packages (from torchvision) (4.3.0) Requirement already satisfied, skipping upgrade: six in /usr/local/lib/python3.6/dist-packages (from torchvision) (1.12.0) Requirement already satisfied, skipping upgrade: olefile in /usr/local/lib/python3.6/dist-packages (from pillow&gt;=4.1.1-&gt;torchvision) (0.46) Installing collected packages: torch, torchvision Found existing installation: torch 1.2.0 Uninstalling torch-1.2.0: Successfully uninstalled torch-1.2.0 Found existing installation: torchvision 0.4.0 Uninstalling torchvision-0.4.0: Successfully uninstalled torchvision-0.4.0 Successfully installed torch-1.3.0 torchvision-0.4.1 Collecting git+https://github.com/facebookresearch/fvcore.git Cloning https://github.com/facebookresearch/fvcore.git to /tmp/pip-req-build-w1yn64cw Running command git clone -q https://github.com/facebookresearch/fvcore.git /tmp/pip-req-build-w1yn64cw Collecting yacs&gt;=0.1.6 (from fvcore==0.1) Downloading https://files.pythonhosted.org/packages/2f/51/9d613d67a8561a0cdf696c3909870f157ed85617fea3cff769bb7de09ef7/yacs-0.1.6-py3-none-any.whl Collecting pyyaml&gt;=5.1 (from fvcore==0.1) Downloading https://files.pythonhosted.org/packages/e3/e8/b3212641ee2718d556df0f23f78de8303f068fe29cdaa7a91018849582fe/PyYAML-5.1.2.tar.gz (265kB) |████████████████████████████████| 266kB 9.6MB/s Requirement already satisfied: tqdm in /usr/local/lib/python3.6/dist-packages (from fvcore==0.1) (4.28.1) Collecting portalocker (from fvcore==0.1) Downloading https://files.pythonhosted.org/packages/60/ec/836a494dbaa72541f691ec4e66f29fdc8db9bcc7f49e1c2d457ba13ced42/portalocker-1.5.1-py2.py3-none-any.whl Requirement already satisfied: termcolor&gt;=1.1 in /usr/local/lib/python3.6/dist-packages (from fvcore==0.1) (1.1.0) Requirement already satisfied: shapely in /usr/local/lib/python3.6/dist-packages (from fvcore==0.1) (1.6.4.post2) Building wheels for collected packages: fvcore, pyyaml Building wheel for fvcore (setup.py) ... done Created wheel for fvcore: filename=fvcore-0.1-cp36-none-any.whl size=30803 sha256=0fe3120a28cd0125e6d8f804af89611178f206dc5b19e4bee4cef5fa9f952568 Stored in directory: /tmp/pip-ephem-wheel-cache-lgmu2lb2/wheels/48/53/79/3c6485543a4455a0006f5db590ab9957622b6227011941de06 Building wheel for pyyaml (setup.py) ... done Created wheel for pyyaml: filename=PyYAML-5.1.2-cp36-cp36m-linux_x86_64.whl size=44104 sha256=ae2b8f96bdf9abf5d40771722b1eaacb18ed7ce5afe06bdd4ecb9075be1d03ec Stored in directory: /root/.cache/pip/wheels/d9/45/dd/65f0b38450c47cf7e5312883deb97d065e030c5cca0a365030 Successfully built fvcore pyyaml Installing collected packages: pyyaml, yacs, portalocker, fvcore Found existing installation: PyYAML 3.13 Uninstalling PyYAML-3.13: Successfully uninstalled PyYAML-3.13 Successfully installed fvcore-0.1 portalocker-1.5.1 pyyaml-5.1.2 yacs-0.1.6 Cloning into &#39;detectron2_repo&#39;... remote: Enumerating objects: 458, done. remote: Counting objects: 100% (458/458), done. remote: Compressing objects: 100% (356/356), done. remote: Total 458 (delta 111), reused 443 (delta 99), pack-reused 0 Receiving objects: 100% (458/458), 1.40 MiB | 3.07 MiB/s, done. Resolving deltas: 100% (111/111), done. Obtaining file:///content/detectron2_repo Requirement already satisfied: termcolor&gt;=1.1 in /usr/local/lib/python3.6/dist-packages (from detectron2==0.1) (1.1.0) Requirement already satisfied: Pillow in /usr/local/lib/python3.6/dist-packages (from detectron2==0.1) (4.3.0) Requirement already satisfied: yacs&gt;=0.1.6 in /usr/local/lib/python3.6/dist-packages (from detectron2==0.1) (0.1.6) Requirement already satisfied: tabulate in /usr/local/lib/python3.6/dist-packages (from detectron2==0.1) (0.8.5) Requirement already satisfied: cloudpickle in /usr/local/lib/python3.6/dist-packages (from detectron2==0.1) (0.6.1) Requirement already satisfied: matplotlib in /usr/local/lib/python3.6/dist-packages (from detectron2==0.1) (3.0.3) Collecting tqdm&gt;4.29.0 (from detectron2==0.1) Downloading https://files.pythonhosted.org/packages/e1/c1/bc1dba38b48f4ae3c4428aea669c5e27bd5a7642a74c8348451e0bd8ff86/tqdm-4.36.1-py2.py3-none-any.whl (52kB) |████████████████████████████████| 61kB 5.2MB/s Requirement already satisfied: shapely in /usr/local/lib/python3.6/dist-packages (from detectron2==0.1) (1.6.4.post2) Requirement already satisfied: tensorboard in /usr/local/lib/python3.6/dist-packages (from detectron2==0.1) (1.15.0) Requirement already satisfied: olefile in /usr/local/lib/python3.6/dist-packages (from Pillow-&gt;detectron2==0.1) (0.46) Requirement already satisfied: PyYAML in /usr/local/lib/python3.6/dist-packages (from yacs&gt;=0.1.6-&gt;detectron2==0.1) (5.1.2) Requirement already satisfied: cycler&gt;=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib-&gt;detectron2==0.1) (0.10.0) Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,&gt;=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib-&gt;detectron2==0.1) (2.4.2) Requirement already satisfied: kiwisolver&gt;=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib-&gt;detectron2==0.1) (1.1.0) Requirement already satisfied: numpy&gt;=1.10.0 in /usr/local/lib/python3.6/dist-packages (from matplotlib-&gt;detectron2==0.1) (1.16.5) Requirement already satisfied: python-dateutil&gt;=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib-&gt;detectron2==0.1) (2.5.3) Requirement already satisfied: werkzeug&gt;=0.11.15 in /usr/local/lib/python3.6/dist-packages (from tensorboard-&gt;detectron2==0.1) (0.16.0) Requirement already satisfied: markdown&gt;=2.6.8 in /usr/local/lib/python3.6/dist-packages (from tensorboard-&gt;detectron2==0.1) (3.1.1) Requirement already satisfied: setuptools&gt;=41.0.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard-&gt;detectron2==0.1) (41.2.0) Requirement already satisfied: six&gt;=1.10.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard-&gt;detectron2==0.1) (1.12.0) Requirement already satisfied: protobuf&gt;=3.6.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard-&gt;detectron2==0.1) (3.7.1) Requirement already satisfied: wheel&gt;=0.26; python_version &gt;= &#34;3&#34; in /usr/local/lib/python3.6/dist-packages (from tensorboard-&gt;detectron2==0.1) (0.33.6) Requirement already satisfied: grpcio&gt;=1.6.3 in /usr/local/lib/python3.6/dist-packages (from tensorboard-&gt;detectron2==0.1) (1.15.0) Requirement already satisfied: absl-py&gt;=0.4 in /usr/local/lib/python3.6/dist-packages (from tensorboard-&gt;detectron2==0.1) (0.8.0) Installing collected packages: tqdm, detectron2 Found existing installation: tqdm 4.28.1 Uninstalling tqdm-4.28.1: Successfully uninstalled tqdm-4.28.1 Running setup.py develop for detectron2 Successfully installed detectron2 tqdm-4.36.1 . import detectron2, cv2, random import os, json, itertools import numpy as np import torch, torchvision from detectron2.utils.logger import setup_logger from detectron2.engine import DefaultPredictor from detectron2.config import get_cfg from detectron2.utils.visualizer import Visualizer from detectron2.data import MetadataCatalog from detectron2.structures import BoxMode from detectron2.data import DatasetCatalog, MetadataCatalog from detectron2.engine import DefaultTrainer from detectron2.config import get_cfg from matplotlib import pyplot as plt from google.colab.patches import cv2_imshow setup_logger() . &lt;Logger detectron2 (DEBUG)&gt; . Inference With Pre-Trained Model . !wget http://images.cocodataset.org/val2017/000000439715.jpg -O input.jpg im = cv2.imread(&quot;./input.jpg&quot;) cv2_imshow(im) . --2019-10-11 09:46:46-- http://images.cocodataset.org/val2017/000000439715.jpg Resolving images.cocodataset.org (images.cocodataset.org)... 52.216.106.116 Connecting to images.cocodataset.org (images.cocodataset.org)|52.216.106.116|:80... connected. HTTP request sent, awaiting response... 200 OK Length: 209222 (204K) [image/jpeg] Saving to: ‘input.jpg’ input.jpg 100%[===================&gt;] 204.32K 847KB/s in 0.2s 2019-10-11 09:46:47 (847 KB/s) - ‘input.jpg’ saved [209222/209222] . cfg = get_cfg() # get model from https://github.com/facebookresearch/detectron2/tree/master/configs cfg.merge_from_file(&quot;./detectron2_repo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml&quot;) cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5 # set threshold for this model # Weights ke pkl kre -_- cfg.MODEL.WEIGHTS = &quot;detectron2://COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl&quot; predictor = DefaultPredictor(cfg) outputs = predictor(im) . WARNING [10/11 09:46:54 d2.config.compat]: Config &#39;./detectron2_repo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml&#39; has no VERSION. Assuming it to be compatible with latest v2. . # look at the outputs print(&#39;Classes of instances:&#39;, outputs[&quot;instances&quot;].pred_classes) print(&#39;Bboxes of instances:&#39;, outputs[&quot;instances&quot;].pred_boxes) . Classes of instances: tensor([17, 0, 0, 0, 0, 0, 0, 0, 25, 0, 25, 25, 0, 0, 24], device=&#39;cuda:0&#39;) Bboxes of instances: Boxes(tensor([[126.6035, 244.8977, 459.8291, 480.0000], [251.1083, 157.8127, 338.9731, 413.6379], [114.8496, 268.6864, 148.2352, 398.8111], [ 0.8217, 281.0327, 78.6073, 478.4210], [ 49.3954, 274.1229, 80.1545, 342.9808], [561.2248, 271.5816, 596.2755, 385.2552], [385.9072, 270.3125, 413.7130, 304.0397], [515.9295, 278.3744, 562.2792, 389.3802], [335.2409, 251.9167, 414.7491, 275.9375], [350.9300, 269.2060, 386.0984, 297.9081], [331.6292, 230.9996, 393.2759, 257.2009], [510.7349, 263.2656, 570.9865, 295.9194], [409.0841, 271.8646, 460.5582, 356.8722], [506.8766, 283.3257, 529.9404, 324.0392], [594.5663, 283.4820, 609.0577, 311.4124]], device=&#39;cuda:0&#39;)) . # They also have visualization utils :P v = Visualizer(im, MetadataCatalog.get(&quot;coco_2017_val&quot;), scale = 1.5) v = v.draw_instance_predictions(outputs[&quot;instances&quot;].to(&quot;cpu&quot;)) cv2_imshow(v.get_image()[:, :, ::-1]) . Training on Custom Dataset . !wget https://github.com/matterport/Mask_RCNN/releases/download/v2.1/balloon_dataset.zip !unzip balloon_dataset.zip &gt; /dev/null . --2019-10-11 09:47:11-- https://github.com/matterport/Mask_RCNN/releases/download/v2.1/balloon_dataset.zip Resolving github.com (github.com)... 140.82.118.3 Connecting to github.com (github.com)|140.82.118.3|:443... connected. HTTP request sent, awaiting response... 302 Found Location: https://github-production-release-asset-2e65be.s3.amazonaws.com/107595270/737339e2-2b83-11e8-856a-188034eb3468?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20191011%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20191011T094712Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=7d6e77a1f62604e8eeea14871837711e05770f7ccefe7876722acc45d79590c6&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;response-content-disposition=attachment%3B%20filename%3Dballoon_dataset.zip&amp;response-content-type=application%2Foctet-stream [following] --2019-10-11 09:47:13-- https://github-production-release-asset-2e65be.s3.amazonaws.com/107595270/737339e2-2b83-11e8-856a-188034eb3468?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20191011%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20191011T094712Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=7d6e77a1f62604e8eeea14871837711e05770f7ccefe7876722acc45d79590c6&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;response-content-disposition=attachment%3B%20filename%3Dballoon_dataset.zip&amp;response-content-type=application%2Foctet-stream Resolving github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)... 52.216.165.179 Connecting to github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)|52.216.165.179|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 38741381 (37M) [application/octet-stream] Saving to: ‘balloon_dataset.zip.1’ balloon_dataset.zip 100%[===================&gt;] 36.95M 23.9MB/s in 1.5s 2019-10-11 09:47:15 (23.9 MB/s) - ‘balloon_dataset.zip.1’ saved [38741381/38741381] replace balloon/train/via_region_data.json? [y]es, [n]o, [A]ll, [N]one, [r]ename: n replace __MACOSX/balloon/train/._via_region_data.json? [y]es, [n]o, [A]ll, [N]one, [r]ename: n replace balloon/train/53500107_d24b11b3c2_b.jpg? [y]es, [n]o, [A]ll, [N]one, [r]ename: n replace __MACOSX/balloon/train/._53500107_d24b11b3c2_b.jpg? [y]es, [n]o, [A]ll, [N]one, [r]ename: . def get_balloon_dicts(img_dir): json_file = os.path.join(img_dir, &quot;via_region_data.json&quot;) with open(json_file) as f: imgs_anns = json.load(f) dataset_dicts = [] for _, v in imgs_anns.items(): record = {} filename = os.path.join(img_dir, v[&quot;filename&quot;]) height, width = cv2.imread(filename).shape[:2] record[&quot;file_name&quot;] = filename record[&quot;height&quot;] = height record[&quot;width&quot;] = width annos = v[&quot;regions&quot;] objs = [] for _, anno in annos.items(): assert not anno[&quot;region_attributes&quot;] anno = anno[&quot;shape_attributes&quot;] px = anno[&quot;all_points_x&quot;] py = anno[&quot;all_points_y&quot;] poly = [(x + 0.5, y + 0.5) for x, y in zip(px, py)] poly = list(itertools.chain.from_iterable(poly)) obj = { &quot;bbox&quot;: [np.min(px), np.min(py), np.max(px), np.max(py)], &quot;bbox_mode&quot;: BoxMode.XYXY_ABS, &quot;segmentation&quot;: [poly], &quot;category_id&quot;: 0, &quot;iscrowd&quot;: 0 } objs.append(obj) record[&quot;annotations&quot;] = objs dataset_dicts.append(record) return dataset_dicts . get_balloon_dicts(&quot;./balloon/train&quot;) . [{&#39;annotations&#39;: [{&#39;bbox&#39;: [994, 619, 1445, 1166], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1020.5, 963.5, 1000.5, 899.5, 994.5, 841.5, 1003.5, 787.5, 1023.5, 738.5, 1050.5, 700.5, 1089.5, 663.5, 1134.5, 638.5, 1190.5, 621.5, 1265.5, 619.5, 1321.5, 643.5, 1361.5, 672.5, 1403.5, 720.5, 1428.5, 765.5, 1442.5, 800.5, 1445.5, 860.5, 1441.5, 896.5, 1427.5, 942.5, 1400.5, 990.5, 1361.5, 1035.5, 1316.5, 1079.5, 1269.5, 1112.5, 1228.5, 1129.5, 1198.5, 1134.5, 1207.5, 1144.5, 1210.5, 1153.5, 1190.5, 1166.5, 1177.5, 1166.5, 1172.5, 1150.5, 1174.5, 1136.5, 1170.5, 1129.5, 1153.5, 1122.5, 1127.5, 1112.5, 1104.5, 1084.5, 1061.5, 1037.5, 1032.5, 989.5, 1020.5, 963.5]]}], &#39;file_name&#39;: &#39;./balloon/train/34020010494_e5cb88e1c4_k.jpg&#39;, &#39;height&#39;: 1536, &#39;width&#39;: 2048}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [135, 115, 811, 965], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[586.5, 133.5, 510.5, 116.5, 441.5, 115.5, 389.5, 126.5, 331.5, 149.5, 268.5, 185.5, 196.5, 261.5, 158.5, 339.5, 135.5, 438.5, 156.5, 560.5, 210.5, 664.5, 307.5, 784.5, 403.5, 868.5, 437.5, 893.5, 443.5, 929.5, 425.5, 964.5, 448.5, 964.5, 481.5, 961.5, 506.5, 965.5, 513.5, 958.5, 503.5, 936.5, 511.5, 910.5, 502.5, 896.5, 583.5, 836.5, 669.5, 752.5, 755.5, 636.5, 800.5, 538.5, 811.5, 454.5, 803.5, 392.5, 784.5, 329.5, 755.5, 270.5, 717.5, 220.5, 668.5, 175.5, 620.5, 149.5, 586.5, 133.5]]}], &#39;file_name&#39;: &#39;./balloon/train/25899693952_7c8b8b9edc_k.jpg&#39;, &#39;height&#39;: 1365, &#39;width&#39;: 2048}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [579, 487, 920, 921], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[621.5, 550.5, 641.5, 527.5, 670.5, 507.5, 694.5, 496.5, 723.5, 489.5, 747.5, 487.5, 772.5, 487.5, 810.5, 499.5, 837.5, 516.5, 863.5, 536.5, 882.5, 559.5, 893.5, 577.5, 906.5, 600.5, 918.5, 645.5, 920.5, 680.5, 917.5, 721.5, 911.5, 745.5, 900.5, 774.5, 883.5, 809.5, 859.5, 842.5, 830.5, 867.5, 809.5, 882.5, 786.5, 892.5, 780.5, 893.5, 775.5, 899.5, 778.5, 906.5, 778.5, 916.5, 775.5, 920.5, 768.5, 921.5, 761.5, 916.5, 757.5, 911.5, 756.5, 909.5, 758.5, 905.5, 760.5, 903.5, 762.5, 898.5, 770.5, 896.5, 772.5, 893.5, 762.5, 892.5, 745.5, 889.5, 720.5, 878.5, 702.5, 869.5, 678.5, 854.5, 659.5, 837.5, 635.5, 812.5, 611.5, 782.5, 594.5, 746.5, 586.5, 716.5, 581.5, 679.5, 579.5, 648.5, 586.5, 618.5, 596.5, 591.5, 607.5, 566.5, 621.5, 550.5]]}], &#39;file_name&#39;: &#39;./balloon/train/24362039530_b151b41a52_k.jpg&#39;, &#39;height&#39;: 2048, &#39;width&#39;: 1536}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [534, 365, 871, 811], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[618.5, 385.5, 657.5, 370.5, 688.5, 365.5, 707.5, 365.5, 741.5, 373.5, 760.5, 382.5, 779.5, 390.5, 791.5, 404.5, 820.5, 432.5, 836.5, 451.5, 844.5, 472.5, 860.5, 507.5, 868.5, 541.5, 871.5, 561.5, 871.5, 589.5, 868.5, 612.5, 864.5, 635.5, 854.5, 668.5, 840.5, 698.5, 824.5, 727.5, 809.5, 752.5, 795.5, 764.5, 778.5, 784.5, 759.5, 807.5, 741.5, 804.5, 719.5, 803.5, 699.5, 805.5, 677.5, 811.5, 664.5, 796.5, 641.5, 772.5, 623.5, 754.5, 606.5, 735.5, 601.5, 729.5, 582.5, 704.5, 567.5, 682.5, 554.5, 648.5, 535.5, 593.5, 534.5, 530.5, 543.5, 483.5, 560.5, 446.5, 579.5, 420.5, 597.5, 401.5, 618.5, 385.5]]}, {&#39;bbox&#39;: [795, 457, 1013, 805], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[942.5, 480.5, 960.5, 494.5, 979.5, 515.5, 990.5, 531.5, 1006.5, 563.5, 1008.5, 581.5, 1012.5, 597.5, 1013.5, 619.5, 984.5, 623.5, 959.5, 630.5, 933.5, 642.5, 906.5, 657.5, 879.5, 683.5, 858.5, 715.5, 844.5, 742.5, 831.5, 780.5, 825.5, 805.5, 816.5, 792.5, 806.5, 780.5, 795.5, 765.5, 811.5, 748.5, 826.5, 723.5, 842.5, 694.5, 856.5, 661.5, 869.5, 616.5, 871.5, 564.5, 863.5, 521.5, 854.5, 490.5, 840.5, 466.5, 865.5, 457.5, 891.5, 458.5, 917.5, 464.5, 942.5, 480.5]]}, {&#39;bbox&#39;: [823, 619, 1161, 1064], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1068.5, 632.5, 1087.5, 641.5, 1111.5, 660.5, 1126.5, 677.5, 1141.5, 695.5, 1150.5, 723.5, 1161.5, 756.5, 1161.5, 782.5, 1159.5, 817.5, 1149.5, 849.5, 1135.5, 886.5, 1122.5, 906.5, 1103.5, 929.5, 1081.5, 951.5, 1054.5, 970.5, 1024.5, 991.5, 996.5, 1006.5, 976.5, 1015.5, 960.5, 1029.5, 941.5, 1041.5, 924.5, 1047.5, 912.5, 1050.5, 903.5, 1054.5, 905.5, 1059.5, 898.5, 1064.5, 903.5, 1048.5, 906.5, 1028.5, 906.5, 996.5, 903.5, 960.5, 892.5, 928.5, 881.5, 905.5, 863.5, 877.5, 845.5, 856.5, 830.5, 844.5, 823.5, 838.5, 823.5, 821.5, 828.5, 796.5, 837.5, 764.5, 848.5, 734.5, 873.5, 692.5, 894.5, 667.5, 923.5, 647.5, 953.5, 632.5, 988.5, 622.5, 1021.5, 619.5, 1046.5, 623.5, 1068.5, 632.5]]}, {&#39;bbox&#39;: [564, 803, 907, 1245], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[651.5, 826.5, 667.5, 817.5, 686.5, 809.5, 719.5, 803.5, 737.5, 803.5, 751.5, 805.5, 766.5, 810.5, 783.5, 816.5, 797.5, 821.5, 808.5, 827.5, 827.5, 842.5, 846.5, 856.5, 861.5, 874.5, 876.5, 897.5, 890.5, 926.5, 903.5, 956.5, 906.5, 999.5, 907.5, 1027.5, 898.5, 1061.5, 884.5, 1101.5, 867.5, 1128.5, 852.5, 1150.5, 831.5, 1172.5, 814.5, 1189.5, 798.5, 1202.5, 782.5, 1216.5, 766.5, 1227.5, 753.5, 1229.5, 749.5, 1231.5, 750.5, 1234.5, 751.5, 1241.5, 751.5, 1243.5, 746.5, 1245.5, 740.5, 1243.5, 735.5, 1242.5, 732.5, 1238.5, 732.5, 1232.5, 731.5, 1227.5, 719.5, 1224.5, 707.5, 1216.5, 689.5, 1204.5, 674.5, 1193.5, 657.5, 1182.5, 638.5, 1168.5, 617.5, 1142.5, 598.5, 1114.5, 584.5, 1085.5, 569.5, 1045.5, 564.5, 1001.5, 566.5, 948.5, 573.5, 922.5, 586.5, 890.5, 604.5, 861.5, 626.5, 842.5, 651.5, 826.5]]}, {&#39;bbox&#39;: [805, 991, 1122, 1364], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1082.5, 1026.5, 1093.5, 1039.5, 1103.5, 1054.5, 1113.5, 1074.5, 1120.5, 1101.5, 1122.5, 1127.5, 1122.5, 1147.5, 1118.5, 1181.5, 1107.5, 1206.5, 1093.5, 1234.5, 1078.5, 1251.5, 1061.5, 1271.5, 1041.5, 1288.5, 1017.5, 1305.5, 986.5, 1319.5, 959.5, 1327.5, 938.5, 1334.5, 922.5, 1336.5, 906.5, 1342.5, 877.5, 1352.5, 861.5, 1359.5, 845.5, 1360.5, 830.5, 1357.5, 830.5, 1356.5, 824.5, 1358.5, 823.5, 1364.5, 817.5, 1363.5, 813.5, 1357.5, 813.5, 1348.5, 821.5, 1350.5, 817.5, 1343.5, 811.5, 1331.5, 807.5, 1313.5, 809.5, 1292.5, 809.5, 1268.5, 807.5, 1240.5, 805.5, 1200.5, 825.5, 1179.5, 842.5, 1161.5, 860.5, 1140.5, 881.5, 1105.5, 891.5, 1080.5, 896.5, 1064.5, 906.5, 1060.5, 906.5, 1054.5, 912.5, 1048.5, 936.5, 1044.5, 964.5, 1028.5, 972.5, 1021.5, 992.5, 1008.5, 1011.5, 999.5, 1023.5, 991.5, 1048.5, 1000.5, 1066.5, 1011.5, 1082.5, 1026.5]]}, {&#39;bbox&#39;: [600, 1219, 822, 1575], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[803.5, 1426.5, 791.5, 1453.5, 781.5, 1474.5, 775.5, 1483.5, 750.5, 1515.5, 737.5, 1532.5, 726.5, 1551.5, 705.5, 1558.5, 705.5, 1565.5, 706.5, 1572.5, 700.5, 1575.5, 694.5, 1574.5, 693.5, 1570.5, 693.5, 1564.5, 694.5, 1560.5, 688.5, 1558.5, 678.5, 1555.5, 667.5, 1553.5, 660.5, 1547.5, 650.5, 1538.5, 644.5, 1529.5, 637.5, 1523.5, 627.5, 1517.5, 614.5, 1508.5, 600.5, 1497.5, 609.5, 1496.5, 625.5, 1496.5, 639.5, 1494.5, 651.5, 1493.5, 665.5, 1492.5, 678.5, 1490.5, 688.5, 1486.5, 694.5, 1486.5, 700.5, 1486.5, 707.5, 1480.5, 710.5, 1474.5, 710.5, 1467.5, 721.5, 1445.5, 725.5, 1420.5, 735.5, 1377.5, 739.5, 1350.5, 737.5, 1322.5, 732.5, 1284.5, 725.5, 1257.5, 718.5, 1235.5, 710.5, 1219.5, 722.5, 1226.5, 731.5, 1226.5, 731.5, 1234.5, 734.5, 1240.5, 741.5, 1243.5, 748.5, 1246.5, 751.5, 1241.5, 749.5, 1232.5, 756.5, 1231.5, 771.5, 1239.5, 790.5, 1261.5, 798.5, 1275.5, 805.5, 1289.5, 808.5, 1297.5, 807.5, 1308.5, 807.5, 1318.5, 811.5, 1326.5, 815.5, 1342.5, 822.5, 1349.5, 813.5, 1349.5, 812.5, 1357.5, 816.5, 1363.5, 817.5, 1373.5, 813.5, 1394.5, 803.5, 1426.5]]}, {&#39;bbox&#39;: [390, 1122, 739, 1496], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[390.5, 1282.5, 395.5, 1249.5, 407.5, 1207.5, 435.5, 1170.5, 456.5, 1151.5, 483.5, 1138.5, 506.5, 1130.5, 538.5, 1122.5, 565.5, 1126.5, 591.5, 1131.5, 611.5, 1139.5, 620.5, 1145.5, 635.5, 1165.5, 653.5, 1181.5, 676.5, 1196.5, 695.5, 1208.5, 711.5, 1218.5, 715.5, 1226.5, 722.5, 1243.5, 729.5, 1270.5, 732.5, 1292.5, 739.5, 1327.5, 738.5, 1365.5, 730.5, 1404.5, 725.5, 1425.5, 714.5, 1458.5, 708.5, 1472.5, 710.5, 1477.5, 700.5, 1487.5, 692.5, 1486.5, 680.5, 1491.5, 662.5, 1491.5, 636.5, 1495.5, 620.5, 1495.5, 603.5, 1496.5, 577.5, 1496.5, 548.5, 1490.5, 517.5, 1479.5, 501.5, 1469.5, 478.5, 1457.5, 452.5, 1437.5, 429.5, 1412.5, 414.5, 1389.5, 399.5, 1356.5, 394.5, 1336.5, 390.5, 1313.5, 390.5, 1282.5]]}, {&#39;bbox&#39;: [355, 926, 587, 1134], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[417.5, 1087.5, 401.5, 1073.5, 386.5, 1054.5, 377.5, 1037.5, 367.5, 1020.5, 361.5, 1002.5, 357.5, 976.5, 355.5, 954.5, 355.5, 926.5, 366.5, 938.5, 375.5, 952.5, 393.5, 972.5, 409.5, 983.5, 427.5, 994.5, 447.5, 1004.5, 472.5, 1016.5, 493.5, 1025.5, 503.5, 1034.5, 516.5, 1039.5, 530.5, 1048.5, 550.5, 1046.5, 568.5, 1044.5, 575.5, 1062.5, 582.5, 1078.5, 587.5, 1093.5, 581.5, 1104.5, 571.5, 1124.5, 571.5, 1126.5, 557.5, 1124.5, 540.5, 1122.5, 512.5, 1130.5, 492.5, 1134.5, 471.5, 1123.5, 451.5, 1113.5, 433.5, 1099.5, 417.5, 1087.5]]}, {&#39;bbox&#39;: [307, 637, 640, 1048], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[309.5, 754.5, 312.5, 744.5, 320.5, 717.5, 335.5, 693.5, 349.5, 675.5, 367.5, 659.5, 386.5, 649.5, 408.5, 640.5, 431.5, 638.5, 464.5, 637.5, 488.5, 643.5, 534.5, 663.5, 554.5, 677.5, 569.5, 688.5, 581.5, 704.5, 592.5, 719.5, 603.5, 734.5, 618.5, 762.5, 622.5, 776.5, 629.5, 794.5, 634.5, 814.5, 640.5, 830.5, 633.5, 838.5, 622.5, 846.5, 604.5, 859.5, 590.5, 885.5, 573.5, 921.5, 566.5, 949.5, 566.5, 966.5, 566.5, 982.5, 564.5, 1007.5, 567.5, 1027.5, 569.5, 1044.5, 558.5, 1045.5, 533.5, 1048.5, 516.5, 1041.5, 503.5, 1033.5, 489.5, 1024.5, 466.5, 1013.5, 443.5, 1004.5, 425.5, 994.5, 404.5, 981.5, 392.5, 969.5, 376.5, 955.5, 363.5, 936.5, 352.5, 924.5, 338.5, 898.5, 320.5, 861.5, 307.5, 808.5, 307.5, 775.5, 309.5, 754.5]]}, {&#39;bbox&#39;: [461, 522, 678, 830], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[467.5, 610.5, 478.5, 586.5, 492.5, 562.5, 508.5, 543.5, 522.5, 531.5, 534.5, 522.5, 533.5, 539.5, 535.5, 564.5, 536.5, 595.5, 546.5, 622.5, 556.5, 656.5, 570.5, 685.5, 585.5, 708.5, 602.5, 729.5, 620.5, 752.5, 670.5, 802.5, 678.5, 810.5, 641.5, 830.5, 633.5, 805.5, 623.5, 778.5, 612.5, 750.5, 600.5, 731.5, 583.5, 707.5, 567.5, 687.5, 537.5, 665.5, 499.5, 648.5, 479.5, 639.5, 462.5, 636.5, 461.5, 628.5, 467.5, 610.5]]}], &#39;file_name&#39;: &#39;./balloon/train/18849792632_aad23ad513_k.jpg&#39;, &#39;height&#39;: 2048, &#39;width&#39;: 1536}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [748, 195, 1425, 1101], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[843.5, 301.5, 891.5, 253.5, 999.5, 206.5, 1092.5, 195.5, 1186.5, 217.5, 1273.5, 267.5, 1336.5, 326.5, 1388.5, 417.5, 1416.5, 510.5, 1425.5, 596.5, 1411.5, 686.5, 1376.5, 790.5, 1326.5, 875.5, 1268.5, 950.5, 1213.5, 1007.5, 1159.5, 1032.5, 1137.5, 1042.5, 1131.5, 1059.5, 1135.5, 1071.5, 1137.5, 1088.5, 1124.5, 1101.5, 1089.5, 1096.5, 1078.5, 1071.5, 1091.5, 1064.5, 1085.5, 1042.5, 1064.5, 1032.5, 1038.5, 1027.5, 1000.5, 1000.5, 954.5, 960.5, 929.5, 930.5, 888.5, 889.5, 839.5, 826.5, 797.5, 755.5, 772.5, 699.5, 749.5, 589.5, 748.5, 504.5, 765.5, 427.5, 807.5, 344.5, 843.5, 301.5]]}, {&#39;bbox&#39;: [1037, 56, 1586, 799], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1372.5, 73.5, 1429.5, 107.5, 1481.5, 146.5, 1524.5, 202.5, 1568.5, 280.5, 1586.5, 367.5, 1584.5, 470.5, 1568.5, 537.5, 1535.5, 612.5, 1500.5, 670.5, 1464.5, 715.5, 1416.5, 770.5, 1378.5, 799.5, 1398.5, 728.5, 1424.5, 611.5, 1409.5, 481.5, 1382.5, 399.5, 1336.5, 324.5, 1289.5, 283.5, 1229.5, 240.5, 1158.5, 207.5, 1081.5, 196.5, 1037.5, 196.5, 1074.5, 151.5, 1137.5, 99.5, 1189.5, 73.5, 1244.5, 60.5, 1304.5, 56.5, 1372.5, 73.5]]}, {&#39;bbox&#39;: [1279, 469, 1684, 1099], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1649.5, 537.5, 1683.5, 637.5, 1684.5, 725.5, 1665.5, 807.5, 1627.5, 888.5, 1585.5, 943.5, 1531.5, 1005.5, 1486.5, 1034.5, 1447.5, 1047.5, 1448.5, 1064.5, 1464.5, 1078.5, 1462.5, 1099.5, 1431.5, 1097.5, 1416.5, 1089.5, 1413.5, 1083.5, 1414.5, 1069.5, 1414.5, 1043.5, 1376.5, 1033.5, 1331.5, 1003.5, 1301.5, 970.5, 1279.5, 941.5, 1339.5, 852.5, 1373.5, 797.5, 1430.5, 758.5, 1495.5, 675.5, 1541.5, 602.5, 1573.5, 523.5, 1589.5, 469.5, 1620.5, 498.5, 1649.5, 537.5]]}, {&#39;bbox&#39;: [1599, 498, 1904, 1015], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1815.5, 531.5, 1863.5, 581.5, 1896.5, 645.5, 1904.5, 714.5, 1893.5, 779.5, 1868.5, 842.5, 1826.5, 908.5, 1786.5, 952.5, 1754.5, 977.5, 1716.5, 988.5, 1716.5, 996.5, 1726.5, 1001.5, 1724.5, 1009.5, 1693.5, 1015.5, 1689.5, 990.5, 1648.5, 977.5, 1611.5, 947.5, 1599.5, 935.5, 1635.5, 879.5, 1669.5, 810.5, 1689.5, 722.5, 1680.5, 615.5, 1660.5, 555.5, 1632.5, 510.5, 1678.5, 498.5, 1742.5, 498.5, 1792.5, 515.5, 1815.5, 531.5]]}, {&#39;bbox&#39;: [397, 468, 728, 890], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[666.5, 508.5, 694.5, 542.5, 717.5, 597.5, 728.5, 651.5, 712.5, 698.5, 692.5, 749.5, 661.5, 790.5, 630.5, 831.5, 607.5, 851.5, 575.5, 858.5, 567.5, 859.5, 570.5, 874.5, 574.5, 881.5, 557.5, 890.5, 550.5, 890.5, 551.5, 873.5, 545.5, 853.5, 528.5, 851.5, 502.5, 841.5, 468.5, 810.5, 437.5, 775.5, 410.5, 725.5, 398.5, 688.5, 397.5, 634.5, 408.5, 585.5, 430.5, 548.5, 460.5, 513.5, 504.5, 485.5, 548.5, 471.5, 586.5, 468.5, 630.5, 481.5, 666.5, 508.5]]}, {&#39;bbox&#39;: [490, 797, 819, 1229], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[760.5, 837.5, 790.5, 870.5, 814.5, 916.5, 819.5, 966.5, 817.5, 1020.5, 797.5, 1075.5, 772.5, 1114.5, 734.5, 1162.5, 689.5, 1197.5, 643.5, 1207.5, 641.5, 1222.5, 646.5, 1225.5, 632.5, 1229.5, 626.5, 1227.5, 627.5, 1220.5, 624.5, 1209.5, 607.5, 1206.5, 585.5, 1194.5, 569.5, 1174.5, 557.5, 1165.5, 567.5, 1125.5, 562.5, 1085.5, 548.5, 1045.5, 524.5, 1004.5, 497.5, 972.5, 490.5, 965.5, 492.5, 932.5, 508.5, 890.5, 526.5, 862.5, 533.5, 854.5, 541.5, 854.5, 546.5, 854.5, 551.5, 865.5, 551.5, 879.5, 547.5, 886.5, 552.5, 890.5, 570.5, 885.5, 574.5, 879.5, 570.5, 867.5, 570.5, 863.5, 588.5, 854.5, 613.5, 843.5, 629.5, 828.5, 644.5, 810.5, 656.5, 797.5, 694.5, 804.5, 728.5, 814.5, 760.5, 837.5]]}, {&#39;bbox&#39;: [211, 930, 568, 1383], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[356.5, 932.5, 427.5, 930.5, 469.5, 946.5, 490.5, 963.5, 519.5, 1000.5, 544.5, 1039.5, 563.5, 1076.5, 568.5, 1140.5, 556.5, 1176.5, 548.5, 1224.5, 521.5, 1277.5, 495.5, 1312.5, 466.5, 1342.5, 435.5, 1356.5, 436.5, 1370.5, 409.5, 1378.5, 405.5, 1383.5, 399.5, 1378.5, 404.5, 1366.5, 404.5, 1356.5, 339.5, 1339.5, 282.5, 1290.5, 240.5, 1233.5, 222.5, 1190.5, 211.5, 1113.5, 217.5, 1069.5, 242.5, 1017.5, 284.5, 970.5, 320.5, 947.5, 356.5, 932.5]]}], &#39;file_name&#39;: &#39;./balloon/train/17178818589_16e58fc1e5_k.jpg&#39;, &#39;height&#39;: 1536, &#39;width&#39;: 2048}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [75, 95, 938, 961], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[642.5, 110.5, 683.5, 126.5, 752.5, 166.5, 788.5, 197.5, 850.5, 262.5, 893.5, 330.5, 930.5, 426.5, 938.5, 515.5, 936.5, 560.5, 923.5, 627.5, 897.5, 688.5, 864.5, 749.5, 832.5, 793.5, 793.5, 830.5, 745.5, 871.5, 697.5, 906.5, 599.5, 946.5, 525.5, 958.5, 449.5, 961.5, 376.5, 953.5, 300.5, 932.5, 268.5, 916.5, 260.5, 920.5, 251.5, 923.5, 219.5, 919.5, 195.5, 920.5, 179.5, 922.5, 165.5, 907.5, 166.5, 852.5, 162.5, 823.5, 132.5, 777.5, 108.5, 738.5, 85.5, 660.5, 76.5, 597.5, 75.5, 539.5, 82.5, 471.5, 104.5, 401.5, 124.5, 348.5, 148.5, 310.5, 174.5, 273.5, 215.5, 228.5, 270.5, 179.5, 326.5, 145.5, 384.5, 120.5, 454.5, 103.5, 537.5, 95.5, 592.5, 99.5, 642.5, 110.5]]}], &#39;file_name&#39;: &#39;./balloon/train/17156759330_5af4f5a5b8_k.jpg&#39;, &#39;height&#39;: 1363, &#39;width&#39;: 2048}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [1097, 225, 1768, 904], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1508.5, 232.5, 1581.5, 262.5, 1635.5, 287.5, 1665.5, 323.5, 1729.5, 401.5, 1748.5, 453.5, 1768.5, 527.5, 1760.5, 639.5, 1729.5, 702.5, 1674.5, 796.5, 1582.5, 864.5, 1516.5, 893.5, 1444.5, 904.5, 1381.5, 904.5, 1312.5, 884.5, 1300.5, 887.5, 1251.5, 866.5, 1256.5, 854.5, 1214.5, 823.5, 1153.5, 754.5, 1121.5, 680.5, 1097.5, 570.5, 1112.5, 465.5, 1144.5, 385.5, 1192.5, 321.5, 1256.5, 277.5, 1297.5, 250.5, 1349.5, 237.5, 1417.5, 225.5, 1508.5, 232.5]]}], &#39;file_name&#39;: &#39;./balloon/train/16435593892_2aa8118f4a_k.jpg&#39;, &#39;height&#39;: 2048, &#39;width&#39;: 1895}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [542, 468, 750, 670], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[619.5, 469.5, 656.5, 468.5, 687.5, 480.5, 707.5, 493.5, 726.5, 514.5, 742.5, 540.5, 748.5, 564.5, 749.5, 596.5, 750.5, 607.5, 727.5, 610.5, 705.5, 619.5, 684.5, 636.5, 672.5, 652.5, 663.5, 670.5, 635.5, 667.5, 608.5, 659.5, 584.5, 643.5, 573.5, 632.5, 560.5, 617.5, 548.5, 595.5, 542.5, 570.5, 544.5, 547.5, 549.5, 526.5, 562.5, 501.5, 573.5, 488.5, 587.5, 479.5, 606.5, 472.5, 619.5, 469.5]]}, {&#39;bbox&#39;: [748, 457, 940, 680], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[848.5, 458.5, 874.5, 464.5, 893.5, 473.5, 909.5, 486.5, 920.5, 499.5, 928.5, 515.5, 937.5, 543.5, 940.5, 570.5, 940.5, 588.5, 939.5, 599.5, 934.5, 611.5, 924.5, 615.5, 906.5, 624.5, 895.5, 635.5, 887.5, 646.5, 876.5, 662.5, 869.5, 680.5, 853.5, 676.5, 845.5, 659.5, 835.5, 647.5, 824.5, 636.5, 804.5, 624.5, 788.5, 615.5, 773.5, 611.5, 763.5, 609.5, 756.5, 596.5, 751.5, 583.5, 748.5, 572.5, 748.5, 557.5, 748.5, 542.5, 751.5, 527.5, 757.5, 509.5, 765.5, 494.5, 776.5, 481.5, 793.5, 470.5, 809.5, 463.5, 828.5, 457.5, 848.5, 458.5]]}, {&#39;bbox&#39;: [730, 522, 762, 609], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[736.5, 523.5, 744.5, 522.5, 749.5, 524.5, 751.5, 524.5, 750.5, 533.5, 748.5, 542.5, 748.5, 556.5, 749.5, 572.5, 752.5, 585.5, 758.5, 599.5, 762.5, 609.5, 751.5, 607.5, 750.5, 597.5, 749.5, 584.5, 748.5, 574.5, 747.5, 559.5, 742.5, 542.5, 736.5, 530.5, 730.5, 522.5, 736.5, 523.5]]}, {&#39;bbox&#39;: [864, 608, 1055, 827], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[972.5, 609.5, 988.5, 611.5, 1016.5, 624.5, 1030.5, 639.5, 1046.5, 663.5, 1054.5, 688.5, 1055.5, 713.5, 1049.5, 741.5, 1039.5, 762.5, 1026.5, 781.5, 1012.5, 794.5, 985.5, 809.5, 969.5, 814.5, 959.5, 821.5, 951.5, 822.5, 943.5, 827.5, 937.5, 821.5, 927.5, 814.5, 927.5, 811.5, 913.5, 801.5, 896.5, 787.5, 883.5, 768.5, 876.5, 753.5, 868.5, 736.5, 864.5, 718.5, 866.5, 694.5, 872.5, 672.5, 880.5, 657.5, 887.5, 645.5, 898.5, 630.5, 913.5, 620.5, 926.5, 614.5, 942.5, 609.5, 962.5, 608.5, 972.5, 609.5]]}, {&#39;bbox&#39;: [659, 608, 864, 803], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[659.5, 706.5, 659.5, 690.5, 663.5, 673.5, 669.5, 657.5, 677.5, 645.5, 690.5, 632.5, 703.5, 621.5, 716.5, 615.5, 734.5, 609.5, 753.5, 608.5, 770.5, 610.5, 784.5, 614.5, 799.5, 621.5, 815.5, 630.5, 827.5, 639.5, 837.5, 649.5, 849.5, 667.5, 856.5, 682.5, 862.5, 696.5, 862.5, 696.5, 863.5, 710.5, 864.5, 725.5, 863.5, 744.5, 863.5, 760.5, 863.5, 770.5, 864.5, 776.5, 863.5, 780.5, 861.5, 782.5, 858.5, 780.5, 853.5, 785.5, 847.5, 788.5, 838.5, 791.5, 833.5, 791.5, 818.5, 797.5, 800.5, 800.5, 776.5, 803.5, 752.5, 800.5, 727.5, 793.5, 715.5, 785.5, 699.5, 775.5, 683.5, 762.5, 674.5, 752.5, 667.5, 739.5, 659.5, 718.5, 659.5, 706.5]]}, {&#39;bbox&#39;: [648, 733, 873, 880], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[808.5, 865.5, 789.5, 873.5, 763.5, 879.5, 745.5, 880.5, 725.5, 876.5, 702.5, 869.5, 683.5, 857.5, 663.5, 838.5, 652.5, 819.5, 648.5, 792.5, 648.5, 769.5, 652.5, 753.5, 658.5, 742.5, 665.5, 733.5, 674.5, 753.5, 689.5, 769.5, 704.5, 779.5, 715.5, 784.5, 733.5, 795.5, 757.5, 801.5, 779.5, 803.5, 798.5, 800.5, 815.5, 797.5, 833.5, 791.5, 838.5, 792.5, 853.5, 785.5, 857.5, 779.5, 861.5, 781.5, 863.5, 792.5, 868.5, 805.5, 873.5, 810.5, 873.5, 812.5, 872.5, 815.5, 866.5, 823.5, 864.5, 823.5, 861.5, 821.5, 854.5, 829.5, 846.5, 837.5, 836.5, 842.5, 824.5, 853.5, 808.5, 865.5]]}], &#39;file_name&#39;: &#39;./balloon/train/15717689633_5f7f78c28e_k.jpg&#39;, &#39;height&#39;: 1536, &#39;width&#39;: 2048}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [130, 1249, 534, 1733], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[306.5, 1255.5, 377.5, 1249.5, 432.5, 1252.5, 473.5, 1272.5, 507.5, 1292.5, 530.5, 1311.5, 534.5, 1316.5, 524.5, 1347.5, 527.5, 1354.5, 497.5, 1419.5, 477.5, 1491.5, 452.5, 1596.5, 436.5, 1647.5, 444.5, 1662.5, 456.5, 1670.5, 470.5, 1670.5, 478.5, 1696.5, 402.5, 1728.5, 346.5, 1733.5, 294.5, 1723.5, 248.5, 1700.5, 202.5, 1666.5, 162.5, 1611.5, 137.5, 1545.5, 130.5, 1496.5, 138.5, 1427.5, 158.5, 1377.5, 189.5, 1331.5, 236.5, 1288.5, 271.5, 1269.5, 306.5, 1255.5]]}], &#39;file_name&#39;: &#39;./balloon/train/15331928994_d5b82eb368_k.jpg&#39;, &#39;height&#39;: 2048, &#39;width&#39;: 1365}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [1206, 41, 1414, 236], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1388.5, 60.5, 1406.5, 83.5, 1413.5, 102.5, 1414.5, 125.5, 1413.5, 152.5, 1402.5, 177.5, 1389.5, 194.5, 1370.5, 210.5, 1349.5, 225.5, 1325.5, 233.5, 1309.5, 235.5, 1297.5, 236.5, 1285.5, 222.5, 1272.5, 208.5, 1251.5, 198.5, 1230.5, 195.5, 1217.5, 194.5, 1206.5, 193.5, 1211.5, 168.5, 1219.5, 130.5, 1229.5, 106.5, 1247.5, 77.5, 1275.5, 59.5, 1300.5, 41.5, 1326.5, 42.5, 1347.5, 42.5, 1369.5, 50.5, 1388.5, 60.5]]}, {&#39;bbox&#39;: [1122, 194, 1310, 375], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1310.5, 284.5, 1306.5, 305.5, 1295.5, 327.5, 1280.5, 344.5, 1268.5, 355.5, 1243.5, 368.5, 1224.5, 373.5, 1205.5, 375.5, 1187.5, 375.5, 1167.5, 370.5, 1154.5, 366.5, 1141.5, 361.5, 1130.5, 355.5, 1128.5, 350.5, 1126.5, 353.5, 1122.5, 349.5, 1123.5, 345.5, 1123.5, 334.5, 1123.5, 314.5, 1122.5, 297.5, 1123.5, 279.5, 1128.5, 264.5, 1131.5, 255.5, 1138.5, 242.5, 1148.5, 230.5, 1156.5, 221.5, 1172.5, 209.5, 1185.5, 200.5, 1201.5, 194.5, 1218.5, 194.5, 1236.5, 196.5, 1255.5, 200.5, 1276.5, 212.5, 1290.5, 226.5, 1301.5, 243.5, 1306.5, 256.5, 1310.5, 274.5, 1310.5, 284.5]]}, {&#39;bbox&#39;: [995, 61, 1174, 288], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1173.5, 149.5, 1174.5, 163.5, 1172.5, 184.5, 1164.5, 204.5, 1158.5, 219.5, 1150.5, 228.5, 1141.5, 240.5, 1135.5, 248.5, 1131.5, 256.5, 1119.5, 266.5, 1105.5, 281.5, 1094.5, 287.5, 1084.5, 288.5, 1075.5, 284.5, 1062.5, 272.5, 1045.5, 253.5, 1035.5, 243.5, 1026.5, 230.5, 1014.5, 213.5, 1005.5, 193.5, 1000.5, 180.5, 995.5, 155.5, 1000.5, 134.5, 1004.5, 120.5, 1017.5, 98.5, 1026.5, 86.5, 1044.5, 72.5, 1061.5, 65.5, 1076.5, 61.5, 1100.5, 63.5, 1116.5, 69.5, 1133.5, 78.5, 1151.5, 95.5, 1161.5, 111.5, 1169.5, 129.5, 1173.5, 149.5]]}], &#39;file_name&#39;: &#39;./balloon/train/15290896925_884ab33fd3_k.jpg&#39;, &#39;height&#39;: 1356, &#39;width&#39;: 2048}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [376, 257, 619, 581], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[493.5, 257.5, 519.5, 259.5, 542.5, 268.5, 564.5, 278.5, 579.5, 294.5, 595.5, 311.5, 613.5, 347.5, 617.5, 372.5, 619.5, 402.5, 615.5, 427.5, 609.5, 453.5, 599.5, 476.5, 589.5, 497.5, 551.5, 541.5, 539.5, 555.5, 526.5, 561.5, 523.5, 568.5, 531.5, 577.5, 525.5, 579.5, 517.5, 581.5, 512.5, 579.5, 514.5, 573.5, 514.5, 568.5, 512.5, 563.5, 503.5, 561.5, 492.5, 557.5, 479.5, 549.5, 467.5, 541.5, 452.5, 530.5, 435.5, 515.5, 426.5, 505.5, 415.5, 495.5, 407.5, 480.5, 390.5, 456.5, 378.5, 419.5, 376.5, 395.5, 377.5, 369.5, 380.5, 346.5, 392.5, 320.5, 413.5, 290.5, 432.5, 278.5, 454.5, 264.5, 474.5, 259.5, 493.5, 257.5]]}, {&#39;bbox&#39;: [432, 483, 607, 661], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[607.5, 532.5, 603.5, 566.5, 595.5, 589.5, 586.5, 610.5, 575.5, 624.5, 563.5, 639.5, 544.5, 647.5, 527.5, 656.5, 510.5, 658.5, 496.5, 661.5, 488.5, 660.5, 477.5, 655.5, 471.5, 654.5, 470.5, 649.5, 475.5, 643.5, 475.5, 637.5, 474.5, 626.5, 469.5, 603.5, 463.5, 583.5, 455.5, 559.5, 449.5, 542.5, 441.5, 529.5, 437.5, 520.5, 432.5, 513.5, 449.5, 527.5, 465.5, 541.5, 484.5, 554.5, 500.5, 560.5, 510.5, 563.5, 515.5, 569.5, 515.5, 576.5, 512.5, 580.5, 516.5, 583.5, 523.5, 583.5, 530.5, 577.5, 528.5, 572.5, 526.5, 567.5, 526.5, 563.5, 531.5, 561.5, 540.5, 553.5, 552.5, 541.5, 565.5, 522.5, 585.5, 502.5, 590.5, 492.5, 595.5, 483.5, 603.5, 499.5, 605.5, 517.5, 607.5, 529.5, 607.5, 532.5]]}, {&#39;bbox&#39;: [182, 435, 483, 686], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[307.5, 435.5, 330.5, 440.5, 348.5, 444.5, 367.5, 451.5, 382.5, 459.5, 394.5, 468.5, 405.5, 479.5, 417.5, 493.5, 425.5, 505.5, 436.5, 520.5, 451.5, 547.5, 460.5, 576.5, 471.5, 611.5, 476.5, 632.5, 476.5, 641.5, 471.5, 648.5, 473.5, 655.5, 475.5, 660.5, 482.5, 667.5, 483.5, 671.5, 475.5, 675.5, 471.5, 676.5, 468.5, 672.5, 468.5, 669.5, 461.5, 663.5, 445.5, 668.5, 415.5, 677.5, 386.5, 682.5, 356.5, 686.5, 326.5, 685.5, 295.5, 681.5, 259.5, 668.5, 219.5, 638.5, 199.5, 611.5, 187.5, 581.5, 182.5, 551.5, 188.5, 515.5, 193.5, 497.5, 208.5, 479.5, 228.5, 458.5, 250.5, 445.5, 275.5, 437.5, 290.5, 437.5, 307.5, 435.5]]}], &#39;file_name&#39;: &#39;./balloon/train/14666848163_8be8e37562_k.jpg&#39;, &#39;height&#39;: 2048, &#39;width&#39;: 1357}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [599, 0, 845, 299], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[675.5, 274.5, 666.5, 267.5, 656.5, 253.5, 642.5, 230.5, 624.5, 203.5, 609.5, 173.5, 603.5, 151.5, 599.5, 130.5, 599.5, 109.5, 601.5, 87.5, 610.5, 58.5, 619.5, 37.5, 634.5, 17.5, 649.5, 0.5, 792.5, 1.5, 803.5, 9.5, 818.5, 26.5, 835.5, 51.5, 843.5, 83.5, 845.5, 115.5, 843.5, 137.5, 833.5, 170.5, 822.5, 190.5, 807.5, 211.5, 785.5, 233.5, 764.5, 250.5, 747.5, 266.5, 734.5, 274.5, 721.5, 279.5, 711.5, 281.5, 711.5, 285.5, 717.5, 292.5, 711.5, 297.5, 706.5, 299.5, 701.5, 295.5, 700.5, 292.5, 700.5, 289.5, 700.5, 286.5, 699.5, 282.5, 688.5, 279.5, 675.5, 274.5]]}], &#39;file_name&#39;: &#39;./balloon/train/14321263043_b76ef054d3_k.jpg&#39;, &#39;height&#39;: 1356, &#39;width&#39;: 2048}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [19, 145, 1033, 1063], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[358.5, 159.5, 445.5, 145.5, 528.5, 150.5, 599.5, 165.5, 691.5, 197.5, 754.5, 232.5, 836.5, 294.5, 882.5, 345.5, 935.5, 417.5, 987.5, 533.5, 1010.5, 624.5, 1025.5, 712.5, 1033.5, 789.5, 1022.5, 861.5, 1013.5, 905.5, 1018.5, 915.5, 1001.5, 913.5, 981.5, 913.5, 938.5, 939.5, 910.5, 959.5, 883.5, 981.5, 798.5, 1017.5, 718.5, 1045.5, 633.5, 1059.5, 566.5, 1063.5, 466.5, 1057.5, 405.5, 1041.5, 340.5, 1021.5, 275.5, 990.5, 219.5, 952.5, 166.5, 908.5, 121.5, 857.5, 72.5, 780.5, 44.5, 703.5, 24.5, 617.5, 19.5, 533.5, 39.5, 455.5, 66.5, 391.5, 91.5, 344.5, 118.5, 309.5, 155.5, 265.5, 192.5, 233.5, 228.5, 208.5, 259.5, 193.5, 293.5, 178.5, 358.5, 159.5]]}], &#39;file_name&#39;: &#39;./balloon/train/12288446656_2c6a90e6f5_k.jpg&#39;, &#39;height&#39;: 1835, &#39;width&#39;: 2048}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [1081, 497, 1214, 674], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1186.5, 512.5, 1202.5, 527.5, 1213.5, 552.5, 1214.5, 582.5, 1211.5, 604.5, 1198.5, 628.5, 1176.5, 648.5, 1159.5, 660.5, 1148.5, 661.5, 1148.5, 672.5, 1142.5, 674.5, 1139.5, 670.5, 1140.5, 665.5, 1130.5, 660.5, 1118.5, 648.5, 1101.5, 635.5, 1094.5, 626.5, 1098.5, 609.5, 1099.5, 594.5, 1097.5, 575.5, 1092.5, 559.5, 1087.5, 547.5, 1081.5, 538.5, 1089.5, 526.5, 1101.5, 514.5, 1115.5, 505.5, 1134.5, 497.5, 1147.5, 497.5, 1165.5, 500.5, 1178.5, 506.5, 1186.5, 512.5]]}, {&#39;bbox&#39;: [946, 508, 1098, 684], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1026.5, 508.5, 1047.5, 512.5, 1064.5, 523.5, 1077.5, 535.5, 1084.5, 544.5, 1095.5, 566.5, 1098.5, 592.5, 1096.5, 616.5, 1093.5, 629.5, 1086.5, 644.5, 1078.5, 657.5, 1066.5, 672.5, 1057.5, 684.5, 1051.5, 681.5, 1045.5, 682.5, 1041.5, 684.5, 1024.5, 678.5, 1004.5, 671.5, 985.5, 660.5, 964.5, 638.5, 949.5, 615.5, 946.5, 581.5, 951.5, 556.5, 962.5, 535.5, 982.5, 519.5, 1005.5, 509.5, 1026.5, 508.5]]}], &#39;file_name&#39;: &#39;./balloon/train/12288355124_5e340d3de3_k.jpg&#39;, &#39;height&#39;: 1536, &#39;width&#39;: 2048}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [216, 613, 1028, 1359], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[248.5, 847.5, 281.5, 786.5, 323.5, 739.5, 370.5, 697.5, 430.5, 656.5, 490.5, 637.5, 547.5, 618.5, 621.5, 614.5, 689.5, 613.5, 788.5, 646.5, 846.5, 680.5, 912.5, 719.5, 957.5, 759.5, 973.5, 791.5, 979.5, 806.5, 991.5, 809.5, 999.5, 823.5, 988.5, 835.5, 929.5, 849.5, 921.5, 863.5, 930.5, 871.5, 993.5, 864.5, 943.5, 878.5, 922.5, 892.5, 926.5, 913.5, 950.5, 913.5, 968.5, 906.5, 1018.5, 898.5, 985.5, 927.5, 955.5, 945.5, 953.5, 964.5, 960.5, 971.5, 989.5, 956.5, 1015.5, 946.5, 1026.5, 941.5, 1026.5, 962.5, 1016.5, 979.5, 1016.5, 986.5, 1028.5, 998.5, 1027.5, 1045.5, 1015.5, 1092.5, 996.5, 1142.5, 965.5, 1183.5, 917.5, 1239.5, 859.5, 1292.5, 806.5, 1321.5, 738.5, 1349.5, 671.5, 1359.5, 606.5, 1359.5, 539.5, 1354.5, 475.5, 1339.5, 400.5, 1302.5, 336.5, 1256.5, 287.5, 1207.5, 248.5, 1144.5, 216.5, 1044.5, 218.5, 963.5, 234.5, 886.5, 248.5, 847.5]]}], &#39;file_name&#39;: &#39;./balloon/train/12288043903_fe1ea17a4e_k.jpg&#39;, &#39;height&#39;: 1594, &#39;width&#39;: 2048}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [1347, 1, 1933, 644], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1837.5, 15.5, 1874.5, 53.5, 1896.5, 96.5, 1922.5, 172.5, 1926.5, 205.5, 1933.5, 246.5, 1927.5, 305.5, 1898.5, 383.5, 1882.5, 412.5, 1835.5, 470.5, 1808.5, 493.5, 1772.5, 520.5, 1722.5, 544.5, 1687.5, 565.5, 1649.5, 577.5, 1602.5, 593.5, 1558.5, 602.5, 1530.5, 607.5, 1510.5, 609.5, 1485.5, 607.5, 1480.5, 607.5, 1480.5, 613.5, 1477.5, 616.5, 1480.5, 621.5, 1492.5, 625.5, 1493.5, 631.5, 1493.5, 635.5, 1484.5, 640.5, 1476.5, 644.5, 1470.5, 642.5, 1466.5, 640.5, 1462.5, 637.5, 1461.5, 634.5, 1466.5, 631.5, 1466.5, 627.5, 1464.5, 622.5, 1469.5, 616.5, 1464.5, 612.5, 1468.5, 605.5, 1468.5, 599.5, 1456.5, 591.5, 1441.5, 578.5, 1423.5, 557.5, 1402.5, 527.5, 1383.5, 479.5, 1360.5, 405.5, 1353.5, 362.5, 1347.5, 304.5, 1353.5, 265.5, 1360.5, 217.5, 1370.5, 170.5, 1386.5, 115.5, 1412.5, 75.5, 1443.5, 37.5, 1467.5, 12.5, 1476.5, 3.5, 1817.5, 1.5, 1837.5, 15.5]]}, {&#39;bbox&#39;: [1397, 557, 1994, 1156], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1989.5, 772.5, 1992.5, 806.5, 1994.5, 839.5, 1992.5, 879.5, 1978.5, 934.5, 1959.5, 974.5, 1916.5, 1027.5, 1867.5, 1074.5, 1811.5, 1108.5, 1770.5, 1125.5, 1719.5, 1141.5, 1696.5, 1146.5, 1644.5, 1148.5, 1594.5, 1149.5, 1543.5, 1145.5, 1509.5, 1147.5, 1464.5, 1142.5, 1451.5, 1139.5, 1435.5, 1135.5, 1433.5, 1140.5, 1425.5, 1144.5, 1424.5, 1153.5, 1409.5, 1156.5, 1402.5, 1152.5, 1398.5, 1143.5, 1397.5, 1131.5, 1400.5, 1122.5, 1411.5, 1119.5, 1419.5, 1117.5, 1418.5, 1107.5, 1414.5, 1091.5, 1411.5, 1079.5, 1408.5, 1055.5, 1408.5, 1038.5, 1407.5, 1013.5, 1403.5, 970.5, 1405.5, 903.5, 1415.5, 841.5, 1431.5, 782.5, 1460.5, 725.5, 1500.5, 666.5, 1541.5, 625.5, 1564.5, 606.5, 1582.5, 597.5, 1619.5, 586.5, 1659.5, 574.5, 1688.5, 566.5, 1704.5, 558.5, 1727.5, 557.5, 1772.5, 564.5, 1809.5, 576.5, 1851.5, 594.5, 1890.5, 619.5, 1919.5, 638.5, 1932.5, 658.5, 1961.5, 694.5, 1974.5, 723.5, 1983.5, 752.5, 1989.5, 772.5]]}], &#39;file_name&#39;: &#39;./balloon/train/12037308314_e16fb3a0f7_k.jpg&#39;, &#39;height&#39;: 1625, &#39;width&#39;: 2048}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [964, 610, 1787, 1630], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1757.5, 867.5, 1772.5, 913.5, 1787.5, 986.5, 1780.5, 1104.5, 1764.5, 1170.5, 1739.5, 1230.5, 1708.5, 1283.5, 1655.5, 1357.5, 1615.5, 1394.5, 1556.5, 1443.5, 1506.5, 1471.5, 1437.5, 1506.5, 1381.5, 1524.5, 1327.5, 1530.5, 1293.5, 1529.5, 1252.5, 1524.5, 1220.5, 1518.5, 1217.5, 1540.5, 1202.5, 1549.5, 1207.5, 1556.5, 1217.5, 1563.5, 1217.5, 1569.5, 1227.5, 1581.5, 1217.5, 1604.5, 1221.5, 1615.5, 1222.5, 1621.5, 1207.5, 1628.5, 1197.5, 1630.5, 1177.5, 1624.5, 1172.5, 1621.5, 1172.5, 1616.5, 1179.5, 1609.5, 1179.5, 1601.5, 1175.5, 1593.5, 1171.5, 1582.5, 1172.5, 1573.5, 1174.5, 1570.5, 1174.5, 1545.5, 1185.5, 1540.5, 1181.5, 1524.5, 1174.5, 1518.5, 1172.5, 1511.5, 1172.5, 1505.5, 1175.5, 1501.5, 1152.5, 1489.5, 1125.5, 1468.5, 1082.5, 1429.5, 1035.5, 1366.5, 1006.5, 1304.5, 983.5, 1232.5, 968.5, 1161.5, 964.5, 1067.5, 971.5, 984.5, 991.5, 917.5, 1022.5, 836.5, 1072.5, 765.5, 1118.5, 716.5, 1192.5, 664.5, 1232.5, 644.5, 1270.5, 629.5, 1333.5, 614.5, 1392.5, 610.5, 1453.5, 615.5, 1511.5, 628.5, 1554.5, 647.5, 1622.5, 683.5, 1664.5, 720.5, 1694.5, 750.5, 1719.5, 790.5, 1741.5, 830.5, 1757.5, 867.5]]}, {&#39;bbox&#39;: [1167, 102, 1875, 777], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1183.5, 414.5, 1189.5, 389.5, 1222.5, 308.5, 1267.5, 238.5, 1302.5, 198.5, 1342.5, 163.5, 1396.5, 134.5, 1447.5, 115.5, 1493.5, 106.5, 1555.5, 102.5, 1605.5, 107.5, 1660.5, 121.5, 1714.5, 146.5, 1756.5, 174.5, 1791.5, 217.5, 1822.5, 259.5, 1851.5, 319.5, 1875.5, 411.5, 1871.5, 484.5, 1865.5, 555.5, 1845.5, 614.5, 1816.5, 665.5, 1769.5, 730.5, 1747.5, 754.5, 1714.5, 777.5, 1684.5, 737.5, 1651.5, 706.5, 1619.5, 680.5, 1574.5, 655.5, 1514.5, 628.5, 1444.5, 612.5, 1377.5, 609.5, 1321.5, 614.5, 1276.5, 625.5, 1228.5, 642.5, 1192.5, 661.5, 1183.5, 625.5, 1173.5, 562.5, 1167.5, 507.5, 1176.5, 456.5, 1181.5, 434.5, 1183.5, 414.5]]}, {&#39;bbox&#39;: [479, 314, 1193, 1167], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[901.5, 321.5, 945.5, 334.5, 985.5, 355.5, 1021.5, 374.5, 1053.5, 401.5, 1092.5, 437.5, 1115.5, 465.5, 1140.5, 504.5, 1160.5, 545.5, 1174.5, 578.5, 1181.5, 610.5, 1191.5, 660.5, 1193.5, 665.5, 1165.5, 680.5, 1125.5, 711.5, 1085.5, 751.5, 1047.5, 799.5, 1013.5, 856.5, 995.5, 908.5, 978.5, 955.5, 967.5, 1017.5, 965.5, 1070.5, 965.5, 1097.5, 966.5, 1145.5, 966.5, 1167.5, 956.5, 1142.5, 941.5, 1100.5, 902.5, 1036.5, 866.5, 990.5, 836.5, 958.5, 801.5, 930.5, 752.5, 899.5, 707.5, 878.5, 662.5, 861.5, 618.5, 852.5, 562.5, 848.5, 514.5, 851.5, 499.5, 815.5, 479.5, 721.5, 479.5, 656.5, 494.5, 576.5, 519.5, 510.5, 561.5, 446.5, 616.5, 392.5, 665.5, 361.5, 721.5, 333.5, 783.5, 318.5, 859.5, 314.5, 901.5, 321.5]]}, {&#39;bbox&#39;: [150, 850, 986, 1920], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[169.5, 1176.5, 183.5, 1135.5, 198.5, 1093.5, 216.5, 1062.5, 236.5, 1032.5, 257.5, 1004.5, 279.5, 979.5, 313.5, 942.5, 357.5, 917.5, 389.5, 897.5, 413.5, 886.5, 449.5, 873.5, 487.5, 863.5, 516.5, 854.5, 571.5, 850.5, 625.5, 853.5, 680.5, 866.5, 726.5, 887.5, 771.5, 911.5, 818.5, 946.5, 848.5, 970.5, 880.5, 1008.5, 906.5, 1043.5, 931.5, 1087.5, 953.5, 1134.5, 968.5, 1178.5, 984.5, 1247.5, 986.5, 1334.5, 980.5, 1410.5, 961.5, 1477.5, 931.5, 1558.5, 898.5, 1624.5, 851.5, 1693.5, 819.5, 1729.5, 784.5, 1764.5, 749.5, 1793.5, 681.5, 1830.5, 658.5, 1841.5, 641.5, 1851.5, 642.5, 1870.5, 647.5, 1881.5, 652.5, 1895.5, 642.5, 1912.5, 628.5, 1920.5, 620.5, 1919.5, 619.5, 1915.5, 608.5, 1909.5, 597.5, 1906.5, 595.5, 1897.5, 595.5, 1880.5, 606.5, 1874.5, 613.5, 1867.5, 614.5, 1861.5, 615.5, 1857.5, 610.5, 1850.5, 589.5, 1850.5, 561.5, 1848.5, 535.5, 1845.5, 510.5, 1835.5, 486.5, 1827.5, 469.5, 1820.5, 430.5, 1797.5, 397.5, 1769.5, 354.5, 1739.5, 319.5, 1703.5, 285.5, 1666.5, 253.5, 1624.5, 216.5, 1561.5, 181.5, 1487.5, 164.5, 1422.5, 150.5, 1340.5, 152.5, 1276.5, 156.5, 1222.5, 169.5, 1176.5]]}, {&#39;bbox&#39;: [756, 1239, 1185, 1857], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1043.5, 1754.5, 996.5, 1786.5, 956.5, 1806.5, 918.5, 1815.5, 891.5, 1820.5, 873.5, 1821.5, 878.5, 1835.5, 885.5, 1849.5, 880.5, 1855.5, 871.5, 1857.5, 844.5, 1857.5, 836.5, 1853.5, 830.5, 1845.5, 828.5, 1835.5, 838.5, 1828.5, 844.5, 1825.5, 846.5, 1822.5, 836.5, 1820.5, 803.5, 1810.5, 779.5, 1801.5, 756.5, 1791.5, 789.5, 1760.5, 823.5, 1720.5, 868.5, 1669.5, 898.5, 1614.5, 936.5, 1542.5, 951.5, 1505.5, 965.5, 1464.5, 976.5, 1417.5, 984.5, 1336.5, 986.5, 1290.5, 985.5, 1258.5, 982.5, 1239.5, 998.5, 1277.5, 1013.5, 1323.5, 1039.5, 1373.5, 1064.5, 1411.5, 1092.5, 1441.5, 1125.5, 1468.5, 1152.5, 1491.5, 1172.5, 1499.5, 1172.5, 1509.5, 1176.5, 1516.5, 1181.5, 1528.5, 1185.5, 1533.5, 1182.5, 1539.5, 1174.5, 1547.5, 1175.5, 1558.5, 1173.5, 1568.5, 1167.5, 1577.5, 1167.5, 1586.5, 1169.5, 1597.5, 1149.5, 1638.5, 1125.5, 1675.5, 1094.5, 1708.5, 1062.5, 1742.5, 1043.5, 1754.5]]}], &#39;file_name&#39;: &#39;./balloon/train/10464445726_6f1e3bbe6a_k.jpg&#39;, &#39;height&#39;: 2019, &#39;width&#39;: 2048}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [1253, 2, 1652, 350], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1586.5, 183.5, 1533.5, 241.5, 1502.5, 272.5, 1476.5, 304.5, 1452.5, 325.5, 1427.5, 330.5, 1432.5, 342.5, 1424.5, 345.5, 1424.5, 350.5, 1418.5, 350.5, 1414.5, 341.5, 1413.5, 328.5, 1398.5, 322.5, 1383.5, 307.5, 1362.5, 271.5, 1341.5, 234.5, 1315.5, 200.5, 1293.5, 168.5, 1276.5, 133.5, 1263.5, 90.5, 1253.5, 48.5, 1255.5, 13.5, 1257.5, 2.5, 1650.5, 3.5, 1652.5, 26.5, 1647.5, 52.5, 1642.5, 76.5, 1629.5, 114.5, 1608.5, 150.5, 1586.5, 183.5]]}, {&#39;bbox&#39;: [1036, 302, 1254, 655], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1109.5, 311.5, 1133.5, 302.5, 1160.5, 302.5, 1185.5, 308.5, 1214.5, 325.5, 1233.5, 345.5, 1244.5, 370.5, 1254.5, 407.5, 1249.5, 449.5, 1241.5, 475.5, 1217.5, 512.5, 1201.5, 537.5, 1186.5, 565.5, 1178.5, 584.5, 1179.5, 595.5, 1100.5, 655.5, 1089.5, 637.5, 1084.5, 616.5, 1083.5, 574.5, 1074.5, 541.5, 1057.5, 506.5, 1045.5, 469.5, 1036.5, 436.5, 1042.5, 394.5, 1053.5, 363.5, 1071.5, 336.5, 1098.5, 315.5, 1109.5, 311.5]]}, {&#39;bbox&#39;: [1, 1, 302, 547], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[295.5, 268.5, 287.5, 298.5, 275.5, 330.5, 262.5, 352.5, 244.5, 378.5, 213.5, 415.5, 184.5, 444.5, 168.5, 461.5, 158.5, 481.5, 141.5, 504.5, 118.5, 519.5, 103.5, 526.5, 112.5, 540.5, 101.5, 547.5, 85.5, 546.5, 82.5, 536.5, 86.5, 527.5, 67.5, 524.5, 44.5, 513.5, 26.5, 496.5, 12.5, 473.5, 2.5, 463.5, 1.5, 1.5, 205.5, 2.5, 229.5, 14.5, 252.5, 46.5, 269.5, 74.5, 291.5, 122.5, 301.5, 182.5, 302.5, 230.5, 295.5, 268.5]]}], &#39;file_name&#39;: &#39;./balloon/train/9330497995_4cf0438cb6_k.jpg&#39;, &#39;height&#39;: 1421, &#39;width&#39;: 2048}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [983, 533, 1209, 800], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1122.5, 535.5, 1140.5, 541.5, 1163.5, 554.5, 1180.5, 571.5, 1196.5, 592.5, 1203.5, 614.5, 1209.5, 639.5, 1206.5, 672.5, 1200.5, 699.5, 1188.5, 721.5, 1170.5, 747.5, 1148.5, 764.5, 1122.5, 779.5, 1113.5, 780.5, 1113.5, 786.5, 1117.5, 790.5, 1116.5, 795.5, 1108.5, 800.5, 1100.5, 800.5, 1099.5, 796.5, 1099.5, 792.5, 1101.5, 789.5, 1100.5, 781.5, 1091.5, 781.5, 1075.5, 778.5, 1051.5, 767.5, 1034.5, 754.5, 1014.5, 735.5, 998.5, 707.5, 985.5, 673.5, 983.5, 637.5, 989.5, 612.5, 998.5, 588.5, 1012.5, 567.5, 1028.5, 554.5, 1048.5, 543.5, 1075.5, 534.5, 1102.5, 533.5, 1122.5, 535.5]]}], &#39;file_name&#39;: &#39;./balloon/train/9210739293_2b0e0d991e_k.jpg&#39;, &#39;height&#39;: 2048, &#39;width&#39;: 1365}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [1823, 96, 2047, 673], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1847.5, 298.5, 1860.5, 267.5, 1887.5, 221.5, 1923.5, 175.5, 1957.5, 147.5, 1984.5, 126.5, 2014.5, 109.5, 2037.5, 96.5, 2046.5, 96.5, 2047.5, 673.5, 2025.5, 667.5, 1975.5, 650.5, 1938.5, 630.5, 1907.5, 603.5, 1904.5, 601.5, 1891.5, 607.5, 1881.5, 607.5, 1874.5, 604.5, 1870.5, 599.5, 1870.5, 591.5, 1874.5, 570.5, 1851.5, 530.5, 1834.5, 485.5, 1823.5, 423.5, 1828.5, 371.5, 1837.5, 321.5, 1847.5, 298.5]]}, {&#39;bbox&#39;: [1534, 617, 2047, 1014], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1714.5, 636.5, 1748.5, 628.5, 1788.5, 622.5, 1835.5, 617.5, 1882.5, 623.5, 1920.5, 631.5, 1958.5, 648.5, 1997.5, 667.5, 2029.5, 691.5, 2046.5, 708.5, 2047.5, 902.5, 2001.5, 880.5, 1935.5, 859.5, 1875.5, 856.5, 1840.5, 855.5, 1778.5, 868.5, 1745.5, 876.5, 1699.5, 896.5, 1658.5, 920.5, 1624.5, 951.5, 1597.5, 983.5, 1576.5, 1014.5, 1563.5, 997.5, 1549.5, 961.5, 1541.5, 932.5, 1534.5, 875.5, 1540.5, 821.5, 1554.5, 772.5, 1568.5, 746.5, 1590.5, 720.5, 1629.5, 679.5, 1666.5, 657.5, 1714.5, 636.5]]}, {&#39;bbox&#39;: [1535, 855, 2047, 1364], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1611.5, 1274.5, 1588.5, 1235.5, 1572.5, 1191.5, 1565.5, 1151.5, 1563.5, 1115.5, 1563.5, 1076.5, 1550.5, 1070.5, 1538.5, 1063.5, 1535.5, 1053.5, 1536.5, 1039.5, 1542.5, 1029.5, 1559.5, 1026.5, 1570.5, 1030.5, 1577.5, 1010.5, 1607.5, 969.5, 1644.5, 933.5, 1692.5, 901.5, 1740.5, 879.5, 1765.5, 870.5, 1803.5, 862.5, 1833.5, 855.5, 1889.5, 857.5, 1924.5, 859.5, 1960.5, 864.5, 1984.5, 874.5, 2011.5, 884.5, 2038.5, 899.5, 2047.5, 905.5, 2047.5, 1363.5, 1694.5, 1364.5, 1659.5, 1333.5, 1624.5, 1294.5, 1611.5, 1274.5]]}, {&#39;bbox&#39;: [1261, 103, 1752, 699], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1668.5, 178.5, 1689.5, 206.5, 1708.5, 232.5, 1726.5, 265.5, 1739.5, 294.5, 1748.5, 337.5, 1752.5, 402.5, 1745.5, 453.5, 1731.5, 502.5, 1708.5, 544.5, 1683.5, 580.5, 1659.5, 608.5, 1617.5, 639.5, 1581.5, 662.5, 1532.5, 682.5, 1495.5, 688.5, 1490.5, 694.5, 1483.5, 699.5, 1475.5, 693.5, 1462.5, 689.5, 1446.5, 686.5, 1410.5, 677.5, 1390.5, 671.5, 1363.5, 656.5, 1356.5, 652.5, 1369.5, 619.5, 1384.5, 562.5, 1390.5, 488.5, 1388.5, 434.5, 1362.5, 356.5, 1338.5, 311.5, 1304.5, 260.5, 1274.5, 227.5, 1261.5, 212.5, 1291.5, 178.5, 1329.5, 149.5, 1373.5, 124.5, 1422.5, 108.5, 1474.5, 103.5, 1522.5, 105.5, 1572.5, 116.5, 1627.5, 143.5, 1652.5, 163.5, 1668.5, 178.5]]}, {&#39;bbox&#39;: [787, 142, 1388, 722], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1081.5, 142.5, 1126.5, 145.5, 1168.5, 160.5, 1228.5, 187.5, 1259.5, 206.5, 1292.5, 248.5, 1331.5, 301.5, 1366.5, 365.5, 1384.5, 420.5, 1388.5, 464.5, 1386.5, 533.5, 1381.5, 571.5, 1371.5, 606.5, 1357.5, 650.5, 1337.5, 681.5, 1313.5, 706.5, 1291.5, 722.5, 1283.5, 679.5, 1262.5, 650.5, 1259.5, 623.5, 1258.5, 587.5, 1248.5, 558.5, 1236.5, 526.5, 1216.5, 481.5, 1192.5, 429.5, 1163.5, 400.5, 1131.5, 370.5, 1111.5, 354.5, 1101.5, 336.5, 1074.5, 320.5, 1039.5, 309.5, 1004.5, 304.5, 963.5, 305.5, 930.5, 315.5, 888.5, 327.5, 858.5, 345.5, 845.5, 363.5, 823.5, 373.5, 806.5, 397.5, 796.5, 414.5, 787.5, 431.5, 792.5, 388.5, 809.5, 334.5, 825.5, 297.5, 850.5, 261.5, 881.5, 229.5, 915.5, 203.5, 944.5, 181.5, 993.5, 158.5, 1030.5, 149.5, 1081.5, 142.5]]}], &#39;file_name&#39;: &#39;./balloon/train/8758393087_76fcd56bd3_k.jpg&#39;, &#39;height&#39;: 1365, &#39;width&#39;: 2048}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [941, 174, 1167, 414], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1087.5, 178.5, 1123.5, 198.5, 1142.5, 216.5, 1163.5, 258.5, 1167.5, 285.5, 1163.5, 321.5, 1150.5, 349.5, 1132.5, 377.5, 1104.5, 396.5, 1079.5, 408.5, 1046.5, 414.5, 1011.5, 409.5, 982.5, 391.5, 959.5, 365.5, 945.5, 335.5, 941.5, 303.5, 945.5, 268.5, 956.5, 239.5, 972.5, 215.5, 999.5, 194.5, 1025.5, 180.5, 1058.5, 174.5, 1087.5, 178.5]]}, {&#39;bbox&#39;: [999, 376, 1198, 584], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1190.5, 433.5, 1196.5, 451.5, 1198.5, 479.5, 1194.5, 503.5, 1183.5, 531.5, 1166.5, 554.5, 1142.5, 570.5, 1116.5, 582.5, 1088.5, 584.5, 1066.5, 579.5, 1037.5, 565.5, 1021.5, 547.5, 1007.5, 524.5, 1000.5, 506.5, 1000.5, 486.5, 999.5, 454.5, 1005.5, 431.5, 1017.5, 410.5, 1048.5, 413.5, 1073.5, 409.5, 1095.5, 400.5, 1115.5, 390.5, 1133.5, 376.5, 1148.5, 383.5, 1162.5, 395.5, 1178.5, 410.5, 1190.5, 433.5]]}, {&#39;bbox&#39;: [780, 392, 987, 633], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[876.5, 392.5, 894.5, 392.5, 915.5, 397.5, 932.5, 405.5, 957.5, 423.5, 973.5, 445.5, 980.5, 464.5, 986.5, 497.5, 987.5, 520.5, 980.5, 542.5, 969.5, 563.5, 952.5, 588.5, 930.5, 608.5, 906.5, 620.5, 890.5, 621.5, 885.5, 625.5, 879.5, 633.5, 874.5, 630.5, 869.5, 624.5, 861.5, 617.5, 837.5, 609.5, 814.5, 591.5, 801.5, 574.5, 789.5, 552.5, 780.5, 529.5, 780.5, 499.5, 782.5, 478.5, 790.5, 458.5, 799.5, 438.5, 813.5, 421.5, 831.5, 407.5, 850.5, 396.5, 876.5, 392.5]]}, {&#39;bbox&#39;: [785, 375, 1001, 587], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[903.5, 375.5, 925.5, 378.5, 946.5, 390.5, 962.5, 400.5, 976.5, 418.5, 990.5, 436.5, 998.5, 450.5, 1001.5, 480.5, 999.5, 506.5, 991.5, 531.5, 979.5, 555.5, 967.5, 571.5, 953.5, 587.5, 973.5, 558.5, 987.5, 523.5, 988.5, 496.5, 982.5, 471.5, 972.5, 444.5, 956.5, 422.5, 936.5, 405.5, 908.5, 395.5, 886.5, 392.5, 861.5, 392.5, 840.5, 401.5, 822.5, 414.5, 806.5, 429.5, 797.5, 445.5, 787.5, 468.5, 785.5, 465.5, 794.5, 440.5, 802.5, 422.5, 821.5, 401.5, 836.5, 391.5, 852.5, 383.5, 875.5, 375.5, 903.5, 375.5]]}, {&#39;bbox&#39;: [577, 449, 785, 667], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[737.5, 468.5, 756.5, 481.5, 769.5, 498.5, 779.5, 521.5, 784.5, 550.5, 785.5, 575.5, 776.5, 602.5, 762.5, 626.5, 742.5, 646.5, 727.5, 656.5, 709.5, 663.5, 687.5, 667.5, 667.5, 667.5, 644.5, 661.5, 632.5, 652.5, 607.5, 633.5, 596.5, 621.5, 588.5, 601.5, 581.5, 583.5, 577.5, 564.5, 581.5, 545.5, 586.5, 516.5, 592.5, 503.5, 600.5, 491.5, 612.5, 479.5, 628.5, 465.5, 643.5, 458.5, 666.5, 452.5, 693.5, 449.5, 716.5, 456.5, 737.5, 468.5]]}, {&#39;bbox&#39;: [1052, 592, 1263, 815], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1205.5, 602.5, 1227.5, 621.5, 1242.5, 637.5, 1260.5, 672.5, 1263.5, 697.5, 1259.5, 722.5, 1253.5, 742.5, 1241.5, 767.5, 1226.5, 784.5, 1210.5, 796.5, 1185.5, 810.5, 1157.5, 815.5, 1123.5, 811.5, 1098.5, 798.5, 1079.5, 782.5, 1064.5, 760.5, 1054.5, 734.5, 1052.5, 698.5, 1058.5, 664.5, 1069.5, 644.5, 1086.5, 624.5, 1106.5, 609.5, 1133.5, 594.5, 1161.5, 592.5, 1191.5, 597.5, 1205.5, 602.5]]}, {&#39;bbox&#39;: [808, 651, 1009, 872], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[974.5, 671.5, 985.5, 681.5, 994.5, 695.5, 1003.5, 714.5, 1008.5, 733.5, 1009.5, 756.5, 1007.5, 778.5, 998.5, 802.5, 985.5, 822.5, 972.5, 838.5, 953.5, 853.5, 936.5, 863.5, 918.5, 870.5, 890.5, 869.5, 877.5, 866.5, 874.5, 872.5, 865.5, 869.5, 863.5, 861.5, 841.5, 845.5, 821.5, 818.5, 813.5, 785.5, 808.5, 758.5, 814.5, 728.5, 824.5, 702.5, 843.5, 679.5, 861.5, 664.5, 879.5, 656.5, 902.5, 652.5, 924.5, 651.5, 941.5, 655.5, 962.5, 662.5, 974.5, 671.5]]}], &#39;file_name&#39;: &#39;./balloon/train/8436015314_3a678c1005_k.jpg&#39;, &#39;height&#39;: 1365, &#39;width&#39;: 2048}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [202, 861, 407, 1146], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[231.5, 1061.5, 217.5, 1036.5, 202.5, 993.5, 202.5, 962.5, 210.5, 928.5, 227.5, 900.5, 250.5, 883.5, 270.5, 872.5, 296.5, 864.5, 328.5, 861.5, 360.5, 869.5, 380.5, 881.5, 396.5, 895.5, 388.5, 909.5, 379.5, 936.5, 375.5, 969.5, 383.5, 1010.5, 392.5, 1035.5, 407.5, 1063.5, 392.5, 1086.5, 381.5, 1099.5, 364.5, 1113.5, 342.5, 1122.5, 341.5, 1131.5, 347.5, 1136.5, 346.5, 1144.5, 340.5, 1146.5, 331.5, 1140.5, 330.5, 1134.5, 334.5, 1131.5, 337.5, 1123.5, 319.5, 1123.5, 300.5, 1119.5, 279.5, 1105.5, 260.5, 1091.5, 243.5, 1077.5, 231.5, 1061.5]]}, {&#39;bbox&#39;: [376, 846, 603, 1138], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[421.5, 869.5, 435.5, 860.5, 458.5, 850.5, 473.5, 846.5, 505.5, 846.5, 534.5, 852.5, 552.5, 863.5, 566.5, 872.5, 574.5, 894.5, 586.5, 922.5, 600.5, 944.5, 603.5, 947.5, 603.5, 961.5, 599.5, 988.5, 591.5, 1017.5, 582.5, 1039.5, 568.5, 1057.5, 555.5, 1074.5, 532.5, 1095.5, 510.5, 1112.5, 491.5, 1116.5, 484.5, 1116.5, 484.5, 1121.5, 485.5, 1128.5, 490.5, 1135.5, 487.5, 1138.5, 477.5, 1135.5, 472.5, 1135.5, 469.5, 1131.5, 477.5, 1123.5, 476.5, 1117.5, 455.5, 1111.5, 435.5, 1098.5, 418.5, 1080.5, 405.5, 1061.5, 393.5, 1038.5, 384.5, 1014.5, 376.5, 981.5, 378.5, 943.5, 384.5, 917.5, 397.5, 891.5, 407.5, 879.5, 421.5, 869.5]]}, {&#39;bbox&#39;: [438, 947, 636, 1186], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[610.5, 1100.5, 594.5, 1118.5, 570.5, 1144.5, 550.5, 1158.5, 538.5, 1165.5, 519.5, 1167.5, 526.5, 1170.5, 532.5, 1172.5, 532.5, 1176.5, 525.5, 1183.5, 518.5, 1186.5, 515.5, 1181.5, 513.5, 1174.5, 513.5, 1167.5, 496.5, 1164.5, 472.5, 1148.5, 458.5, 1130.5, 443.5, 1112.5, 438.5, 1100.5, 456.5, 1112.5, 477.5, 1116.5, 477.5, 1122.5, 470.5, 1129.5, 470.5, 1133.5, 472.5, 1135.5, 480.5, 1135.5, 487.5, 1139.5, 490.5, 1135.5, 486.5, 1129.5, 484.5, 1117.5, 500.5, 1115.5, 517.5, 1108.5, 536.5, 1093.5, 551.5, 1079.5, 563.5, 1062.5, 575.5, 1048.5, 591.5, 1022.5, 595.5, 1004.5, 600.5, 982.5, 602.5, 971.5, 604.5, 947.5, 616.5, 964.5, 624.5, 980.5, 633.5, 991.5, 636.5, 1015.5, 634.5, 1045.5, 626.5, 1068.5, 618.5, 1085.5, 610.5, 1100.5]]}, {&#39;bbox&#39;: [533, 342, 1224, 1209], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[570.5, 537.5, 613.5, 466.5, 669.5, 413.5, 722.5, 376.5, 775.5, 356.5, 869.5, 342.5, 962.5, 351.5, 1044.5, 383.5, 1125.5, 446.5, 1174.5, 514.5, 1205.5, 576.5, 1219.5, 650.5, 1224.5, 713.5, 1221.5, 772.5, 1203.5, 850.5, 1185.5, 903.5, 1171.5, 936.5, 1149.5, 976.5, 1132.5, 1008.5, 1104.5, 1015.5, 1062.5, 1027.5, 1009.5, 1052.5, 960.5, 1085.5, 934.5, 1107.5, 902.5, 1138.5, 879.5, 1166.5, 852.5, 1201.5, 850.5, 1209.5, 832.5, 1202.5, 797.5, 1178.5, 759.5, 1141.5, 725.5, 1105.5, 693.5, 1067.5, 668.5, 1034.5, 644.5, 1006.5, 624.5, 973.5, 588.5, 919.5, 562.5, 855.5, 549.5, 816.5, 539.5, 776.5, 533.5, 725.5, 534.5, 668.5, 542.5, 608.5, 560.5, 558.5, 570.5, 537.5]]}, {&#39;bbox&#39;: [808, 1007, 1566, 1427], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[815.5, 1325.5, 832.5, 1255.5, 850.5, 1207.5, 880.5, 1166.5, 917.5, 1123.5, 954.5, 1089.5, 1018.5, 1047.5, 1080.5, 1022.5, 1134.5, 1007.5, 1205.5, 1007.5, 1300.5, 1026.5, 1354.5, 1047.5, 1413.5, 1088.5, 1456.5, 1128.5, 1494.5, 1178.5, 1525.5, 1225.5, 1549.5, 1297.5, 1562.5, 1338.5, 1566.5, 1383.5, 1564.5, 1427.5, 808.5, 1427.5, 808.5, 1372.5, 815.5, 1325.5]]}], &#39;file_name&#39;: &#39;./balloon/train/7488015492_0583857ca0_k.jpg&#39;, &#39;height&#39;: 1429, &#39;width&#39;: 2048}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [1090, 761, 1463, 1065], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1375.5, 819.5, 1401.5, 848.5, 1424.5, 884.5, 1439.5, 924.5, 1454.5, 960.5, 1452.5, 980.5, 1459.5, 984.5, 1463.5, 998.5, 1449.5, 1009.5, 1440.5, 1009.5, 1420.5, 1025.5, 1388.5, 1046.5, 1347.5, 1060.5, 1318.5, 1062.5, 1263.5, 1065.5, 1222.5, 1057.5, 1185.5, 1040.5, 1147.5, 1014.5, 1116.5, 981.5, 1099.5, 943.5, 1090.5, 911.5, 1090.5, 862.5, 1105.5, 831.5, 1126.5, 803.5, 1156.5, 778.5, 1201.5, 763.5, 1248.5, 761.5, 1290.5, 767.5, 1326.5, 781.5, 1360.5, 803.5, 1375.5, 819.5]]}], &#39;file_name&#39;: &#39;./balloon/train/7308740338_591f27b631_k.jpg&#39;, &#39;height&#39;: 1536, &#39;width&#39;: 2048}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [664, 243, 1403, 990], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1260.5, 318.5, 1301.5, 354.5, 1336.5, 403.5, 1361.5, 441.5, 1384.5, 510.5, 1401.5, 565.5, 1403.5, 615.5, 1389.5, 701.5, 1364.5, 778.5, 1333.5, 831.5, 1287.5, 882.5, 1232.5, 928.5, 1188.5, 953.5, 1124.5, 976.5, 1048.5, 990.5, 971.5, 985.5, 873.5, 959.5, 796.5, 909.5, 716.5, 820.5, 685.5, 746.5, 664.5, 669.5, 665.5, 566.5, 686.5, 495.5, 725.5, 412.5, 770.5, 358.5, 821.5, 315.5, 886.5, 278.5, 946.5, 256.5, 1020.5, 243.5, 1092.5, 245.5, 1150.5, 260.5, 1201.5, 279.5, 1260.5, 318.5]]}, {&#39;bbox&#39;: [1287, 414, 1688, 927], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1467.5, 423.5, 1509.5, 440.5, 1554.5, 460.5, 1592.5, 487.5, 1633.5, 523.5, 1656.5, 561.5, 1674.5, 599.5, 1688.5, 661.5, 1683.5, 727.5, 1667.5, 772.5, 1648.5, 817.5, 1608.5, 865.5, 1572.5, 892.5, 1514.5, 916.5, 1454.5, 927.5, 1399.5, 925.5, 1347.5, 915.5, 1292.5, 891.5, 1287.5, 887.5, 1287.5, 886.5, 1325.5, 840.5, 1365.5, 776.5, 1390.5, 693.5, 1405.5, 615.5, 1397.5, 550.5, 1379.5, 488.5, 1363.5, 449.5, 1346.5, 416.5, 1387.5, 414.5, 1428.5, 415.5, 1467.5, 423.5]]}, {&#39;bbox&#39;: [584, 408, 727, 831], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[644.5, 467.5, 670.5, 443.5, 703.5, 418.5, 727.5, 408.5, 705.5, 453.5, 689.5, 486.5, 677.5, 527.5, 665.5, 575.5, 663.5, 633.5, 666.5, 678.5, 677.5, 722.5, 689.5, 755.5, 707.5, 800.5, 725.5, 831.5, 710.5, 828.5, 681.5, 808.5, 636.5, 764.5, 601.5, 712.5, 585.5, 653.5, 584.5, 594.5, 597.5, 546.5, 617.5, 502.5, 644.5, 467.5]]}], &#39;file_name&#39;: &#39;./balloon/train/7178882742_f090f3ce56_k.jpg&#39;, &#39;height&#39;: 1360, &#39;width&#39;: 2048}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [355, 303, 580, 527], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[573.5, 366.5, 577.5, 382.5, 580.5, 394.5, 580.5, 421.5, 575.5, 447.5, 566.5, 467.5, 549.5, 487.5, 528.5, 506.5, 509.5, 516.5, 482.5, 524.5, 453.5, 527.5, 430.5, 521.5, 406.5, 510.5, 404.5, 509.5, 408.5, 502.5, 401.5, 498.5, 394.5, 491.5, 387.5, 486.5, 379.5, 486.5, 366.5, 462.5, 356.5, 435.5, 355.5, 407.5, 364.5, 382.5, 372.5, 361.5, 384.5, 346.5, 399.5, 330.5, 418.5, 316.5, 440.5, 308.5, 458.5, 304.5, 488.5, 303.5, 509.5, 308.5, 527.5, 314.5, 542.5, 323.5, 553.5, 334.5, 558.5, 329.5, 557.5, 325.5, 570.5, 328.5, 564.5, 334.5, 558.5, 338.5, 564.5, 348.5, 573.5, 366.5]]}], &#39;file_name&#39;: &#39;./balloon/train/6483318883_21facf57cd_b.jpg&#39;, &#39;height&#39;: 683, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [233, 29, 328, 124], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[253.5, 38.5, 263.5, 32.5, 277.5, 29.5, 292.5, 31.5, 303.5, 35.5, 316.5, 47.5, 324.5, 60.5, 328.5, 77.5, 326.5, 95.5, 321.5, 105.5, 312.5, 117.5, 294.5, 123.5, 275.5, 124.5, 254.5, 115.5, 243.5, 102.5, 235.5, 87.5, 233.5, 72.5, 238.5, 56.5, 244.5, 45.5, 253.5, 38.5]]}, {&#39;bbox&#39;: [352, 28, 449, 124], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[355.5, 64.5, 362.5, 50.5, 374.5, 38.5, 387.5, 30.5, 403.5, 28.5, 416.5, 30.5, 430.5, 37.5, 443.5, 46.5, 447.5, 58.5, 449.5, 70.5, 448.5, 85.5, 443.5, 97.5, 433.5, 109.5, 421.5, 118.5, 407.5, 124.5, 387.5, 124.5, 374.5, 121.5, 365.5, 115.5, 362.5, 115.5, 361.5, 114.5, 361.5, 111.5, 354.5, 100.5, 352.5, 83.5, 353.5, 71.5, 355.5, 64.5]]}], &#39;file_name&#39;: &#39;./balloon/train/5674044810_2d9e2243ff_b.jpg&#39;, &#39;height&#39;: 1024, &#39;width&#39;: 818}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [757, 94, 863, 208], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[807.5, 94.5, 819.5, 96.5, 835.5, 100.5, 849.5, 112.5, 859.5, 128.5, 863.5, 142.5, 863.5, 157.5, 860.5, 171.5, 854.5, 186.5, 847.5, 194.5, 826.5, 205.5, 808.5, 208.5, 791.5, 207.5, 771.5, 195.5, 760.5, 182.5, 757.5, 173.5, 773.5, 164.5, 786.5, 155.5, 796.5, 141.5, 805.5, 118.5, 807.5, 107.5, 807.5, 94.5]]}, {&#39;bbox&#39;: [682, 34, 808, 173], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[776.5, 42.5, 788.5, 52.5, 797.5, 62.5, 804.5, 78.5, 808.5, 93.5, 807.5, 109.5, 803.5, 126.5, 798.5, 137.5, 790.5, 149.5, 778.5, 160.5, 767.5, 168.5, 758.5, 173.5, 738.5, 173.5, 717.5, 170.5, 696.5, 158.5, 688.5, 147.5, 682.5, 139.5, 695.5, 121.5, 700.5, 100.5, 702.5, 77.5, 700.5, 60.5, 695.5, 51.5, 709.5, 40.5, 726.5, 35.5, 744.5, 34.5, 766.5, 38.5, 776.5, 42.5]]}, {&#39;bbox&#39;: [564, 13, 701, 161], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[651.5, 18.5, 670.5, 24.5, 682.5, 32.5, 691.5, 43.5, 699.5, 58.5, 701.5, 78.5, 698.5, 105.5, 694.5, 121.5, 684.5, 135.5, 672.5, 149.5, 659.5, 159.5, 640.5, 161.5, 619.5, 159.5, 603.5, 154.5, 586.5, 145.5, 575.5, 134.5, 565.5, 107.5, 564.5, 83.5, 567.5, 62.5, 576.5, 46.5, 586.5, 31.5, 599.5, 20.5, 615.5, 13.5, 630.5, 13.5, 651.5, 18.5]]}, {&#39;bbox&#39;: [470, 35, 579, 161], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[507.5, 41.5, 522.5, 35.5, 543.5, 35.5, 558.5, 39.5, 569.5, 46.5, 573.5, 50.5, 567.5, 64.5, 564.5, 88.5, 566.5, 110.5, 575.5, 132.5, 579.5, 139.5, 568.5, 148.5, 555.5, 155.5, 543.5, 160.5, 523.5, 161.5, 505.5, 154.5, 493.5, 146.5, 483.5, 131.5, 475.5, 118.5, 470.5, 96.5, 473.5, 76.5, 483.5, 61.5, 493.5, 50.5, 507.5, 41.5]]}, {&#39;bbox&#39;: [735, 181, 851, 283], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[847.5, 195.5, 851.5, 211.5, 850.5, 234.5, 843.5, 250.5, 830.5, 265.5, 817.5, 277.5, 805.5, 281.5, 790.5, 283.5, 775.5, 280.5, 758.5, 269.5, 747.5, 260.5, 739.5, 246.5, 735.5, 233.5, 743.5, 213.5, 748.5, 196.5, 749.5, 190.5, 759.5, 181.5, 768.5, 191.5, 776.5, 200.5, 791.5, 207.5, 814.5, 208.5, 829.5, 204.5, 847.5, 195.5]]}, {&#39;bbox&#39;: [668, 139, 743, 185], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[730.5, 183.5, 714.5, 185.5, 698.5, 183.5, 684.5, 177.5, 668.5, 164.5, 676.5, 155.5, 683.5, 139.5, 690.5, 150.5, 698.5, 158.5, 707.5, 165.5, 717.5, 170.5, 734.5, 174.5, 743.5, 174.5, 730.5, 183.5]]}, {&#39;bbox&#39;: [576, 139, 683, 180], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[612.5, 178.5, 600.5, 172.5, 580.5, 156.5, 576.5, 143.5, 580.5, 139.5, 591.5, 148.5, 605.5, 155.5, 622.5, 159.5, 636.5, 162.5, 639.5, 161.5, 659.5, 159.5, 671.5, 150.5, 683.5, 139.5, 677.5, 154.5, 666.5, 164.5, 651.5, 173.5, 635.5, 178.5, 623.5, 180.5, 612.5, 178.5]]}, {&#39;bbox&#39;: [662, 173, 756, 251], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[700.5, 251.5, 681.5, 244.5, 669.5, 231.5, 662.5, 222.5, 674.5, 207.5, 679.5, 189.5, 680.5, 173.5, 693.5, 182.5, 711.5, 185.5, 728.5, 183.5, 744.5, 174.5, 753.5, 174.5, 756.5, 182.5, 749.5, 189.5, 746.5, 204.5, 742.5, 216.5, 737.5, 229.5, 735.5, 232.5, 737.5, 238.5, 725.5, 244.5, 720.5, 247.5, 720.5, 249.5, 716.5, 250.5, 714.5, 249.5, 700.5, 251.5]]}, {&#39;bbox&#39;: [681, 238, 775, 310], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[766.5, 295.5, 758.5, 302.5, 746.5, 308.5, 729.5, 310.5, 718.5, 310.5, 704.5, 303.5, 692.5, 292.5, 685.5, 278.5, 683.5, 266.5, 681.5, 256.5, 685.5, 247.5, 700.5, 250.5, 713.5, 248.5, 716.5, 250.5, 719.5, 249.5, 720.5, 247.5, 737.5, 238.5, 744.5, 254.5, 752.5, 264.5, 764.5, 272.5, 775.5, 279.5, 766.5, 295.5]]}, {&#39;bbox&#39;: [577, 163, 679, 236], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[656.5, 230.5, 639.5, 235.5, 621.5, 236.5, 607.5, 232.5, 597.5, 226.5, 582.5, 211.5, 580.5, 206.5, 578.5, 197.5, 577.5, 192.5, 586.5, 182.5, 593.5, 167.5, 603.5, 174.5, 621.5, 180.5, 636.5, 179.5, 650.5, 173.5, 668.5, 163.5, 678.5, 173.5, 679.5, 191.5, 676.5, 203.5, 668.5, 214.5, 656.5, 230.5]]}, {&#39;bbox&#39;: [583, 222, 682, 291], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[665.5, 278.5, 652.5, 288.5, 637.5, 291.5, 617.5, 290.5, 604.5, 282.5, 591.5, 271.5, 585.5, 253.5, 583.5, 240.5, 597.5, 228.5, 609.5, 233.5, 621.5, 237.5, 637.5, 235.5, 654.5, 231.5, 662.5, 222.5, 668.5, 229.5, 676.5, 240.5, 682.5, 245.5, 680.5, 255.5, 674.5, 268.5, 665.5, 278.5]]}, {&#39;bbox&#39;: [508, 192, 597, 255], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[547.5, 255.5, 534.5, 255.5, 521.5, 246.5, 511.5, 237.5, 508.5, 233.5, 511.5, 222.5, 511.5, 211.5, 509.5, 201.5, 515.5, 205.5, 526.5, 206.5, 539.5, 204.5, 556.5, 200.5, 569.5, 196.5, 575.5, 192.5, 578.5, 207.5, 588.5, 219.5, 597.5, 227.5, 585.5, 239.5, 573.5, 250.5, 559.5, 255.5, 547.5, 255.5]]}, {&#39;bbox&#39;: [473, 118, 593, 204], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[482.5, 176.5, 477.5, 161.5, 475.5, 152.5, 473.5, 139.5, 473.5, 129.5, 475.5, 118.5, 482.5, 131.5, 493.5, 146.5, 506.5, 155.5, 523.5, 161.5, 543.5, 161.5, 558.5, 154.5, 567.5, 149.5, 572.5, 145.5, 576.5, 144.5, 580.5, 154.5, 587.5, 162.5, 593.5, 166.5, 585.5, 183.5, 573.5, 192.5, 559.5, 199.5, 539.5, 202.5, 523.5, 204.5, 512.5, 201.5, 500.5, 193.5, 489.5, 186.5, 482.5, 176.5]]}, {&#39;bbox&#39;: [401, 153, 511, 264], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[500.5, 245.5, 488.5, 256.5, 478.5, 261.5, 461.5, 264.5, 448.5, 264.5, 436.5, 261.5, 424.5, 253.5, 412.5, 243.5, 405.5, 229.5, 401.5, 218.5, 401.5, 201.5, 403.5, 189.5, 410.5, 177.5, 418.5, 168.5, 428.5, 161.5, 442.5, 156.5, 457.5, 153.5, 469.5, 156.5, 476.5, 158.5, 484.5, 176.5, 491.5, 189.5, 505.5, 198.5, 510.5, 203.5, 511.5, 219.5, 508.5, 232.5, 500.5, 245.5]]}, {&#39;bbox&#39;: [302, 248, 353, 302], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[346.5, 255.5, 353.5, 264.5, 353.5, 274.5, 350.5, 288.5, 340.5, 297.5, 331.5, 301.5, 326.5, 302.5, 317.5, 298.5, 307.5, 292.5, 302.5, 283.5, 302.5, 277.5, 313.5, 277.5, 321.5, 272.5, 330.5, 265.5, 333.5, 256.5, 333.5, 248.5, 340.5, 251.5, 346.5, 255.5]]}, {&#39;bbox&#39;: [278, 222, 333, 280], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[285.5, 266.5, 280.5, 255.5, 278.5, 244.5, 283.5, 231.5, 295.5, 223.5, 306.5, 222.5, 317.5, 224.5, 325.5, 229.5, 330.5, 238.5, 333.5, 247.5, 333.5, 258.5, 329.5, 266.5, 321.5, 273.5, 313.5, 277.5, 305.5, 280.5, 293.5, 274.5, 285.5, 266.5]]}], &#39;file_name&#39;: &#39;./balloon/train/5560377994_cb597a4af5_b.jpg&#39;, &#39;height&#39;: 956, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [195, 0, 401, 253], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[399.5, 78.5, 401.5, 101.5, 399.5, 122.5, 396.5, 137.5, 390.5, 152.5, 375.5, 177.5, 359.5, 196.5, 336.5, 212.5, 314.5, 224.5, 296.5, 234.5, 285.5, 237.5, 276.5, 236.5, 272.5, 240.5, 270.5, 246.5, 270.5, 253.5, 266.5, 253.5, 264.5, 250.5, 263.5, 250.5, 257.5, 246.5, 257.5, 244.5, 259.5, 244.5, 260.5, 241.5, 262.5, 240.5, 264.5, 238.5, 267.5, 237.5, 269.5, 236.5, 264.5, 232.5, 258.5, 228.5, 248.5, 216.5, 237.5, 197.5, 225.5, 182.5, 214.5, 164.5, 206.5, 145.5, 201.5, 123.5, 195.5, 92.5, 201.5, 67.5, 208.5, 44.5, 222.5, 22.5, 237.5, 7.5, 245.5, 0.5, 346.5, 1.5, 357.5, 9.5, 372.5, 22.5, 383.5, 38.5, 393.5, 54.5, 399.5, 78.5]]}, {&#39;bbox&#39;: [87, 30, 246, 245], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[87.5, 103.5, 93.5, 80.5, 100.5, 66.5, 111.5, 53.5, 125.5, 42.5, 138.5, 35.5, 152.5, 32.5, 167.5, 30.5, 185.5, 30.5, 197.5, 33.5, 206.5, 37.5, 208.5, 40.5, 205.5, 51.5, 200.5, 68.5, 195.5, 92.5, 206.5, 145.5, 218.5, 171.5, 231.5, 189.5, 239.5, 201.5, 246.5, 213.5, 241.5, 221.5, 233.5, 230.5, 225.5, 237.5, 231.5, 241.5, 228.5, 244.5, 222.5, 245.5, 216.5, 245.5, 216.5, 243.5, 217.5, 240.5, 204.5, 240.5, 189.5, 235.5, 163.5, 225.5, 143.5, 214.5, 120.5, 194.5, 108.5, 179.5, 99.5, 164.5, 90.5, 141.5, 87.5, 121.5, 87.5, 103.5]]}, {&#39;bbox&#39;: [484, 0, 563, 81], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[562.5, 31.5, 560.5, 44.5, 555.5, 51.5, 549.5, 59.5, 544.5, 66.5, 538.5, 69.5, 536.5, 71.5, 534.5, 74.5, 530.5, 76.5, 527.5, 77.5, 527.5, 77.5, 527.5, 79.5, 525.5, 81.5, 524.5, 78.5, 520.5, 77.5, 517.5, 75.5, 512.5, 72.5, 508.5, 68.5, 504.5, 65.5, 502.5, 63.5, 499.5, 60.5, 496.5, 56.5, 494.5, 53.5, 491.5, 48.5, 488.5, 43.5, 487.5, 39.5, 485.5, 31.5, 484.5, 25.5, 485.5, 19.5, 484.5, 15.5, 485.5, 12.5, 488.5, 6.5, 491.5, 0.5, 558.5, 0.5, 562.5, 5.5, 563.5, 11.5, 563.5, 17.5, 563.5, 25.5, 562.5, 31.5]]}, {&#39;bbox&#39;: [425, 0, 490, 71], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[442.5, 55.5, 437.5, 49.5, 433.5, 45.5, 429.5, 36.5, 426.5, 25.5, 425.5, 16.5, 426.5, 7.5, 430.5, 1.5, 437.5, 0.5, 442.5, 8.5, 452.5, 15.5, 460.5, 22.5, 468.5, 23.5, 468.5, 25.5, 468.5, 28.5, 471.5, 30.5, 474.5, 28.5, 475.5, 26.5, 472.5, 24.5, 475.5, 23.5, 480.5, 19.5, 483.5, 14.5, 485.5, 19.5, 484.5, 25.5, 485.5, 32.5, 487.5, 40.5, 490.5, 48.5, 486.5, 55.5, 481.5, 60.5, 477.5, 66.5, 474.5, 68.5, 472.5, 70.5, 468.5, 71.5, 464.5, 71.5, 464.5, 69.5, 460.5, 67.5, 454.5, 64.5, 447.5, 60.5, 442.5, 55.5]]}, {&#39;bbox&#39;: [438, 0, 490, 29], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[490.5, 0.5, 483.5, 15.5, 479.5, 20.5, 473.5, 22.5, 472.5, 23.5, 472.5, 24.5, 474.5, 26.5, 474.5, 27.5, 473.5, 29.5, 471.5, 29.5, 469.5, 28.5, 468.5, 23.5, 461.5, 22.5, 454.5, 17.5, 447.5, 12.5, 443.5, 7.5, 439.5, 3.5, 438.5, 0.5, 490.5, 0.5]]}], &#39;file_name&#39;: &#39;./balloon/train/5253122239_38b1e7f61c_b.jpg&#39;, &#39;height&#39;: 768, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [276, 420, 416, 580], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[371.5, 424.5, 389.5, 432.5, 399.5, 443.5, 409.5, 459.5, 416.5, 482.5, 415.5, 505.5, 407.5, 526.5, 395.5, 544.5, 381.5, 558.5, 364.5, 567.5, 346.5, 573.5, 331.5, 576.5, 327.5, 576.5, 324.5, 580.5, 322.5, 580.5, 318.5, 577.5, 316.5, 574.5, 319.5, 572.5, 304.5, 562.5, 290.5, 543.5, 276.5, 509.5, 280.5, 477.5, 289.5, 451.5, 304.5, 436.5, 326.5, 423.5, 351.5, 420.5, 371.5, 424.5]]}], &#39;file_name&#39;: &#39;./balloon/train/5178670692_63a4365c9c_b.jpg&#39;, &#39;height&#39;: 1024, &#39;width&#39;: 683}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [350, 152, 955, 680], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[458.5, 209.5, 496.5, 182.5, 542.5, 164.5, 602.5, 152.5, 646.5, 152.5, 661.5, 153.5, 689.5, 184.5, 722.5, 219.5, 746.5, 242.5, 795.5, 273.5, 834.5, 292.5, 871.5, 303.5, 915.5, 306.5, 927.5, 310.5, 931.5, 322.5, 921.5, 336.5, 921.5, 351.5, 932.5, 365.5, 934.5, 375.5, 940.5, 397.5, 950.5, 450.5, 955.5, 507.5, 952.5, 547.5, 944.5, 591.5, 928.5, 638.5, 918.5, 672.5, 913.5, 680.5, 458.5, 679.5, 411.5, 633.5, 375.5, 567.5, 358.5, 512.5, 350.5, 458.5, 351.5, 406.5, 359.5, 366.5, 370.5, 323.5, 393.5, 279.5, 420.5, 241.5, 458.5, 209.5]]}, {&#39;bbox&#39;: [594, 1, 1024, 371], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[630.5, 96.5, 614.5, 63.5, 601.5, 27.5, 594.5, 3.5, 1023.5, 1.5, 1024.5, 283.5, 992.5, 296.5, 953.5, 302.5, 950.5, 306.5, 953.5, 311.5, 958.5, 337.5, 965.5, 344.5, 966.5, 359.5, 955.5, 371.5, 940.5, 371.5, 932.5, 367.5, 922.5, 357.5, 919.5, 342.5, 927.5, 325.5, 931.5, 321.5, 926.5, 310.5, 911.5, 306.5, 876.5, 303.5, 841.5, 295.5, 794.5, 274.5, 754.5, 248.5, 729.5, 226.5, 704.5, 199.5, 680.5, 173.5, 660.5, 146.5, 639.5, 117.5, 630.5, 96.5]]}, {&#39;bbox&#39;: [932, 283, 1023, 521], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1011.5, 520.5, 986.5, 508.5, 955.5, 485.5, 942.5, 411.5, 932.5, 366.5, 942.5, 372.5, 955.5, 372.5, 965.5, 360.5, 966.5, 346.5, 957.5, 337.5, 953.5, 314.5, 952.5, 307.5, 952.5, 303.5, 969.5, 301.5, 992.5, 297.5, 1011.5, 290.5, 1023.5, 283.5, 1023.5, 521.5, 1011.5, 520.5]]}], &#39;file_name&#39;: &#39;./balloon/train/5013250607_26359229b6_b.jpg&#39;, &#39;height&#39;: 681, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [364, 149, 729, 342], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[454.5, 178.5, 506.5, 156.5, 576.5, 149.5, 637.5, 163.5, 670.5, 179.5, 701.5, 198.5, 729.5, 218.5, 729.5, 223.5, 695.5, 231.5, 660.5, 246.5, 624.5, 236.5, 576.5, 234.5, 536.5, 234.5, 509.5, 242.5, 483.5, 251.5, 446.5, 269.5, 424.5, 290.5, 408.5, 307.5, 394.5, 323.5, 381.5, 342.5, 364.5, 305.5, 364.5, 282.5, 368.5, 254.5, 384.5, 231.5, 416.5, 205.5, 440.5, 186.5, 454.5, 178.5]]}, {&#39;bbox&#39;: [472, 214, 1024, 524], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[808.5, 214.5, 835.5, 216.5, 877.5, 224.5, 916.5, 238.5, 953.5, 257.5, 984.5, 277.5, 1023.5, 315.5, 1024.5, 379.5, 984.5, 362.5, 955.5, 352.5, 921.5, 344.5, 877.5, 343.5, 837.5, 345.5, 798.5, 353.5, 753.5, 368.5, 696.5, 398.5, 659.5, 431.5, 636.5, 452.5, 613.5, 485.5, 603.5, 499.5, 560.5, 502.5, 541.5, 506.5, 511.5, 511.5, 491.5, 524.5, 472.5, 499.5, 480.5, 464.5, 492.5, 431.5, 518.5, 381.5, 538.5, 349.5, 564.5, 322.5, 581.5, 303.5, 610.5, 279.5, 637.5, 260.5, 671.5, 244.5, 699.5, 232.5, 740.5, 220.5, 773.5, 216.5, 791.5, 215.5, 808.5, 214.5]]}, {&#39;bbox&#39;: [381, 235, 659, 494], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[435.5, 458.5, 424.5, 448.5, 410.5, 437.5, 398.5, 406.5, 392.5, 371.5, 381.5, 342.5, 392.5, 325.5, 415.5, 299.5, 438.5, 280.5, 471.5, 258.5, 513.5, 242.5, 547.5, 235.5, 584.5, 235.5, 606.5, 235.5, 631.5, 237.5, 659.5, 247.5, 639.5, 258.5, 613.5, 276.5, 584.5, 300.5, 556.5, 330.5, 533.5, 359.5, 514.5, 391.5, 494.5, 429.5, 481.5, 459.5, 471.5, 494.5, 461.5, 479.5, 435.5, 458.5]]}, {&#39;bbox&#39;: [235, 505, 959, 681], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[924.5, 635.5, 855.5, 577.5, 782.5, 541.5, 696.5, 516.5, 636.5, 507.5, 605.5, 505.5, 513.5, 516.5, 449.5, 531.5, 382.5, 562.5, 325.5, 593.5, 280.5, 624.5, 250.5, 659.5, 235.5, 681.5, 959.5, 681.5, 924.5, 635.5]]}, {&#39;bbox&#39;: [605, 343, 1024, 512], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[750.5, 452.5, 717.5, 477.5, 688.5, 508.5, 687.5, 512.5, 642.5, 507.5, 605.5, 504.5, 609.5, 491.5, 641.5, 449.5, 679.5, 413.5, 718.5, 387.5, 753.5, 370.5, 811.5, 350.5, 857.5, 344.5, 899.5, 343.5, 942.5, 350.5, 973.5, 357.5, 1023.5, 380.5, 1024.5, 399.5, 971.5, 389.5, 936.5, 391.5, 896.5, 397.5, 849.5, 406.5, 791.5, 424.5, 750.5, 452.5]]}, {&#39;bbox&#39;: [689, 392, 1024, 683], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[988.5, 682.5, 975.5, 683.5, 961.5, 683.5, 938.5, 646.5, 903.5, 611.5, 857.5, 573.5, 791.5, 542.5, 747.5, 529.5, 704.5, 514.5, 689.5, 509.5, 721.5, 475.5, 763.5, 443.5, 810.5, 417.5, 871.5, 403.5, 944.5, 392.5, 984.5, 393.5, 1024.5, 402.5, 1023.5, 682.5, 988.5, 682.5]]}, {&#39;bbox&#39;: [884, 165, 1024, 307], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[901.5, 213.5, 918.5, 202.5, 957.5, 184.5, 999.5, 171.5, 1024.5, 165.5, 1023.5, 307.5, 1003.5, 292.5, 972.5, 268.5, 920.5, 239.5, 884.5, 225.5, 901.5, 213.5]]}, {&#39;bbox&#39;: [751, 101, 1023, 224], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[930.5, 107.5, 956.5, 112.5, 971.5, 122.5, 985.5, 129.5, 996.5, 138.5, 1008.5, 148.5, 1023.5, 161.5, 980.5, 176.5, 958.5, 185.5, 935.5, 194.5, 914.5, 203.5, 895.5, 216.5, 884.5, 224.5, 848.5, 218.5, 815.5, 215.5, 790.5, 214.5, 770.5, 215.5, 755.5, 217.5, 751.5, 214.5, 755.5, 198.5, 775.5, 170.5, 798.5, 142.5, 824.5, 124.5, 850.5, 109.5, 882.5, 102.5, 904.5, 101.5, 930.5, 107.5]]}, {&#39;bbox&#39;: [953, 96, 1023, 158], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[973.5, 99.5, 981.5, 98.5, 991.5, 96.5, 1023.5, 98.5, 1023.5, 158.5, 1003.5, 141.5, 983.5, 127.5, 953.5, 111.5, 954.5, 106.5, 973.5, 99.5]]}, {&#39;bbox&#39;: [399, 97, 745, 223], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[480.5, 111.5, 515.5, 101.5, 561.5, 97.5, 593.5, 99.5, 620.5, 108.5, 650.5, 120.5, 678.5, 138.5, 697.5, 157.5, 717.5, 180.5, 733.5, 199.5, 744.5, 216.5, 745.5, 218.5, 727.5, 223.5, 728.5, 218.5, 700.5, 198.5, 671.5, 180.5, 640.5, 167.5, 600.5, 154.5, 550.5, 150.5, 516.5, 154.5, 487.5, 164.5, 446.5, 179.5, 417.5, 200.5, 411.5, 193.5, 399.5, 179.5, 417.5, 156.5, 436.5, 135.5, 456.5, 120.5, 480.5, 111.5]]}, {&#39;bbox&#39;: [469, 23, 784, 217], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[555.5, 35.5, 575.5, 28.5, 607.5, 24.5, 636.5, 23.5, 663.5, 29.5, 696.5, 42.5, 720.5, 53.5, 733.5, 68.5, 752.5, 92.5, 766.5, 108.5, 773.5, 124.5, 780.5, 139.5, 784.5, 143.5, 772.5, 169.5, 763.5, 182.5, 753.5, 200.5, 754.5, 213.5, 756.5, 216.5, 746.5, 217.5, 731.5, 197.5, 708.5, 167.5, 677.5, 136.5, 649.5, 119.5, 624.5, 106.5, 594.5, 99.5, 556.5, 92.5, 527.5, 93.5, 503.5, 98.5, 473.5, 110.5, 469.5, 107.5, 481.5, 89.5, 495.5, 75.5, 514.5, 59.5, 537.5, 40.5, 555.5, 35.5]]}, {&#39;bbox&#39;: [366, 167, 417, 254], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[383.5, 167.5, 392.5, 174.5, 404.5, 189.5, 417.5, 201.5, 394.5, 221.5, 380.5, 232.5, 370.5, 249.5, 367.5, 254.5, 366.5, 243.5, 373.5, 230.5, 374.5, 216.5, 377.5, 195.5, 378.5, 178.5, 383.5, 167.5]]}, {&#39;bbox&#39;: [218, 41, 379, 93], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[278.5, 43.5, 300.5, 43.5, 322.5, 41.5, 335.5, 43.5, 352.5, 50.5, 365.5, 52.5, 379.5, 59.5, 370.5, 73.5, 358.5, 79.5, 351.5, 93.5, 335.5, 86.5, 314.5, 81.5, 294.5, 79.5, 275.5, 78.5, 261.5, 79.5, 249.5, 82.5, 236.5, 85.5, 227.5, 87.5, 218.5, 73.5, 223.5, 64.5, 239.5, 56.5, 263.5, 46.5, 278.5, 43.5]]}, {&#39;bbox&#39;: [1, 188, 208, 380], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[128.5, 189.5, 153.5, 189.5, 174.5, 188.5, 185.5, 192.5, 202.5, 195.5, 206.5, 223.5, 204.5, 249.5, 208.5, 266.5, 206.5, 281.5, 206.5, 288.5, 195.5, 294.5, 191.5, 304.5, 188.5, 307.5, 180.5, 324.5, 166.5, 343.5, 139.5, 341.5, 104.5, 348.5, 58.5, 364.5, 41.5, 368.5, 24.5, 376.5, 16.5, 380.5, 15.5, 368.5, 11.5, 350.5, 6.5, 336.5, 1.5, 333.5, 3.5, 259.5, 13.5, 243.5, 29.5, 227.5, 48.5, 215.5, 86.5, 200.5, 114.5, 191.5, 128.5, 189.5]]}, {&#39;bbox&#39;: [36, 114, 201, 225], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[68.5, 162.5, 83.5, 148.5, 98.5, 136.5, 109.5, 126.5, 126.5, 116.5, 134.5, 114.5, 144.5, 124.5, 148.5, 130.5, 148.5, 140.5, 157.5, 149.5, 164.5, 152.5, 173.5, 157.5, 179.5, 161.5, 186.5, 163.5, 194.5, 165.5, 198.5, 168.5, 199.5, 174.5, 199.5, 178.5, 199.5, 182.5, 200.5, 184.5, 200.5, 188.5, 201.5, 193.5, 192.5, 193.5, 178.5, 190.5, 174.5, 188.5, 167.5, 188.5, 164.5, 188.5, 150.5, 189.5, 127.5, 189.5, 115.5, 190.5, 98.5, 195.5, 58.5, 211.5, 44.5, 219.5, 36.5, 225.5, 37.5, 214.5, 46.5, 197.5, 55.5, 176.5, 68.5, 162.5]]}, {&#39;bbox&#39;: [2, 58, 117, 176], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[52.5, 67.5, 70.5, 76.5, 87.5, 83.5, 98.5, 92.5, 110.5, 101.5, 117.5, 113.5, 105.5, 122.5, 93.5, 137.5, 79.5, 147.5, 65.5, 161.5, 52.5, 176.5, 43.5, 164.5, 22.5, 137.5, 11.5, 127.5, 2.5, 123.5, 2.5, 61.5, 19.5, 58.5, 44.5, 63.5, 52.5, 67.5]]}, {&#39;bbox&#39;: [1, 125, 52, 257], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[1.5, 125.5, 12.5, 131.5, 34.5, 155.5, 52.5, 176.5, 40.5, 207.5, 35.5, 221.5, 29.5, 229.5, 10.5, 247.5, 4.5, 257.5, 1.5, 257.5, 1.5, 125.5]]}, {&#39;bbox&#39;: [10, 346, 486, 682], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[212.5, 349.5, 241.5, 353.5, 273.5, 363.5, 307.5, 377.5, 351.5, 393.5, 387.5, 414.5, 427.5, 450.5, 466.5, 487.5, 486.5, 520.5, 450.5, 530.5, 388.5, 556.5, 322.5, 595.5, 277.5, 628.5, 246.5, 662.5, 236.5, 681.5, 100.5, 682.5, 101.5, 654.5, 100.5, 592.5, 94.5, 524.5, 64.5, 447.5, 43.5, 406.5, 25.5, 389.5, 10.5, 385.5, 17.5, 381.5, 64.5, 363.5, 104.5, 354.5, 147.5, 346.5, 183.5, 346.5, 212.5, 349.5]]}, {&#39;bbox&#39;: [1, 377, 99, 683], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[70.5, 682.5, 1.5, 683.5, 3.5, 377.5, 15.5, 382.5, 37.5, 401.5, 64.5, 444.5, 74.5, 480.5, 82.5, 507.5, 89.5, 536.5, 95.5, 582.5, 99.5, 633.5, 99.5, 666.5, 99.5, 681.5, 70.5, 682.5]]}], &#39;file_name&#39;: &#39;./balloon/train/4955354786_337a598e4a_b.jpg&#39;, &#39;height&#39;: 683, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [454, 0, 587, 247], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[585.5, 96.5, 580.5, 116.5, 571.5, 137.5, 554.5, 164.5, 543.5, 177.5, 536.5, 184.5, 530.5, 192.5, 524.5, 200.5, 513.5, 215.5, 503.5, 225.5, 491.5, 232.5, 489.5, 236.5, 490.5, 241.5, 493.5, 243.5, 492.5, 245.5, 487.5, 247.5, 478.5, 244.5, 478.5, 239.5, 477.5, 237.5, 471.5, 233.5, 463.5, 228.5, 460.5, 226.5, 459.5, 216.5, 457.5, 201.5, 454.5, 185.5, 463.5, 187.5, 464.5, 192.5, 462.5, 197.5, 462.5, 201.5, 466.5, 204.5, 474.5, 204.5, 480.5, 200.5, 482.5, 195.5, 483.5, 192.5, 481.5, 190.5, 479.5, 190.5, 480.5, 185.5, 492.5, 178.5, 507.5, 164.5, 521.5, 149.5, 540.5, 129.5, 550.5, 111.5, 563.5, 83.5, 568.5, 65.5, 569.5, 32.5, 568.5, 10.5, 565.5, 0.5, 571.5, 8.5, 582.5, 33.5, 586.5, 55.5, 587.5, 78.5, 585.5, 96.5]]}, {&#39;bbox&#39;: [354, 1, 569, 205], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[359.5, 75.5, 355.5, 61.5, 354.5, 46.5, 354.5, 32.5, 354.5, 19.5, 357.5, 6.5, 361.5, 1.5, 565.5, 1.5, 568.5, 11.5, 569.5, 30.5, 569.5, 51.5, 567.5, 71.5, 560.5, 91.5, 549.5, 114.5, 536.5, 133.5, 517.5, 154.5, 499.5, 172.5, 486.5, 181.5, 480.5, 185.5, 478.5, 189.5, 481.5, 191.5, 483.5, 192.5, 482.5, 194.5, 482.5, 198.5, 479.5, 202.5, 475.5, 203.5, 470.5, 205.5, 466.5, 204.5, 463.5, 203.5, 463.5, 201.5, 462.5, 198.5, 462.5, 195.5, 464.5, 191.5, 462.5, 187.5, 453.5, 184.5, 438.5, 176.5, 419.5, 161.5, 397.5, 142.5, 384.5, 127.5, 371.5, 106.5, 364.5, 90.5, 359.5, 75.5]]}, {&#39;bbox&#39;: [241, 96, 460, 367], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[246.5, 173.5, 252.5, 160.5, 260.5, 145.5, 270.5, 130.5, 283.5, 116.5, 301.5, 106.5, 322.5, 99.5, 339.5, 96.5, 358.5, 98.5, 368.5, 100.5, 377.5, 116.5, 387.5, 131.5, 399.5, 144.5, 416.5, 158.5, 429.5, 169.5, 443.5, 179.5, 454.5, 185.5, 457.5, 202.5, 460.5, 223.5, 456.5, 247.5, 452.5, 270.5, 448.5, 284.5, 441.5, 299.5, 432.5, 316.5, 421.5, 331.5, 410.5, 342.5, 410.5, 345.5, 414.5, 349.5, 413.5, 353.5, 411.5, 357.5, 406.5, 365.5, 402.5, 367.5, 399.5, 367.5, 400.5, 359.5, 401.5, 354.5, 397.5, 348.5, 389.5, 348.5, 374.5, 347.5, 360.5, 343.5, 344.5, 338.5, 334.5, 334.5, 321.5, 329.5, 306.5, 321.5, 290.5, 310.5, 278.5, 298.5, 263.5, 279.5, 255.5, 264.5, 249.5, 248.5, 243.5, 221.5, 241.5, 199.5, 243.5, 181.5, 246.5, 173.5]]}], &#39;file_name&#39;: &#39;./balloon/train/4887227769_acd2e6127d_b.jpg&#39;, &#39;height&#39;: 768, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [219, 95, 667, 673], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[344.5, 120.5, 379.5, 105.5, 421.5, 95.5, 459.5, 98.5, 491.5, 100.5, 539.5, 118.5, 578.5, 142.5, 610.5, 172.5, 638.5, 213.5, 658.5, 265.5, 666.5, 304.5, 667.5, 354.5, 657.5, 407.5, 639.5, 463.5, 615.5, 504.5, 583.5, 551.5, 548.5, 577.5, 519.5, 604.5, 492.5, 614.5, 462.5, 623.5, 451.5, 632.5, 453.5, 635.5, 457.5, 641.5, 472.5, 642.5, 480.5, 651.5, 480.5, 660.5, 466.5, 673.5, 459.5, 669.5, 452.5, 661.5, 446.5, 656.5, 442.5, 645.5, 442.5, 634.5, 439.5, 630.5, 430.5, 622.5, 402.5, 615.5, 365.5, 600.5, 324.5, 570.5, 297.5, 543.5, 266.5, 506.5, 237.5, 443.5, 219.5, 340.5, 228.5, 288.5, 243.5, 235.5, 262.5, 194.5, 292.5, 160.5, 314.5, 141.5, 344.5, 120.5]]}], &#39;file_name&#39;: &#39;./balloon/train/4864857993_edb62f16ef_b.jpg&#39;, &#39;height&#39;: 683, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [300, 239, 369, 333], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[303.5, 266.5, 308.5, 256.5, 316.5, 245.5, 325.5, 241.5, 332.5, 239.5, 341.5, 239.5, 349.5, 242.5, 358.5, 249.5, 364.5, 257.5, 367.5, 266.5, 369.5, 275.5, 367.5, 290.5, 361.5, 303.5, 354.5, 312.5, 344.5, 320.5, 337.5, 322.5, 334.5, 324.5, 333.5, 326.5, 333.5, 328.5, 336.5, 329.5, 336.5, 332.5, 333.5, 333.5, 331.5, 332.5, 330.5, 330.5, 330.5, 328.5, 330.5, 326.5, 329.5, 326.5, 330.5, 324.5, 322.5, 319.5, 314.5, 311.5, 308.5, 302.5, 303.5, 291.5, 300.5, 277.5, 303.5, 266.5]]}], &#39;file_name&#39;: &#39;./balloon/train/4552737035_3a0a4105fb_b.jpg&#39;, &#39;height&#39;: 683, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [108, 340, 197, 440], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[119.5, 352.5, 128.5, 346.5, 141.5, 341.5, 154.5, 340.5, 168.5, 343.5, 180.5, 349.5, 189.5, 359.5, 195.5, 373.5, 197.5, 386.5, 197.5, 399.5, 191.5, 403.5, 188.5, 410.5, 186.5, 411.5, 181.5, 414.5, 173.5, 423.5, 165.5, 432.5, 163.5, 435.5, 160.5, 435.5, 154.5, 440.5, 153.5, 431.5, 150.5, 413.5, 145.5, 401.5, 141.5, 392.5, 134.5, 383.5, 114.5, 371.5, 108.5, 370.5, 112.5, 362.5, 119.5, 352.5]]}, {&#39;bbox&#39;: [56, 368, 153, 474], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[72.5, 379.5, 80.5, 374.5, 91.5, 371.5, 102.5, 368.5, 116.5, 372.5, 131.5, 382.5, 141.5, 391.5, 147.5, 405.5, 150.5, 417.5, 153.5, 433.5, 152.5, 444.5, 143.5, 457.5, 135.5, 465.5, 126.5, 471.5, 116.5, 474.5, 102.5, 474.5, 89.5, 469.5, 79.5, 462.5, 67.5, 451.5, 59.5, 434.5, 56.5, 418.5, 58.5, 403.5, 63.5, 394.5, 66.5, 387.5, 72.5, 379.5]]}, {&#39;bbox&#39;: [18, 386, 67, 451], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[19.5, 416.5, 23.5, 407.5, 28.5, 398.5, 36.5, 394.5, 45.5, 389.5, 54.5, 386.5, 67.5, 386.5, 62.5, 396.5, 57.5, 405.5, 56.5, 419.5, 59.5, 433.5, 67.5, 451.5, 56.5, 446.5, 45.5, 443.5, 35.5, 444.5, 29.5, 445.5, 21.5, 447.5, 18.5, 440.5, 18.5, 431.5, 18.5, 422.5, 19.5, 416.5]]}, {&#39;bbox&#39;: [0, 444, 106, 537], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[7.5, 456.5, 19.5, 448.5, 30.5, 445.5, 41.5, 444.5, 53.5, 445.5, 64.5, 450.5, 74.5, 457.5, 80.5, 463.5, 89.5, 469.5, 99.5, 473.5, 106.5, 475.5, 106.5, 476.5, 97.5, 485.5, 91.5, 495.5, 85.5, 510.5, 82.5, 517.5, 72.5, 524.5, 57.5, 532.5, 40.5, 537.5, 22.5, 534.5, 11.5, 528.5, 0.5, 521.5, 1.5, 462.5, 7.5, 456.5]]}, {&#39;bbox&#39;: [42, 517, 100, 572], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[79.5, 572.5, 67.5, 570.5, 57.5, 566.5, 48.5, 559.5, 42.5, 545.5, 42.5, 538.5, 59.5, 533.5, 74.5, 525.5, 82.5, 517.5, 84.5, 529.5, 88.5, 553.5, 100.5, 567.5, 87.5, 572.5, 79.5, 572.5]]}, {&#39;bbox&#39;: [84, 474, 183, 579], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[153.5, 480.5, 166.5, 490.5, 177.5, 504.5, 182.5, 518.5, 183.5, 534.5, 180.5, 550.5, 172.5, 563.5, 160.5, 573.5, 150.5, 578.5, 138.5, 579.5, 121.5, 578.5, 107.5, 571.5, 100.5, 566.5, 94.5, 558.5, 88.5, 547.5, 85.5, 532.5, 84.5, 519.5, 87.5, 505.5, 91.5, 495.5, 98.5, 487.5, 107.5, 479.5, 113.5, 476.5, 127.5, 474.5, 139.5, 475.5, 153.5, 480.5]]}, {&#39;bbox&#39;: [302, 322, 371, 410], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[311.5, 342.5, 320.5, 332.5, 336.5, 324.5, 348.5, 322.5, 359.5, 324.5, 370.5, 330.5, 369.5, 351.5, 369.5, 361.5, 371.5, 364.5, 366.5, 367.5, 362.5, 366.5, 359.5, 370.5, 356.5, 373.5, 356.5, 380.5, 355.5, 383.5, 355.5, 386.5, 357.5, 389.5, 355.5, 392.5, 358.5, 394.5, 359.5, 395.5, 359.5, 399.5, 361.5, 402.5, 366.5, 402.5, 369.5, 402.5, 367.5, 405.5, 358.5, 409.5, 348.5, 410.5, 336.5, 409.5, 322.5, 404.5, 311.5, 393.5, 305.5, 382.5, 302.5, 370.5, 303.5, 359.5, 305.5, 351.5, 311.5, 342.5]]}, {&#39;bbox&#39;: [370, 255, 423, 370], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[374.5, 305.5, 379.5, 290.5, 387.5, 278.5, 397.5, 267.5, 406.5, 262.5, 423.5, 255.5, 417.5, 263.5, 415.5, 272.5, 414.5, 281.5, 415.5, 289.5, 411.5, 290.5, 414.5, 320.5, 406.5, 343.5, 404.5, 349.5, 397.5, 361.5, 390.5, 370.5, 372.5, 364.5, 370.5, 361.5, 370.5, 345.5, 370.5, 325.5, 372.5, 314.5, 374.5, 305.5]]}, {&#39;bbox&#39;: [416, 525, 592, 662], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[457.5, 560.5, 471.5, 544.5, 489.5, 534.5, 509.5, 525.5, 530.5, 525.5, 548.5, 529.5, 565.5, 537.5, 579.5, 552.5, 588.5, 570.5, 592.5, 589.5, 591.5, 603.5, 584.5, 622.5, 568.5, 640.5, 557.5, 650.5, 534.5, 659.5, 515.5, 662.5, 496.5, 662.5, 478.5, 659.5, 459.5, 655.5, 452.5, 653.5, 446.5, 645.5, 440.5, 640.5, 432.5, 635.5, 424.5, 631.5, 416.5, 629.5, 422.5, 619.5, 429.5, 611.5, 433.5, 604.5, 438.5, 594.5, 443.5, 582.5, 450.5, 570.5, 457.5, 560.5]]}, {&#39;bbox&#39;: [366, 630, 460, 728], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[372.5, 653.5, 381.5, 642.5, 392.5, 634.5, 405.5, 630.5, 419.5, 630.5, 435.5, 636.5, 446.5, 644.5, 455.5, 658.5, 459.5, 672.5, 460.5, 690.5, 454.5, 704.5, 445.5, 715.5, 433.5, 724.5, 421.5, 727.5, 408.5, 728.5, 396.5, 725.5, 386.5, 719.5, 377.5, 709.5, 372.5, 699.5, 367.5, 686.5, 366.5, 673.5, 368.5, 661.5, 372.5, 653.5]]}, {&#39;bbox&#39;: [340, 668, 447, 778], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[340.5, 729.5, 341.5, 716.5, 342.5, 706.5, 347.5, 695.5, 352.5, 684.5, 358.5, 676.5, 367.5, 668.5, 366.5, 678.5, 367.5, 690.5, 372.5, 704.5, 380.5, 713.5, 388.5, 721.5, 402.5, 727.5, 418.5, 727.5, 435.5, 723.5, 447.5, 713.5, 447.5, 720.5, 446.5, 732.5, 442.5, 746.5, 433.5, 758.5, 424.5, 766.5, 412.5, 773.5, 398.5, 778.5, 383.5, 776.5, 368.5, 772.5, 357.5, 763.5, 346.5, 748.5, 342.5, 736.5, 340.5, 729.5]]}], &#39;file_name&#39;: &#39;./balloon/train/4543126482_92254ef046_b.jpg&#39;, &#39;height&#39;: 1024, &#39;width&#39;: 679}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [324, 478, 454, 613], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[360.5, 486.5, 372.5, 481.5, 385.5, 478.5, 394.5, 478.5, 410.5, 482.5, 424.5, 489.5, 437.5, 498.5, 446.5, 511.5, 453.5, 525.5, 454.5, 540.5, 452.5, 561.5, 445.5, 580.5, 432.5, 593.5, 421.5, 604.5, 410.5, 609.5, 398.5, 613.5, 385.5, 612.5, 362.5, 606.5, 350.5, 598.5, 335.5, 580.5, 324.5, 554.5, 324.5, 541.5, 325.5, 525.5, 332.5, 514.5, 339.5, 502.5, 351.5, 493.5, 360.5, 486.5]]}, {&#39;bbox&#39;: [393, 635, 555, 806], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[491.5, 639.5, 512.5, 647.5, 529.5, 659.5, 541.5, 674.5, 549.5, 689.5, 555.5, 709.5, 552.5, 736.5, 546.5, 756.5, 536.5, 772.5, 519.5, 789.5, 508.5, 796.5, 488.5, 804.5, 470.5, 806.5, 458.5, 806.5, 451.5, 802.5, 444.5, 787.5, 438.5, 773.5, 432.5, 762.5, 422.5, 753.5, 413.5, 744.5, 401.5, 736.5, 393.5, 732.5, 393.5, 713.5, 397.5, 692.5, 407.5, 673.5, 418.5, 657.5, 435.5, 647.5, 456.5, 638.5, 477.5, 635.5, 491.5, 639.5]]}, {&#39;bbox&#39;: [272, 726, 453, 913], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[278.5, 787.5, 290.5, 766.5, 306.5, 744.5, 326.5, 734.5, 346.5, 727.5, 364.5, 726.5, 386.5, 729.5, 408.5, 740.5, 429.5, 758.5, 442.5, 783.5, 453.5, 807.5, 450.5, 841.5, 436.5, 872.5, 417.5, 892.5, 401.5, 902.5, 371.5, 913.5, 345.5, 908.5, 317.5, 897.5, 299.5, 882.5, 285.5, 861.5, 275.5, 833.5, 272.5, 804.5, 278.5, 787.5]]}], &#39;file_name&#39;: &#39;./balloon/train/4057490235_2ffdf7d68b_b.jpg&#39;, &#39;height&#39;: 1024, &#39;width&#39;: 769}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [53, 106, 368, 364], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[85.5, 164.5, 112.5, 137.5, 144.5, 121.5, 172.5, 112.5, 196.5, 106.5, 220.5, 106.5, 251.5, 109.5, 285.5, 116.5, 310.5, 126.5, 334.5, 138.5, 368.5, 158.5, 350.5, 167.5, 326.5, 185.5, 309.5, 204.5, 288.5, 234.5, 274.5, 265.5, 269.5, 286.5, 266.5, 317.5, 267.5, 337.5, 272.5, 358.5, 256.5, 364.5, 237.5, 358.5, 205.5, 348.5, 179.5, 343.5, 154.5, 339.5, 129.5, 338.5, 108.5, 338.5, 89.5, 339.5, 75.5, 321.5, 58.5, 288.5, 53.5, 259.5, 54.5, 234.5, 62.5, 204.5, 69.5, 186.5, 85.5, 164.5]]}, {&#39;bbox&#39;: [0, 338, 406, 725], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[288.5, 383.5, 291.5, 385.5, 313.5, 400.5, 333.5, 418.5, 351.5, 434.5, 369.5, 455.5, 383.5, 478.5, 397.5, 499.5, 404.5, 515.5, 405.5, 529.5, 406.5, 546.5, 405.5, 564.5, 393.5, 594.5, 380.5, 635.5, 370.5, 659.5, 359.5, 681.5, 350.5, 701.5, 336.5, 723.5, 213.5, 725.5, 0.5, 724.5, 1.5, 358.5, 21.5, 353.5, 60.5, 344.5, 90.5, 340.5, 121.5, 338.5, 150.5, 340.5, 180.5, 343.5, 216.5, 351.5, 247.5, 362.5, 259.5, 366.5, 269.5, 371.5, 275.5, 375.5, 281.5, 378.5, 284.5, 381.5, 288.5, 383.5]]}, {&#39;bbox&#39;: [383, 478, 545, 622], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[517.5, 570.5, 486.5, 598.5, 465.5, 610.5, 440.5, 618.5, 416.5, 622.5, 388.5, 616.5, 395.5, 590.5, 403.5, 570.5, 406.5, 548.5, 406.5, 528.5, 403.5, 510.5, 392.5, 492.5, 383.5, 478.5, 397.5, 482.5, 419.5, 495.5, 444.5, 504.5, 468.5, 509.5, 505.5, 513.5, 534.5, 513.5, 545.5, 513.5, 538.5, 526.5, 534.5, 542.5, 523.5, 559.5, 517.5, 570.5]]}, {&#39;bbox&#39;: [457, 512, 610, 724], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[606.5, 707.5, 598.5, 719.5, 588.5, 724.5, 479.5, 724.5, 466.5, 694.5, 458.5, 664.5, 458.5, 639.5, 457.5, 623.5, 457.5, 614.5, 474.5, 605.5, 494.5, 592.5, 511.5, 574.5, 526.5, 557.5, 536.5, 536.5, 537.5, 526.5, 547.5, 512.5, 550.5, 512.5, 550.5, 525.5, 555.5, 552.5, 566.5, 584.5, 580.5, 612.5, 592.5, 629.5, 596.5, 635.5, 601.5, 654.5, 604.5, 671.5, 607.5, 694.5, 610.5, 702.5, 606.5, 707.5]]}, {&#39;bbox&#39;: [551, 356, 873, 710], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[873.5, 560.5, 872.5, 598.5, 850.5, 620.5, 822.5, 647.5, 799.5, 667.5, 776.5, 683.5, 744.5, 698.5, 717.5, 706.5, 700.5, 710.5, 666.5, 696.5, 637.5, 677.5, 613.5, 656.5, 592.5, 628.5, 575.5, 601.5, 561.5, 570.5, 553.5, 537.5, 551.5, 512.5, 575.5, 509.5, 609.5, 504.5, 640.5, 498.5, 675.5, 486.5, 706.5, 473.5, 724.5, 454.5, 734.5, 439.5, 741.5, 428.5, 748.5, 430.5, 750.5, 430.5, 753.5, 429.5, 757.5, 432.5, 762.5, 435.5, 772.5, 435.5, 778.5, 435.5, 784.5, 430.5, 783.5, 424.5, 777.5, 419.5, 772.5, 410.5, 766.5, 403.5, 762.5, 400.5, 760.5, 403.5, 759.5, 409.5, 756.5, 414.5, 748.5, 413.5, 747.5, 408.5, 746.5, 392.5, 744.5, 374.5, 741.5, 360.5, 740.5, 356.5, 752.5, 364.5, 773.5, 380.5, 797.5, 398.5, 818.5, 423.5, 826.5, 432.5, 838.5, 453.5, 852.5, 482.5, 865.5, 510.5, 872.5, 540.5, 873.5, 560.5]]}, {&#39;bbox&#39;: [266, 143, 784, 514], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[713.5, 316.5, 725.5, 330.5, 734.5, 348.5, 742.5, 364.5, 746.5, 394.5, 747.5, 411.5, 749.5, 414.5, 754.5, 414.5, 760.5, 409.5, 760.5, 404.5, 763.5, 401.5, 768.5, 404.5, 772.5, 410.5, 776.5, 418.5, 780.5, 423.5, 784.5, 426.5, 784.5, 431.5, 779.5, 434.5, 773.5, 436.5, 762.5, 436.5, 753.5, 429.5, 749.5, 429.5, 742.5, 428.5, 738.5, 434.5, 716.5, 464.5, 692.5, 478.5, 654.5, 493.5, 616.5, 502.5, 582.5, 507.5, 538.5, 514.5, 484.5, 512.5, 448.5, 505.5, 410.5, 491.5, 389.5, 481.5, 383.5, 479.5, 368.5, 454.5, 344.5, 428.5, 314.5, 400.5, 281.5, 379.5, 270.5, 350.5, 266.5, 319.5, 270.5, 286.5, 279.5, 251.5, 300.5, 216.5, 317.5, 195.5, 338.5, 175.5, 365.5, 159.5, 400.5, 146.5, 428.5, 144.5, 449.5, 143.5, 467.5, 147.5, 479.5, 157.5, 492.5, 167.5, 512.5, 172.5, 531.5, 177.5, 551.5, 177.5, 564.5, 179.5, 577.5, 186.5, 598.5, 200.5, 614.5, 212.5, 638.5, 231.5, 660.5, 250.5, 678.5, 268.5, 696.5, 291.5, 708.5, 304.5, 713.5, 316.5]]}], &#39;file_name&#39;: &#39;./balloon/train/3945575930_ce99a7e98d_b.jpg&#39;, &#39;height&#39;: 725, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [301, 128, 536, 366], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[493.5, 154.5, 510.5, 171.5, 521.5, 188.5, 531.5, 210.5, 536.5, 239.5, 535.5, 270.5, 525.5, 299.5, 510.5, 320.5, 493.5, 336.5, 466.5, 352.5, 453.5, 358.5, 456.5, 362.5, 447.5, 366.5, 447.5, 359.5, 429.5, 362.5, 403.5, 362.5, 384.5, 357.5, 361.5, 348.5, 336.5, 329.5, 320.5, 307.5, 307.5, 279.5, 301.5, 251.5, 301.5, 228.5, 306.5, 211.5, 314.5, 188.5, 331.5, 167.5, 348.5, 152.5, 371.5, 138.5, 396.5, 131.5, 421.5, 128.5, 445.5, 131.5, 471.5, 140.5, 493.5, 154.5]]}, {&#39;bbox&#39;: [548, 169, 782, 404], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[772.5, 241.5, 780.5, 265.5, 782.5, 295.5, 777.5, 319.5, 769.5, 340.5, 758.5, 357.5, 746.5, 371.5, 732.5, 382.5, 716.5, 393.5, 699.5, 400.5, 681.5, 403.5, 661.5, 404.5, 639.5, 403.5, 619.5, 397.5, 614.5, 400.5, 609.5, 396.5, 612.5, 393.5, 594.5, 383.5, 577.5, 368.5, 560.5, 343.5, 548.5, 309.5, 548.5, 286.5, 552.5, 256.5, 559.5, 236.5, 570.5, 217.5, 588.5, 198.5, 612.5, 181.5, 639.5, 173.5, 663.5, 169.5, 694.5, 174.5, 716.5, 182.5, 741.5, 196.5, 754.5, 211.5, 766.5, 228.5, 772.5, 241.5]]}], &#39;file_name&#39;: &#39;./balloon/train/3927754171_9011487133_b.jpg&#39;, &#39;height&#39;: 681, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [506, 12, 875, 454], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[676.5, 445.5, 620.5, 406.5, 564.5, 353.5, 524.5, 295.5, 506.5, 217.5, 510.5, 160.5, 524.5, 118.5, 559.5, 62.5, 597.5, 34.5, 639.5, 15.5, 694.5, 12.5, 740.5, 19.5, 773.5, 35.5, 815.5, 67.5, 837.5, 93.5, 859.5, 133.5, 875.5, 185.5, 874.5, 233.5, 868.5, 268.5, 855.5, 315.5, 830.5, 360.5, 806.5, 401.5, 779.5, 430.5, 750.5, 435.5, 733.5, 451.5, 720.5, 451.5, 716.5, 454.5, 705.5, 447.5, 690.5, 445.5, 676.5, 445.5]]}], &#39;file_name&#39;: &#39;./balloon/train/3646097131_e3e1215843_b.jpg&#39;, &#39;height&#39;: 681, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [725, 315, 790, 413], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[734.5, 332.5, 742.5, 324.5, 750.5, 318.5, 761.5, 316.5, 772.5, 315.5, 781.5, 319.5, 790.5, 324.5, 790.5, 389.5, 786.5, 395.5, 780.5, 400.5, 768.5, 407.5, 759.5, 409.5, 755.5, 409.5, 755.5, 412.5, 751.5, 413.5, 748.5, 412.5, 748.5, 411.5, 748.5, 408.5, 744.5, 404.5, 735.5, 394.5, 730.5, 380.5, 725.5, 363.5, 726.5, 348.5, 729.5, 339.5, 734.5, 332.5]]}], &#39;file_name&#39;: &#39;./balloon/train/3342804367_f43682bb80_b.jpg&#39;, &#39;height&#39;: 1024, &#39;width&#39;: 790}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [520, 266, 562, 316], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[530.5, 270.5, 538.5, 266.5, 548.5, 267.5, 552.5, 270.5, 558.5, 275.5, 561.5, 282.5, 562.5, 291.5, 558.5, 302.5, 555.5, 307.5, 549.5, 312.5, 544.5, 315.5, 543.5, 316.5, 542.5, 316.5, 540.5, 315.5, 538.5, 315.5, 534.5, 313.5, 528.5, 309.5, 524.5, 303.5, 521.5, 296.5, 520.5, 288.5, 521.5, 280.5, 525.5, 274.5, 530.5, 270.5]]}], &#39;file_name&#39;: &#39;./balloon/train/2937599387_80e7d6e050_b.jpg&#39;, &#39;height&#39;: 685, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [466, 14, 974, 520], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[605.5, 47.5, 646.5, 29.5, 683.5, 19.5, 714.5, 14.5, 749.5, 14.5, 792.5, 21.5, 818.5, 30.5, 861.5, 52.5, 897.5, 76.5, 930.5, 114.5, 949.5, 144.5, 966.5, 189.5, 971.5, 219.5, 974.5, 245.5, 971.5, 295.5, 953.5, 352.5, 939.5, 385.5, 894.5, 435.5, 856.5, 470.5, 812.5, 494.5, 760.5, 513.5, 703.5, 520.5, 656.5, 517.5, 615.5, 509.5, 584.5, 496.5, 546.5, 470.5, 516.5, 436.5, 485.5, 378.5, 471.5, 332.5, 466.5, 284.5, 471.5, 231.5, 491.5, 168.5, 516.5, 127.5, 543.5, 94.5, 574.5, 68.5, 605.5, 47.5]]}, {&#39;bbox&#39;: [158, 303, 577, 677], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[246.5, 338.5, 281.5, 319.5, 319.5, 310.5, 364.5, 303.5, 411.5, 309.5, 444.5, 317.5, 468.5, 327.5, 480.5, 365.5, 501.5, 410.5, 516.5, 439.5, 543.5, 467.5, 563.5, 481.5, 577.5, 493.5, 564.5, 526.5, 538.5, 573.5, 495.5, 618.5, 453.5, 648.5, 418.5, 664.5, 377.5, 675.5, 332.5, 677.5, 294.5, 671.5, 253.5, 655.5, 223.5, 635.5, 192.5, 602.5, 170.5, 562.5, 158.5, 514.5, 158.5, 475.5, 165.5, 438.5, 184.5, 397.5, 208.5, 365.5, 231.5, 347.5, 246.5, 338.5]]}], &#39;file_name&#39;: &#39;./balloon/train/2685563244_b0d5f7eb67_b.jpg&#39;, &#39;height&#39;: 683, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [429, 47, 985, 573], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[500.5, 517.5, 458.5, 455.5, 439.5, 394.5, 429.5, 332.5, 431.5, 283.5, 443.5, 231.5, 461.5, 179.5, 479.5, 150.5, 528.5, 106.5, 566.5, 79.5, 617.5, 57.5, 669.5, 47.5, 724.5, 51.5, 784.5, 63.5, 840.5, 93.5, 882.5, 127.5, 922.5, 171.5, 945.5, 207.5, 964.5, 256.5, 977.5, 306.5, 985.5, 367.5, 982.5, 423.5, 973.5, 490.5, 961.5, 540.5, 950.5, 573.5, 551.5, 573.5, 521.5, 546.5, 500.5, 517.5]]}], &#39;file_name&#39;: &#39;./balloon/train/2385899600_94b68350af_b.jpg&#39;, &#39;height&#39;: 576, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [905, 190, 1023, 387], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[912.5, 238.5, 924.5, 221.5, 941.5, 204.5, 964.5, 192.5, 983.5, 191.5, 996.5, 190.5, 1008.5, 192.5, 1022.5, 201.5, 1023.5, 330.5, 1013.5, 341.5, 1003.5, 353.5, 996.5, 368.5, 985.5, 387.5, 967.5, 379.5, 940.5, 358.5, 921.5, 334.5, 913.5, 310.5, 907.5, 285.5, 905.5, 270.5, 908.5, 247.5, 912.5, 238.5]]}, {&#39;bbox&#39;: [980, 333, 1024, 514], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[994.5, 469.5, 984.5, 442.5, 981.5, 418.5, 980.5, 401.5, 985.5, 387.5, 994.5, 367.5, 1004.5, 351.5, 1018.5, 338.5, 1023.5, 333.5, 1024.5, 514.5, 1016.5, 502.5, 1003.5, 484.5, 994.5, 469.5]]}], &#39;file_name&#39;: &#39;./balloon/train/2354829160_3f65a6bf6f_b.jpg&#39;, &#39;height&#39;: 681, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [358, 227, 477, 367], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[475.5, 274.5, 477.5, 288.5, 477.5, 304.5, 474.5, 318.5, 468.5, 329.5, 446.5, 352.5, 439.5, 356.5, 433.5, 358.5, 432.5, 362.5, 434.5, 365.5, 434.5, 367.5, 431.5, 367.5, 428.5, 366.5, 427.5, 365.5, 428.5, 364.5, 428.5, 361.5, 428.5, 360.5, 424.5, 359.5, 415.5, 358.5, 406.5, 355.5, 395.5, 350.5, 380.5, 340.5, 369.5, 325.5, 362.5, 310.5, 358.5, 290.5, 360.5, 275.5, 365.5, 262.5, 368.5, 253.5, 373.5, 250.5, 382.5, 243.5, 388.5, 239.5, 391.5, 237.5, 396.5, 235.5, 411.5, 234.5, 415.5, 232.5, 417.5, 229.5, 417.5, 227.5, 424.5, 227.5, 434.5, 231.5, 438.5, 231.5, 441.5, 233.5, 444.5, 234.5, 447.5, 237.5, 451.5, 240.5, 455.5, 243.5, 459.5, 248.5, 467.5, 259.5, 471.5, 267.5, 475.5, 274.5]]}, {&#39;bbox&#39;: [365, 604, 416, 669], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[402.5, 615.5, 408.5, 622.5, 412.5, 632.5, 414.5, 644.5, 416.5, 655.5, 413.5, 661.5, 415.5, 662.5, 416.5, 663.5, 416.5, 665.5, 414.5, 666.5, 410.5, 666.5, 405.5, 668.5, 397.5, 669.5, 385.5, 669.5, 376.5, 668.5, 369.5, 666.5, 370.5, 656.5, 369.5, 641.5, 367.5, 627.5, 365.5, 617.5, 374.5, 604.5, 382.5, 604.5, 394.5, 609.5, 402.5, 615.5]]}, {&#39;bbox&#39;: [437, 605, 498, 666], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[473.5, 606.5, 477.5, 607.5, 486.5, 615.5, 491.5, 621.5, 496.5, 630.5, 498.5, 638.5, 498.5, 647.5, 495.5, 654.5, 495.5, 656.5, 495.5, 657.5, 497.5, 658.5, 497.5, 659.5, 495.5, 660.5, 494.5, 659.5, 494.5, 658.5, 489.5, 661.5, 481.5, 664.5, 474.5, 666.5, 465.5, 665.5, 458.5, 664.5, 453.5, 661.5, 444.5, 654.5, 438.5, 645.5, 437.5, 636.5, 437.5, 628.5, 440.5, 622.5, 445.5, 613.5, 452.5, 609.5, 457.5, 607.5, 463.5, 606.5, 468.5, 605.5, 473.5, 606.5]]}, {&#39;bbox&#39;: [568, 608, 634, 671], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[600.5, 608.5, 609.5, 608.5, 615.5, 611.5, 622.5, 617.5, 628.5, 625.5, 632.5, 635.5, 634.5, 645.5, 633.5, 649.5, 627.5, 658.5, 618.5, 666.5, 609.5, 671.5, 598.5, 671.5, 589.5, 671.5, 582.5, 670.5, 577.5, 667.5, 574.5, 664.5, 572.5, 664.5, 569.5, 661.5, 568.5, 651.5, 568.5, 641.5, 570.5, 631.5, 575.5, 621.5, 581.5, 615.5, 587.5, 612.5, 594.5, 609.5, 600.5, 608.5]]}], &#39;file_name&#39;: &#39;./balloon/train/2311771643_f46392fcc0_b.jpg&#39;, &#39;height&#39;: 681, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [471, 358, 671, 632], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[612.5, 365.5, 626.5, 375.5, 643.5, 390.5, 656.5, 403.5, 668.5, 420.5, 671.5, 449.5, 671.5, 479.5, 661.5, 514.5, 643.5, 541.5, 623.5, 566.5, 599.5, 589.5, 575.5, 607.5, 556.5, 614.5, 544.5, 616.5, 542.5, 622.5, 544.5, 627.5, 538.5, 632.5, 533.5, 625.5, 537.5, 620.5, 537.5, 615.5, 523.5, 609.5, 512.5, 598.5, 502.5, 579.5, 488.5, 549.5, 474.5, 506.5, 471.5, 476.5, 471.5, 451.5, 477.5, 425.5, 490.5, 399.5, 505.5, 381.5, 526.5, 368.5, 544.5, 360.5, 566.5, 358.5, 589.5, 358.5, 612.5, 365.5]]}, {&#39;bbox&#39;: [318, 456, 503, 681], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[370.5, 464.5, 390.5, 457.5, 415.5, 456.5, 440.5, 464.5, 457.5, 472.5, 469.5, 484.5, 472.5, 490.5, 473.5, 500.5, 478.5, 519.5, 486.5, 542.5, 493.5, 561.5, 503.5, 581.5, 494.5, 606.5, 486.5, 626.5, 472.5, 653.5, 463.5, 665.5, 445.5, 676.5, 433.5, 679.5, 410.5, 681.5, 394.5, 678.5, 377.5, 665.5, 359.5, 647.5, 340.5, 623.5, 325.5, 593.5, 320.5, 569.5, 318.5, 547.5, 318.5, 523.5, 332.5, 498.5, 349.5, 478.5, 370.5, 464.5]]}, {&#39;bbox&#39;: [224, 569, 378, 730], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[227.5, 629.5, 236.5, 608.5, 250.5, 590.5, 271.5, 576.5, 291.5, 569.5, 314.5, 569.5, 320.5, 570.5, 325.5, 595.5, 338.5, 622.5, 353.5, 639.5, 370.5, 657.5, 378.5, 666.5, 374.5, 685.5, 364.5, 700.5, 354.5, 717.5, 349.5, 723.5, 328.5, 716.5, 305.5, 713.5, 288.5, 714.5, 270.5, 720.5, 252.5, 730.5, 244.5, 718.5, 233.5, 699.5, 227.5, 678.5, 224.5, 656.5, 227.5, 629.5]]}, {&#39;bbox&#39;: [209, 713, 398, 937], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[209.5, 817.5, 213.5, 789.5, 223.5, 764.5, 234.5, 744.5, 250.5, 731.5, 270.5, 720.5, 297.5, 713.5, 319.5, 715.5, 343.5, 720.5, 363.5, 734.5, 381.5, 757.5, 393.5, 781.5, 396.5, 798.5, 398.5, 834.5, 391.5, 858.5, 383.5, 878.5, 376.5, 894.5, 366.5, 914.5, 349.5, 932.5, 331.5, 929.5, 311.5, 923.5, 295.5, 922.5, 286.5, 922.5, 276.5, 925.5, 269.5, 930.5, 262.5, 937.5, 250.5, 924.5, 233.5, 901.5, 222.5, 879.5, 214.5, 856.5, 210.5, 835.5, 209.5, 817.5]]}], &#39;file_name&#39;: &#39;./balloon/train/1297451346_5b92bdac08_b.jpg&#39;, &#39;height&#39;: 1024, &#39;width&#39;: 768}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [553, 18, 643, 129], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[620.5, 22.5, 630.5, 30.5, 638.5, 44.5, 643.5, 59.5, 643.5, 72.5, 637.5, 90.5, 627.5, 102.5, 617.5, 113.5, 602.5, 119.5, 590.5, 125.5, 581.5, 127.5, 576.5, 129.5, 572.5, 127.5, 569.5, 120.5, 563.5, 105.5, 557.5, 92.5, 553.5, 73.5, 556.5, 59.5, 560.5, 45.5, 571.5, 32.5, 580.5, 24.5, 593.5, 18.5, 607.5, 18.5, 620.5, 22.5]]}], &#39;file_name&#39;: &#39;./balloon/train/873768102_7d931e5fa3_b.jpg&#39;, &#39;height&#39;: 856, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [494, 305, 542, 369], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[513.5, 305.5, 520.5, 305.5, 530.5, 309.5, 539.5, 317.5, 541.5, 327.5, 542.5, 338.5, 537.5, 349.5, 530.5, 359.5, 524.5, 363.5, 527.5, 368.5, 523.5, 369.5, 523.5, 364.5, 518.5, 364.5, 510.5, 358.5, 501.5, 351.5, 497.5, 343.5, 494.5, 335.5, 494.5, 324.5, 497.5, 315.5, 504.5, 308.5, 513.5, 305.5]]}], &#39;file_name&#39;: &#39;./balloon/train/699765866_abaad7274d_b.jpg&#39;, &#39;height&#39;: 683, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [341, 368, 488, 528], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[400.5, 368.5, 424.5, 368.5, 450.5, 377.5, 444.5, 391.5, 456.5, 384.5, 470.5, 397.5, 488.5, 435.5, 485.5, 469.5, 473.5, 497.5, 449.5, 519.5, 423.5, 528.5, 391.5, 522.5, 361.5, 501.5, 342.5, 466.5, 341.5, 424.5, 356.5, 397.5, 373.5, 380.5, 400.5, 368.5]]}], &#39;file_name&#39;: &#39;./balloon/train/605521662_a470fef77f_b.jpg&#39;, &#39;height&#39;: 1024, &#39;width&#39;: 768}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [614, 374, 685, 438], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[640.5, 374.5, 652.5, 374.5, 669.5, 383.5, 677.5, 395.5, 683.5, 410.5, 685.5, 422.5, 683.5, 428.5, 685.5, 430.5, 685.5, 433.5, 682.5, 431.5, 679.5, 434.5, 664.5, 437.5, 648.5, 438.5, 633.5, 433.5, 624.5, 425.5, 619.5, 419.5, 615.5, 411.5, 614.5, 398.5, 616.5, 391.5, 621.5, 383.5, 629.5, 378.5, 640.5, 374.5]]}], &#39;file_name&#39;: &#39;./balloon/train/518678836_94d58e3839_b.jpg&#39;, &#39;height&#39;: 683, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [678, 102, 793, 191], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[744.5, 107.5, 761.5, 118.5, 776.5, 137.5, 787.5, 154.5, 793.5, 168.5, 790.5, 183.5, 792.5, 189.5, 790.5, 191.5, 787.5, 187.5, 785.5, 188.5, 772.5, 181.5, 752.5, 180.5, 742.5, 185.5, 734.5, 190.5, 718.5, 188.5, 709.5, 184.5, 697.5, 174.5, 687.5, 167.5, 678.5, 152.5, 678.5, 135.5, 682.5, 123.5, 690.5, 112.5, 702.5, 105.5, 718.5, 102.5, 732.5, 102.5, 744.5, 107.5]]}, {&#39;bbox&#39;: [720, 180, 799, 258], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[797.5, 225.5, 793.5, 238.5, 784.5, 248.5, 770.5, 255.5, 758.5, 258.5, 745.5, 256.5, 731.5, 248.5, 722.5, 235.5, 720.5, 217.5, 725.5, 199.5, 734.5, 189.5, 753.5, 180.5, 775.5, 182.5, 785.5, 188.5, 793.5, 200.5, 799.5, 211.5, 797.5, 225.5]]}, {&#39;bbox&#39;: [629, 166, 723, 246], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[718.5, 240.5, 704.5, 245.5, 693.5, 241.5, 683.5, 241.5, 671.5, 244.5, 667.5, 246.5, 654.5, 243.5, 645.5, 235.5, 642.5, 224.5, 635.5, 213.5, 629.5, 206.5, 629.5, 198.5, 630.5, 190.5, 637.5, 181.5, 643.5, 174.5, 655.5, 167.5, 670.5, 166.5, 681.5, 167.5, 694.5, 172.5, 708.5, 183.5, 715.5, 193.5, 720.5, 204.5, 723.5, 208.5, 720.5, 219.5, 722.5, 232.5, 722.5, 236.5, 718.5, 240.5]]}, {&#39;bbox&#39;: [578, 131, 686, 189], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[624.5, 131.5, 635.5, 132.5, 646.5, 136.5, 656.5, 141.5, 667.5, 148.5, 676.5, 155.5, 683.5, 165.5, 686.5, 168.5, 666.5, 165.5, 652.5, 168.5, 642.5, 174.5, 631.5, 189.5, 617.5, 185.5, 599.5, 180.5, 588.5, 175.5, 578.5, 173.5, 579.5, 160.5, 585.5, 147.5, 595.5, 139.5, 605.5, 134.5, 615.5, 131.5, 624.5, 131.5]]}, {&#39;bbox&#39;: [646, 242, 725, 325], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[725.5, 274.5, 724.5, 288.5, 718.5, 305.5, 709.5, 313.5, 697.5, 322.5, 685.5, 325.5, 675.5, 323.5, 659.5, 316.5, 650.5, 304.5, 646.5, 290.5, 646.5, 273.5, 653.5, 261.5, 661.5, 251.5, 671.5, 245.5, 685.5, 242.5, 699.5, 244.5, 711.5, 249.5, 721.5, 260.5, 725.5, 274.5]]}, {&#39;bbox&#39;: [517, 172, 631, 248], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[543.5, 175.5, 558.5, 172.5, 579.5, 172.5, 599.5, 179.5, 631.5, 189.5, 629.5, 205.5, 616.5, 200.5, 597.5, 199.5, 580.5, 204.5, 567.5, 214.5, 562.5, 226.5, 559.5, 240.5, 559.5, 248.5, 540.5, 245.5, 527.5, 237.5, 518.5, 223.5, 517.5, 202.5, 523.5, 188.5, 543.5, 175.5]]}, {&#39;bbox&#39;: [559, 198, 645, 285], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[645.5, 245.5, 639.5, 261.5, 628.5, 276.5, 610.5, 285.5, 591.5, 285.5, 578.5, 274.5, 568.5, 271.5, 562.5, 256.5, 559.5, 245.5, 562.5, 227.5, 569.5, 213.5, 580.5, 204.5, 593.5, 199.5, 604.5, 198.5, 614.5, 200.5, 628.5, 204.5, 635.5, 214.5, 644.5, 231.5, 645.5, 245.5]]}, {&#39;bbox&#39;: [591, 259, 651, 319], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[643.5, 309.5, 633.5, 317.5, 618.5, 315.5, 607.5, 316.5, 601.5, 319.5, 601.5, 306.5, 596.5, 294.5, 591.5, 286.5, 604.5, 285.5, 617.5, 282.5, 629.5, 275.5, 638.5, 263.5, 641.5, 259.5, 650.5, 266.5, 647.5, 275.5, 646.5, 288.5, 651.5, 305.5, 643.5, 309.5]]}, {&#39;bbox&#39;: [577, 315, 659, 404], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[654.5, 335.5, 658.5, 349.5, 659.5, 365.5, 655.5, 380.5, 642.5, 397.5, 627.5, 404.5, 607.5, 403.5, 596.5, 398.5, 586.5, 388.5, 580.5, 375.5, 577.5, 365.5, 577.5, 354.5, 589.5, 346.5, 598.5, 333.5, 602.5, 319.5, 612.5, 315.5, 623.5, 315.5, 635.5, 318.5, 645.5, 326.5, 654.5, 335.5]]}, {&#39;bbox&#39;: [515, 270, 600, 357], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[545.5, 273.5, 558.5, 270.5, 568.5, 270.5, 579.5, 275.5, 591.5, 285.5, 600.5, 304.5, 600.5, 321.5, 598.5, 335.5, 587.5, 348.5, 576.5, 355.5, 562.5, 357.5, 545.5, 355.5, 529.5, 345.5, 520.5, 330.5, 515.5, 312.5, 520.5, 296.5, 529.5, 282.5, 545.5, 273.5]]}, {&#39;bbox&#39;: [457, 242, 567, 297], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[516.5, 242.5, 529.5, 244.5, 536.5, 244.5, 550.5, 246.5, 561.5, 250.5, 564.5, 260.5, 567.5, 270.5, 556.5, 270.5, 545.5, 273.5, 530.5, 281.5, 525.5, 288.5, 519.5, 297.5, 503.5, 292.5, 484.5, 288.5, 468.5, 289.5, 457.5, 291.5, 460.5, 277.5, 466.5, 266.5, 474.5, 257.5, 486.5, 249.5, 498.5, 243.5, 516.5, 242.5]]}, {&#39;bbox&#39;: [414, 288, 524, 379], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[435.5, 301.5, 444.5, 296.5, 453.5, 291.5, 466.5, 290.5, 480.5, 288.5, 490.5, 288.5, 505.5, 293.5, 519.5, 296.5, 517.5, 306.5, 515.5, 315.5, 520.5, 328.5, 524.5, 336.5, 516.5, 344.5, 508.5, 355.5, 496.5, 365.5, 482.5, 373.5, 471.5, 377.5, 457.5, 379.5, 444.5, 378.5, 429.5, 369.5, 420.5, 361.5, 415.5, 348.5, 414.5, 330.5, 417.5, 321.5, 421.5, 313.5, 435.5, 301.5]]}, {&#39;bbox&#39;: [488, 352, 576, 442], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[576.5, 383.5, 574.5, 399.5, 568.5, 414.5, 562.5, 425.5, 550.5, 433.5, 542.5, 439.5, 532.5, 442.5, 516.5, 441.5, 505.5, 436.5, 494.5, 426.5, 488.5, 409.5, 488.5, 400.5, 490.5, 389.5, 498.5, 373.5, 505.5, 367.5, 516.5, 360.5, 526.5, 355.5, 537.5, 352.5, 540.5, 352.5, 548.5, 356.5, 560.5, 357.5, 567.5, 357.5, 574.5, 364.5, 576.5, 378.5, 576.5, 383.5]]}, {&#39;bbox&#39;: [388, 334, 502, 412], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[459.5, 412.5, 448.5, 411.5, 436.5, 411.5, 425.5, 408.5, 413.5, 403.5, 401.5, 396.5, 390.5, 379.5, 388.5, 365.5, 390.5, 354.5, 397.5, 343.5, 405.5, 337.5, 413.5, 334.5, 414.5, 348.5, 420.5, 361.5, 430.5, 369.5, 446.5, 379.5, 462.5, 379.5, 480.5, 374.5, 493.5, 367.5, 498.5, 363.5, 502.5, 368.5, 495.5, 378.5, 491.5, 388.5, 488.5, 400.5, 487.5, 407.5, 474.5, 408.5, 459.5, 412.5]]}, {&#39;bbox&#39;: [322, 400, 426, 475], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[385.5, 405.5, 394.5, 410.5, 406.5, 419.5, 415.5, 428.5, 423.5, 438.5, 424.5, 444.5, 426.5, 448.5, 425.5, 451.5, 422.5, 453.5, 416.5, 461.5, 404.5, 468.5, 388.5, 474.5, 368.5, 475.5, 350.5, 472.5, 338.5, 465.5, 327.5, 454.5, 322.5, 444.5, 322.5, 431.5, 327.5, 419.5, 336.5, 408.5, 350.5, 403.5, 365.5, 400.5, 377.5, 402.5, 385.5, 405.5]]}, {&#39;bbox&#39;: [287, 472, 363, 540], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[307.5, 478.5, 319.5, 472.5, 336.5, 474.5, 350.5, 477.5, 359.5, 486.5, 362.5, 491.5, 363.5, 499.5, 359.5, 511.5, 354.5, 521.5, 346.5, 529.5, 334.5, 536.5, 325.5, 540.5, 311.5, 538.5, 300.5, 535.5, 292.5, 525.5, 287.5, 516.5, 287.5, 503.5, 290.5, 492.5, 299.5, 482.5, 307.5, 478.5]]}], &#39;file_name&#39;: &#39;./balloon/train/489752654_777853a0ba_b.jpg&#39;, &#39;height&#39;: 803, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [494, 565, 674, 708], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[516.5, 601.5, 531.5, 588.5, 547.5, 577.5, 563.5, 572.5, 575.5, 568.5, 593.5, 565.5, 610.5, 566.5, 626.5, 571.5, 645.5, 582.5, 660.5, 597.5, 667.5, 610.5, 673.5, 626.5, 674.5, 645.5, 671.5, 659.5, 664.5, 674.5, 651.5, 689.5, 635.5, 699.5, 613.5, 707.5, 590.5, 708.5, 569.5, 703.5, 554.5, 697.5, 538.5, 686.5, 526.5, 675.5, 512.5, 660.5, 504.5, 644.5, 499.5, 636.5, 495.5, 633.5, 494.5, 629.5, 494.5, 622.5, 497.5, 621.5, 501.5, 621.5, 505.5, 614.5, 511.5, 605.5, 516.5, 601.5]]}], &#39;file_name&#39;: &#39;./balloon/train/485227412_e335662bb5_b.jpg&#39;, &#39;height&#39;: 768, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [2, 0, 171, 295], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[67.5, 15.5, 105.5, 42.5, 137.5, 72.5, 163.5, 117.5, 169.5, 144.5, 171.5, 204.5, 161.5, 247.5, 137.5, 288.5, 87.5, 274.5, 44.5, 278.5, 2.5, 295.5, 2.5, 0.5, 32.5, 0.5, 57.5, 5.5, 67.5, 15.5]]}, {&#39;bbox&#39;: [0, 273, 230, 563], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[155.5, 298.5, 185.5, 318.5, 207.5, 347.5, 222.5, 373.5, 230.5, 409.5, 230.5, 442.5, 219.5, 475.5, 204.5, 503.5, 185.5, 524.5, 150.5, 550.5, 113.5, 561.5, 69.5, 563.5, 32.5, 557.5, 0.5, 540.5, 2.5, 295.5, 36.5, 280.5, 57.5, 275.5, 82.5, 273.5, 107.5, 277.5, 130.5, 285.5, 155.5, 298.5]]}, {&#39;bbox&#39;: [1, 554, 172, 781], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[161.5, 713.5, 150.5, 729.5, 136.5, 745.5, 112.5, 762.5, 65.5, 781.5, 26.5, 781.5, 1.5, 770.5, 1.5, 560.5, 18.5, 554.5, 23.5, 554.5, 42.5, 560.5, 67.5, 562.5, 93.5, 563.5, 110.5, 561.5, 129.5, 557.5, 139.5, 561.5, 158.5, 576.5, 154.5, 592.5, 154.5, 598.5, 153.5, 628.5, 160.5, 665.5, 172.5, 688.5, 161.5, 713.5]]}, {&#39;bbox&#39;: [1, 764, 109, 987], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[72.5, 819.5, 61.5, 854.5, 64.5, 886.5, 69.5, 915.5, 96.5, 959.5, 60.5, 978.5, 1.5, 987.5, 3.5, 773.5, 26.5, 782.5, 64.5, 782.5, 109.5, 764.5, 83.5, 793.5, 72.5, 819.5]]}, {&#39;bbox&#39;: [192, 327, 263, 432], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[241.5, 359.5, 253.5, 381.5, 263.5, 417.5, 262.5, 432.5, 244.5, 424.5, 230.5, 420.5, 226.5, 388.5, 215.5, 358.5, 200.5, 340.5, 192.5, 327.5, 214.5, 336.5, 241.5, 359.5]]}, {&#39;bbox&#39;: [129, 421, 299, 574], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[279.5, 444.5, 293.5, 457.5, 299.5, 466.5, 271.5, 471.5, 237.5, 485.5, 211.5, 500.5, 188.5, 522.5, 176.5, 537.5, 166.5, 559.5, 159.5, 574.5, 146.5, 567.5, 129.5, 557.5, 153.5, 548.5, 179.5, 527.5, 199.5, 509.5, 215.5, 486.5, 228.5, 455.5, 230.5, 421.5, 249.5, 425.5, 265.5, 433.5, 279.5, 444.5]]}, {&#39;bbox&#39;: [60, 726, 335, 991], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[330.5, 877.5, 318.5, 912.5, 300.5, 936.5, 279.5, 958.5, 252.5, 977.5, 215.5, 988.5, 172.5, 991.5, 135.5, 984.5, 108.5, 971.5, 88.5, 947.5, 71.5, 919.5, 63.5, 879.5, 60.5, 850.5, 73.5, 813.5, 91.5, 787.5, 111.5, 764.5, 137.5, 745.5, 169.5, 731.5, 208.5, 726.5, 227.5, 739.5, 249.5, 748.5, 283.5, 757.5, 293.5, 757.5, 311.5, 784.5, 330.5, 824.5, 335.5, 853.5, 330.5, 877.5]]}, {&#39;bbox&#39;: [284, 831, 382, 956], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[369.5, 904.5, 350.5, 927.5, 331.5, 943.5, 306.5, 952.5, 284.5, 956.5, 304.5, 932.5, 322.5, 903.5, 332.5, 870.5, 335.5, 846.5, 332.5, 831.5, 351.5, 845.5, 373.5, 859.5, 382.5, 863.5, 377.5, 885.5, 369.5, 904.5]]}, {&#39;bbox&#39;: [294, 624, 570, 872], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[551.5, 692.5, 564.5, 721.5, 570.5, 758.5, 560.5, 796.5, 544.5, 820.5, 520.5, 846.5, 486.5, 862.5, 455.5, 870.5, 415.5, 872.5, 383.5, 863.5, 356.5, 849.5, 332.5, 829.5, 320.5, 805.5, 311.5, 782.5, 294.5, 758.5, 318.5, 758.5, 345.5, 754.5, 373.5, 741.5, 403.5, 722.5, 426.5, 698.5, 443.5, 668.5, 451.5, 645.5, 455.5, 624.5, 487.5, 634.5, 518.5, 654.5, 541.5, 676.5, 551.5, 692.5]]}, {&#39;bbox&#39;: [153, 466, 454, 757], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[339.5, 471.5, 354.5, 475.5, 382.5, 488.5, 407.5, 506.5, 437.5, 538.5, 453.5, 578.5, 454.5, 624.5, 443.5, 672.5, 424.5, 700.5, 400.5, 722.5, 365.5, 745.5, 335.5, 757.5, 280.5, 756.5, 229.5, 740.5, 191.5, 711.5, 165.5, 674.5, 153.5, 625.5, 153.5, 593.5, 161.5, 568.5, 177.5, 538.5, 204.5, 506.5, 236.5, 485.5, 275.5, 471.5, 308.5, 466.5, 328.5, 469.5, 339.5, 471.5]]}, {&#39;bbox&#39;: [365, 368, 662, 627], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[652.5, 445.5, 662.5, 479.5, 660.5, 510.5, 648.5, 543.5, 622.5, 581.5, 577.5, 609.5, 537.5, 627.5, 491.5, 627.5, 456.5, 621.5, 454.5, 576.5, 436.5, 536.5, 405.5, 505.5, 377.5, 486.5, 365.5, 476.5, 389.5, 432.5, 417.5, 406.5, 458.5, 396.5, 500.5, 377.5, 515.5, 368.5, 556.5, 370.5, 591.5, 383.5, 631.5, 409.5, 652.5, 445.5]]}, {&#39;bbox&#39;: [265, 55, 607, 410], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[601.5, 253.5, 584.5, 297.5, 562.5, 325.5, 530.5, 357.5, 489.5, 383.5, 450.5, 400.5, 415.5, 407.5, 376.5, 410.5, 340.5, 401.5, 311.5, 370.5, 288.5, 330.5, 273.5, 290.5, 265.5, 247.5, 266.5, 210.5, 279.5, 167.5, 303.5, 124.5, 330.5, 96.5, 361.5, 76.5, 399.5, 60.5, 438.5, 55.5, 478.5, 55.5, 516.5, 68.5, 548.5, 86.5, 581.5, 118.5, 595.5, 148.5, 607.5, 187.5, 607.5, 226.5, 601.5, 253.5]]}], &#39;file_name&#39;: &#39;./balloon/train/351678851_e2aeebdafd_b.jpg&#39;, &#39;height&#39;: 1024, &#39;width&#39;: 768}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [178, 62, 430, 356], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[221.5, 91.5, 244.5, 75.5, 273.5, 66.5, 302.5, 62.5, 324.5, 64.5, 350.5, 72.5, 373.5, 87.5, 390.5, 99.5, 401.5, 113.5, 414.5, 130.5, 424.5, 154.5, 429.5, 189.5, 430.5, 217.5, 420.5, 256.5, 408.5, 281.5, 396.5, 300.5, 373.5, 320.5, 356.5, 334.5, 342.5, 341.5, 329.5, 345.5, 336.5, 346.5, 336.5, 348.5, 331.5, 354.5, 326.5, 356.5, 321.5, 356.5, 317.5, 348.5, 322.5, 347.5, 321.5, 345.5, 305.5, 344.5, 280.5, 335.5, 252.5, 321.5, 236.5, 309.5, 219.5, 294.5, 203.5, 274.5, 192.5, 255.5, 187.5, 238.5, 180.5, 221.5, 178.5, 194.5, 179.5, 164.5, 184.5, 142.5, 196.5, 121.5, 207.5, 105.5, 221.5, 91.5]]}], &#39;file_name&#39;: &#39;./balloon/train/332344155_71be3a3b22_b.jpg&#39;, &#39;height&#39;: 852, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [463, 272, 759, 563], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[741.5, 345.5, 757.5, 387.5, 759.5, 429.5, 747.5, 474.5, 728.5, 507.5, 704.5, 531.5, 679.5, 547.5, 645.5, 561.5, 609.5, 563.5, 577.5, 560.5, 549.5, 549.5, 516.5, 532.5, 496.5, 508.5, 472.5, 475.5, 464.5, 437.5, 463.5, 393.5, 479.5, 347.5, 502.5, 313.5, 527.5, 295.5, 561.5, 279.5, 596.5, 272.5, 632.5, 272.5, 666.5, 282.5, 686.5, 292.5, 716.5, 310.5, 733.5, 330.5, 741.5, 345.5]]}, {&#39;bbox&#39;: [394, 138, 679, 391], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[537.5, 138.5, 570.5, 141.5, 600.5, 153.5, 622.5, 167.5, 641.5, 185.5, 657.5, 204.5, 670.5, 226.5, 675.5, 244.5, 679.5, 263.5, 678.5, 286.5, 659.5, 279.5, 633.5, 271.5, 612.5, 270.5, 582.5, 273.5, 552.5, 282.5, 528.5, 294.5, 504.5, 309.5, 491.5, 332.5, 478.5, 350.5, 470.5, 373.5, 464.5, 391.5, 460.5, 372.5, 439.5, 341.5, 420.5, 326.5, 407.5, 318.5, 397.5, 312.5, 394.5, 283.5, 398.5, 251.5, 403.5, 232.5, 415.5, 205.5, 440.5, 175.5, 463.5, 156.5, 489.5, 143.5, 515.5, 138.5, 537.5, 138.5]]}, {&#39;bbox&#39;: [114, 278, 478, 612], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[229.5, 287.5, 262.5, 279.5, 301.5, 278.5, 326.5, 280.5, 345.5, 286.5, 368.5, 296.5, 391.5, 307.5, 427.5, 332.5, 446.5, 351.5, 455.5, 366.5, 461.5, 377.5, 463.5, 391.5, 464.5, 410.5, 463.5, 435.5, 470.5, 465.5, 473.5, 477.5, 478.5, 486.5, 474.5, 502.5, 462.5, 523.5, 453.5, 541.5, 426.5, 567.5, 393.5, 587.5, 361.5, 601.5, 329.5, 611.5, 293.5, 612.5, 255.5, 608.5, 223.5, 599.5, 189.5, 581.5, 166.5, 560.5, 145.5, 532.5, 123.5, 497.5, 115.5, 468.5, 114.5, 440.5, 116.5, 413.5, 128.5, 381.5, 143.5, 349.5, 164.5, 325.5, 190.5, 305.5, 211.5, 293.5, 229.5, 287.5]]}], &#39;file_name&#39;: &#39;./balloon/train/321888854_3723b6f10b_b.jpg&#39;, &#39;height&#39;: 768, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [53, 544, 648, 1024], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[119.5, 689.5, 161.5, 645.5, 226.5, 593.5, 278.5, 571.5, 335.5, 556.5, 427.5, 544.5, 491.5, 554.5, 543.5, 560.5, 553.5, 574.5, 565.5, 577.5, 565.5, 565.5, 578.5, 596.5, 586.5, 605.5, 601.5, 605.5, 609.5, 621.5, 625.5, 625.5, 628.5, 619.5, 637.5, 628.5, 646.5, 643.5, 648.5, 683.5, 634.5, 791.5, 616.5, 884.5, 581.5, 949.5, 520.5, 1024.5, 112.5, 1024.5, 79.5, 979.5, 53.5, 898.5, 64.5, 813.5, 82.5, 750.5, 119.5, 689.5]]}, {&#39;bbox&#39;: [649, 515, 768, 970], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[677.5, 831.5, 656.5, 758.5, 649.5, 697.5, 649.5, 633.5, 652.5, 586.5, 670.5, 554.5, 673.5, 542.5, 667.5, 527.5, 689.5, 531.5, 692.5, 537.5, 719.5, 525.5, 751.5, 515.5, 768.5, 516.5, 766.5, 970.5, 720.5, 911.5, 677.5, 831.5]]}], &#39;file_name&#39;: &#39;./balloon/train/155815494_800fc9aa32_b.jpg&#39;, &#39;height&#39;: 1024, &#39;width&#39;: 768}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [602, 0, 655, 43], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[655.5, 20.5, 650.5, 33.5, 643.5, 39.5, 638.5, 42.5, 628.5, 43.5, 619.5, 42.5, 609.5, 34.5, 604.5, 20.5, 602.5, 13.5, 606.5, 1.5, 652.5, 0.5, 655.5, 9.5, 655.5, 20.5]]}, {&#39;bbox&#39;: [597, 143, 654, 226], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[637.5, 145.5, 648.5, 156.5, 654.5, 171.5, 653.5, 183.5, 648.5, 198.5, 642.5, 215.5, 638.5, 221.5, 632.5, 224.5, 632.5, 226.5, 625.5, 226.5, 613.5, 216.5, 603.5, 200.5, 598.5, 190.5, 598.5, 176.5, 597.5, 164.5, 603.5, 155.5, 610.5, 148.5, 617.5, 143.5, 628.5, 143.5, 637.5, 145.5]]}, {&#39;bbox&#39;: [476, 134, 567, 234], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[548.5, 143.5, 559.5, 155.5, 565.5, 168.5, 567.5, 182.5, 563.5, 196.5, 557.5, 210.5, 543.5, 225.5, 524.5, 233.5, 509.5, 234.5, 503.5, 232.5, 497.5, 230.5, 493.5, 228.5, 481.5, 212.5, 476.5, 192.5, 478.5, 173.5, 484.5, 159.5, 495.5, 146.5, 509.5, 138.5, 527.5, 134.5, 540.5, 138.5, 548.5, 143.5]]}, {&#39;bbox&#39;: [383, 84, 442, 150], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[387.5, 104.5, 393.5, 96.5, 403.5, 88.5, 414.5, 84.5, 421.5, 85.5, 434.5, 91.5, 438.5, 100.5, 442.5, 110.5, 442.5, 120.5, 438.5, 134.5, 429.5, 145.5, 416.5, 150.5, 405.5, 150.5, 393.5, 145.5, 385.5, 135.5, 383.5, 127.5, 383.5, 116.5, 387.5, 104.5]]}, {&#39;bbox&#39;: [256, 1, 325, 54], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[323.5, 26.5, 318.5, 39.5, 311.5, 46.5, 299.5, 52.5, 279.5, 54.5, 267.5, 49.5, 258.5, 38.5, 256.5, 25.5, 256.5, 14.5, 262.5, 1.5, 323.5, 1.5, 325.5, 14.5, 323.5, 26.5]]}, {&#39;bbox&#39;: [324, 0, 385, 38], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[384.5, 1.5, 385.5, 10.5, 381.5, 24.5, 372.5, 34.5, 361.5, 38.5, 349.5, 37.5, 338.5, 31.5, 328.5, 20.5, 326.5, 14.5, 324.5, 6.5, 324.5, 0.5, 384.5, 1.5]]}, {&#39;bbox&#39;: [1, 122, 34, 176], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[22.5, 131.5, 28.5, 136.5, 34.5, 147.5, 34.5, 161.5, 28.5, 171.5, 17.5, 176.5, 4.5, 176.5, 1.5, 174.5, 1.5, 122.5, 8.5, 123.5, 16.5, 127.5, 22.5, 131.5]]}, {&#39;bbox&#39;: [56, 51, 97, 90], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[61.5, 58.5, 66.5, 53.5, 74.5, 51.5, 82.5, 51.5, 89.5, 55.5, 95.5, 63.5, 97.5, 71.5, 95.5, 81.5, 87.5, 88.5, 77.5, 90.5, 67.5, 89.5, 59.5, 81.5, 56.5, 72.5, 57.5, 63.5, 61.5, 58.5]]}, {&#39;bbox&#39;: [76, 67, 118, 105], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[112.5, 74.5, 118.5, 84.5, 117.5, 96.5, 112.5, 102.5, 102.5, 105.5, 91.5, 104.5, 83.5, 99.5, 76.5, 90.5, 87.5, 88.5, 95.5, 82.5, 98.5, 71.5, 97.5, 67.5, 103.5, 68.5, 112.5, 74.5]]}, {&#39;bbox&#39;: [421, 490, 443, 551], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[432.5, 495.5, 441.5, 508.5, 443.5, 524.5, 438.5, 537.5, 428.5, 548.5, 424.5, 551.5, 421.5, 521.5, 421.5, 501.5, 423.5, 490.5, 429.5, 490.5, 432.5, 495.5]]}, {&#39;bbox&#39;: [274, 432, 286, 478], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[284.5, 474.5, 274.5, 459.5, 277.5, 443.5, 283.5, 432.5, 284.5, 443.5, 285.5, 446.5, 283.5, 454.5, 286.5, 469.5, 286.5, 478.5, 284.5, 474.5]]}], &#39;file_name&#39;: &#39;./balloon/train/154446334_5d41cd1375_b.jpg&#39;, &#39;height&#39;: 768, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [479, 203, 595, 308], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[480.5, 250.5, 490.5, 236.5, 507.5, 215.5, 529.5, 204.5, 548.5, 203.5, 567.5, 210.5, 582.5, 220.5, 592.5, 237.5, 595.5, 253.5, 592.5, 275.5, 580.5, 291.5, 570.5, 300.5, 558.5, 306.5, 552.5, 308.5, 549.5, 292.5, 541.5, 275.5, 527.5, 262.5, 507.5, 253.5, 490.5, 251.5, 479.5, 252.5, 480.5, 250.5]]}, {&#39;bbox&#39;: [438, 251, 551, 360], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[542.5, 335.5, 530.5, 348.5, 515.5, 357.5, 496.5, 360.5, 481.5, 358.5, 466.5, 351.5, 449.5, 335.5, 443.5, 323.5, 438.5, 311.5, 438.5, 296.5, 443.5, 279.5, 449.5, 269.5, 460.5, 261.5, 475.5, 253.5, 492.5, 251.5, 513.5, 255.5, 527.5, 263.5, 540.5, 273.5, 548.5, 292.5, 551.5, 306.5, 549.5, 322.5, 542.5, 335.5]]}, {&#39;bbox&#39;: [370, 156, 478, 276], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[410.5, 156.5, 431.5, 156.5, 448.5, 163.5, 462.5, 173.5, 470.5, 184.5, 476.5, 200.5, 478.5, 219.5, 475.5, 236.5, 471.5, 248.5, 468.5, 255.5, 468.5, 256.5, 457.5, 261.5, 449.5, 269.5, 444.5, 276.5, 432.5, 276.5, 421.5, 275.5, 413.5, 273.5, 398.5, 263.5, 386.5, 250.5, 376.5, 236.5, 371.5, 221.5, 370.5, 199.5, 375.5, 183.5, 383.5, 173.5, 394.5, 163.5, 410.5, 156.5]]}, {&#39;bbox&#39;: [246, 188, 375, 314], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[350.5, 204.5, 361.5, 216.5, 368.5, 228.5, 375.5, 245.5, 375.5, 260.5, 370.5, 277.5, 362.5, 292.5, 353.5, 302.5, 341.5, 309.5, 317.5, 314.5, 296.5, 312.5, 282.5, 309.5, 262.5, 295.5, 253.5, 279.5, 246.5, 261.5, 261.5, 242.5, 276.5, 222.5, 294.5, 193.5, 298.5, 188.5, 315.5, 188.5, 331.5, 192.5, 348.5, 202.5, 350.5, 204.5]]}, {&#39;bbox&#39;: [369, 229, 411, 273], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[383.5, 270.5, 373.5, 269.5, 376.5, 260.5, 375.5, 245.5, 371.5, 234.5, 369.5, 229.5, 373.5, 230.5, 379.5, 241.5, 385.5, 249.5, 392.5, 255.5, 400.5, 265.5, 411.5, 270.5, 403.5, 273.5, 381.5, 270.5, 383.5, 270.5]]}, {&#39;bbox&#39;: [406, 324, 483, 423], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[463.5, 410.5, 446.5, 420.5, 432.5, 423.5, 416.5, 422.5, 406.5, 418.5, 413.5, 401.5, 415.5, 391.5, 430.5, 376.5, 441.5, 359.5, 443.5, 344.5, 443.5, 324.5, 451.5, 337.5, 464.5, 350.5, 477.5, 357.5, 483.5, 360.5, 481.5, 378.5, 476.5, 394.5, 468.5, 406.5, 463.5, 410.5]]}, {&#39;bbox&#39;: [284, 309, 414, 446], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[400.5, 343.5, 407.5, 357.5, 413.5, 374.5, 414.5, 385.5, 414.5, 397.5, 408.5, 415.5, 396.5, 428.5, 376.5, 442.5, 361.5, 446.5, 336.5, 445.5, 317.5, 437.5, 301.5, 423.5, 288.5, 398.5, 284.5, 373.5, 290.5, 348.5, 299.5, 331.5, 314.5, 315.5, 335.5, 309.5, 348.5, 309.5, 367.5, 317.5, 388.5, 328.5, 400.5, 343.5]]}, {&#39;bbox&#39;: [343, 277, 443, 391], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[429.5, 289.5, 436.5, 302.5, 443.5, 325.5, 443.5, 345.5, 436.5, 368.5, 424.5, 383.5, 415.5, 391.5, 415.5, 373.5, 408.5, 356.5, 396.5, 338.5, 382.5, 325.5, 362.5, 315.5, 352.5, 311.5, 343.5, 308.5, 352.5, 301.5, 360.5, 290.5, 369.5, 283.5, 391.5, 279.5, 409.5, 277.5, 422.5, 280.5, 429.5, 289.5]]}, {&#39;bbox&#39;: [151, 263, 284, 365], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[269.5, 335.5, 261.5, 344.5, 241.5, 358.5, 222.5, 365.5, 197.5, 365.5, 179.5, 358.5, 165.5, 348.5, 154.5, 331.5, 151.5, 316.5, 152.5, 295.5, 160.5, 281.5, 169.5, 270.5, 171.5, 269.5, 182.5, 275.5, 201.5, 280.5, 215.5, 281.5, 228.5, 276.5, 238.5, 272.5, 246.5, 263.5, 253.5, 279.5, 261.5, 294.5, 273.5, 303.5, 284.5, 310.5, 278.5, 324.5, 269.5, 335.5]]}, {&#39;bbox&#39;: [147, 76, 314, 281], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[309.5, 165.5, 296.5, 189.5, 269.5, 233.5, 244.5, 264.5, 234.5, 274.5, 215.5, 281.5, 196.5, 279.5, 175.5, 272.5, 165.5, 258.5, 150.5, 235.5, 147.5, 211.5, 150.5, 186.5, 161.5, 162.5, 170.5, 143.5, 189.5, 122.5, 202.5, 104.5, 226.5, 83.5, 237.5, 76.5, 259.5, 77.5, 281.5, 82.5, 295.5, 95.5, 311.5, 124.5, 314.5, 143.5, 309.5, 165.5]]}, {&#39;bbox&#39;: [1, 29, 165, 236], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[130.5, 216.5, 118.5, 223.5, 97.5, 234.5, 75.5, 236.5, 53.5, 235.5, 32.5, 230.5, 16.5, 222.5, 1.5, 211.5, 1.5, 49.5, 24.5, 35.5, 42.5, 35.5, 57.5, 29.5, 77.5, 31.5, 86.5, 38.5, 98.5, 38.5, 116.5, 49.5, 131.5, 61.5, 144.5, 75.5, 154.5, 92.5, 163.5, 113.5, 165.5, 132.5, 162.5, 147.5, 164.5, 154.5, 155.5, 175.5, 147.5, 199.5, 143.5, 202.5, 130.5, 216.5]]}, {&#39;bbox&#39;: [304, 138, 323, 190], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[323.5, 172.5, 322.5, 190.5, 308.5, 188.5, 304.5, 176.5, 311.5, 161.5, 314.5, 145.5, 314.5, 138.5, 318.5, 149.5, 322.5, 162.5, 323.5, 172.5]]}, {&#39;bbox&#39;: [152, 243, 170, 281], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[155.5, 270.5, 152.5, 255.5, 154.5, 243.5, 161.5, 257.5, 170.5, 267.5, 163.5, 276.5, 158.5, 281.5, 155.5, 270.5]]}], &#39;file_name&#39;: &#39;./balloon/train/145053828_e0e748717c_b.jpg&#39;, &#39;height&#39;: 768, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [64, 38, 571, 640], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[156.5, 101.5, 129.5, 137.5, 95.5, 195.5, 71.5, 264.5, 64.5, 336.5, 66.5, 398.5, 87.5, 466.5, 124.5, 531.5, 197.5, 600.5, 251.5, 623.5, 334.5, 640.5, 414.5, 621.5, 466.5, 593.5, 511.5, 547.5, 557.5, 460.5, 571.5, 381.5, 562.5, 299.5, 538.5, 240.5, 502.5, 184.5, 460.5, 135.5, 409.5, 98.5, 347.5, 65.5, 297.5, 49.5, 256.5, 48.5, 244.5, 38.5, 233.5, 42.5, 226.5, 49.5, 226.5, 54.5, 198.5, 69.5, 156.5, 101.5]]}], &#39;file_name&#39;: &#39;./balloon/train/126700562_8e27720147_b.jpg&#39;, &#39;height&#39;: 768, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [600, 218, 777, 433], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[672.5, 219.5, 704.5, 218.5, 733.5, 230.5, 755.5, 249.5, 771.5, 276.5, 777.5, 301.5, 776.5, 322.5, 771.5, 339.5, 766.5, 349.5, 763.5, 348.5, 762.5, 357.5, 756.5, 361.5, 755.5, 364.5, 754.5, 371.5, 753.5, 376.5, 748.5, 383.5, 743.5, 392.5, 739.5, 401.5, 731.5, 393.5, 725.5, 393.5, 723.5, 396.5, 723.5, 399.5, 725.5, 403.5, 728.5, 411.5, 715.5, 419.5, 713.5, 420.5, 710.5, 423.5, 713.5, 427.5, 715.5, 431.5, 713.5, 433.5, 704.5, 430.5, 702.5, 429.5, 705.5, 425.5, 705.5, 423.5, 694.5, 424.5, 670.5, 413.5, 641.5, 391.5, 619.5, 369.5, 605.5, 339.5, 600.5, 314.5, 601.5, 287.5, 608.5, 266.5, 627.5, 241.5, 647.5, 227.5, 672.5, 219.5]]}, {&#39;bbox&#39;: [66, 81, 237, 272], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[101.5, 93.5, 118.5, 85.5, 137.5, 81.5, 155.5, 83.5, 174.5, 86.5, 194.5, 98.5, 214.5, 112.5, 229.5, 137.5, 231.5, 150.5, 237.5, 167.5, 237.5, 188.5, 231.5, 211.5, 223.5, 228.5, 212.5, 242.5, 207.5, 248.5, 199.5, 252.5, 192.5, 256.5, 183.5, 262.5, 175.5, 269.5, 173.5, 272.5, 160.5, 266.5, 147.5, 259.5, 136.5, 255.5, 129.5, 244.5, 115.5, 228.5, 104.5, 215.5, 88.5, 204.5, 77.5, 197.5, 76.5, 196.5, 69.5, 178.5, 66.5, 153.5, 70.5, 136.5, 74.5, 121.5, 84.5, 108.5, 94.5, 98.5, 101.5, 93.5]]}, {&#39;bbox&#39;: [154, 246, 332, 377], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[322.5, 275.5, 325.5, 284.5, 325.5, 296.5, 321.5, 306.5, 321.5, 317.5, 316.5, 331.5, 307.5, 349.5, 295.5, 366.5, 281.5, 375.5, 279.5, 377.5, 272.5, 366.5, 264.5, 354.5, 253.5, 344.5, 237.5, 334.5, 218.5, 326.5, 204.5, 323.5, 191.5, 322.5, 177.5, 323.5, 165.5, 326.5, 157.5, 329.5, 154.5, 317.5, 154.5, 307.5, 158.5, 294.5, 164.5, 283.5, 170.5, 274.5, 180.5, 265.5, 200.5, 253.5, 220.5, 247.5, 249.5, 246.5, 275.5, 250.5, 299.5, 258.5, 314.5, 264.5, 319.5, 271.5, 325.5, 269.5, 329.5, 266.5, 330.5, 265.5, 331.5, 268.5, 332.5, 273.5, 332.5, 278.5, 329.5, 277.5, 325.5, 274.5, 322.5, 275.5]]}, {&#39;bbox&#39;: [228, 56, 372, 230], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[274.5, 222.5, 295.5, 220.5, 306.5, 216.5, 315.5, 212.5, 322.5, 210.5, 328.5, 207.5, 332.5, 206.5, 328.5, 191.5, 328.5, 180.5, 329.5, 166.5, 332.5, 154.5, 338.5, 142.5, 350.5, 131.5, 358.5, 124.5, 372.5, 119.5, 368.5, 102.5, 359.5, 87.5, 350.5, 76.5, 332.5, 65.5, 315.5, 57.5, 298.5, 56.5, 282.5, 57.5, 268.5, 62.5, 249.5, 77.5, 240.5, 91.5, 233.5, 102.5, 230.5, 119.5, 228.5, 133.5, 234.5, 157.5, 240.5, 178.5, 250.5, 203.5, 262.5, 216.5, 267.5, 219.5, 265.5, 222.5, 258.5, 223.5, 257.5, 225.5, 263.5, 230.5, 268.5, 229.5, 268.5, 226.5, 271.5, 222.5, 274.5, 222.5]]}, {&#39;bbox&#39;: [228, 206, 354, 296], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[228.5, 246.5, 231.5, 234.5, 240.5, 219.5, 251.5, 208.5, 252.5, 206.5, 263.5, 217.5, 267.5, 220.5, 264.5, 222.5, 258.5, 223.5, 258.5, 226.5, 263.5, 230.5, 268.5, 230.5, 269.5, 227.5, 272.5, 222.5, 295.5, 221.5, 311.5, 214.5, 322.5, 210.5, 329.5, 207.5, 339.5, 218.5, 348.5, 232.5, 352.5, 244.5, 354.5, 255.5, 353.5, 261.5, 345.5, 267.5, 339.5, 273.5, 331.5, 284.5, 326.5, 293.5, 326.5, 296.5, 326.5, 286.5, 322.5, 276.5, 326.5, 275.5, 332.5, 279.5, 332.5, 271.5, 331.5, 266.5, 325.5, 269.5, 320.5, 271.5, 314.5, 264.5, 296.5, 256.5, 276.5, 250.5, 250.5, 246.5, 234.5, 246.5, 228.5, 246.5]]}, {&#39;bbox&#39;: [130, 254, 153, 346], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[147.5, 274.5, 152.5, 286.5, 153.5, 300.5, 153.5, 313.5, 150.5, 334.5, 132.5, 346.5, 130.5, 346.5, 141.5, 308.5, 140.5, 276.5, 133.5, 254.5, 144.5, 268.5, 147.5, 274.5]]}, {&#39;bbox&#39;: [130, 77, 222, 124], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[130.5, 81.5, 144.5, 77.5, 167.5, 77.5, 186.5, 84.5, 202.5, 94.5, 213.5, 106.5, 222.5, 124.5, 210.5, 110.5, 195.5, 99.5, 175.5, 86.5, 152.5, 82.5, 134.5, 81.5, 130.5, 81.5]]}, {&#39;bbox&#39;: [177, 0, 309, 110], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[186.5, 71.5, 177.5, 45.5, 177.5, 15.5, 183.5, 1.5, 210.5, 0.5, 248.5, 1.5, 297.5, 1.5, 308.5, 27.5, 309.5, 56.5, 287.5, 55.5, 278.5, 58.5, 249.5, 76.5, 244.5, 83.5, 229.5, 109.5, 229.5, 110.5, 223.5, 106.5, 208.5, 96.5, 193.5, 79.5, 186.5, 71.5]]}, {&#39;bbox&#39;: [352, 1, 509, 155], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[494.5, 114.5, 503.5, 95.5, 507.5, 79.5, 509.5, 48.5, 504.5, 26.5, 491.5, 1.5, 363.5, 1.5, 353.5, 23.5, 352.5, 48.5, 353.5, 62.5, 356.5, 80.5, 376.5, 114.5, 380.5, 117.5, 386.5, 115.5, 405.5, 117.5, 417.5, 122.5, 429.5, 130.5, 439.5, 139.5, 450.5, 155.5, 494.5, 114.5]]}, {&#39;bbox&#39;: [328, 115, 450, 243], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[353.5, 234.5, 340.5, 218.5, 332.5, 205.5, 328.5, 190.5, 329.5, 167.5, 334.5, 152.5, 341.5, 139.5, 351.5, 129.5, 366.5, 122.5, 379.5, 116.5, 394.5, 115.5, 412.5, 119.5, 424.5, 127.5, 435.5, 135.5, 447.5, 149.5, 450.5, 155.5, 431.5, 173.5, 427.5, 177.5, 427.5, 192.5, 429.5, 195.5, 434.5, 197.5, 447.5, 200.5, 448.5, 232.5, 445.5, 235.5, 433.5, 229.5, 421.5, 225.5, 401.5, 225.5, 392.5, 227.5, 380.5, 234.5, 366.5, 241.5, 363.5, 243.5, 353.5, 234.5]]}, {&#39;bbox&#39;: [320, 261, 359, 354], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[329.5, 354.5, 323.5, 340.5, 320.5, 328.5, 320.5, 321.5, 322.5, 305.5, 327.5, 292.5, 333.5, 282.5, 343.5, 271.5, 352.5, 264.5, 355.5, 261.5, 354.5, 269.5, 356.5, 274.5, 355.5, 289.5, 359.5, 297.5, 358.5, 310.5, 354.5, 314.5, 359.5, 320.5, 359.5, 327.5, 356.5, 329.5, 359.5, 329.5, 358.5, 334.5, 350.5, 339.5, 350.5, 342.5, 357.5, 337.5, 358.5, 343.5, 352.5, 348.5, 350.5, 350.5, 350.5, 351.5, 339.5, 352.5, 329.5, 354.5]]}, {&#39;bbox&#39;: [106, 323, 286, 494], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[151.5, 333.5, 138.5, 341.5, 129.5, 348.5, 123.5, 358.5, 117.5, 368.5, 111.5, 382.5, 106.5, 401.5, 107.5, 415.5, 110.5, 427.5, 117.5, 445.5, 125.5, 460.5, 136.5, 472.5, 155.5, 485.5, 172.5, 492.5, 191.5, 494.5, 215.5, 493.5, 234.5, 489.5, 251.5, 480.5, 257.5, 464.5, 265.5, 450.5, 275.5, 440.5, 283.5, 435.5, 286.5, 418.5, 286.5, 398.5, 282.5, 383.5, 277.5, 374.5, 270.5, 363.5, 262.5, 353.5, 251.5, 343.5, 237.5, 335.5, 224.5, 328.5, 208.5, 324.5, 189.5, 323.5, 177.5, 323.5, 164.5, 327.5, 151.5, 333.5]]}, {&#39;bbox&#39;: [249, 418, 409, 572], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[365.5, 425.5, 350.5, 420.5, 335.5, 418.5, 319.5, 419.5, 302.5, 424.5, 291.5, 429.5, 284.5, 434.5, 275.5, 441.5, 267.5, 448.5, 259.5, 461.5, 254.5, 474.5, 250.5, 485.5, 249.5, 493.5, 249.5, 505.5, 251.5, 518.5, 255.5, 532.5, 262.5, 542.5, 268.5, 551.5, 277.5, 561.5, 287.5, 569.5, 294.5, 572.5, 292.5, 568.5, 281.5, 563.5, 280.5, 560.5, 282.5, 556.5, 285.5, 555.5, 297.5, 560.5, 305.5, 564.5, 306.5, 562.5, 295.5, 555.5, 289.5, 551.5, 291.5, 549.5, 293.5, 546.5, 297.5, 547.5, 303.5, 549.5, 315.5, 555.5, 330.5, 560.5, 348.5, 562.5, 351.5, 560.5, 355.5, 558.5, 347.5, 554.5, 341.5, 552.5, 335.5, 549.5, 332.5, 543.5, 332.5, 538.5, 336.5, 536.5, 340.5, 540.5, 346.5, 541.5, 353.5, 545.5, 362.5, 547.5, 366.5, 548.5, 374.5, 553.5, 380.5, 556.5, 386.5, 563.5, 394.5, 557.5, 396.5, 555.5, 392.5, 537.5, 392.5, 523.5, 395.5, 509.5, 399.5, 496.5, 406.5, 484.5, 409.5, 479.5, 407.5, 466.5, 399.5, 456.5, 392.5, 446.5, 379.5, 434.5, 365.5, 425.5]]}, {&#39;bbox&#39;: [391, 435, 583, 598], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[492.5, 435.5, 501.5, 436.5, 513.5, 439.5, 525.5, 442.5, 538.5, 449.5, 550.5, 458.5, 559.5, 465.5, 569.5, 480.5, 578.5, 494.5, 582.5, 515.5, 583.5, 543.5, 578.5, 561.5, 571.5, 575.5, 564.5, 587.5, 503.5, 568.5, 481.5, 565.5, 468.5, 567.5, 455.5, 572.5, 452.5, 574.5, 456.5, 563.5, 453.5, 560.5, 446.5, 561.5, 424.5, 598.5, 422.5, 596.5, 433.5, 574.5, 434.5, 566.5, 431.5, 564.5, 426.5, 566.5, 422.5, 570.5, 412.5, 585.5, 404.5, 574.5, 401.5, 566.5, 398.5, 561.5, 397.5, 557.5, 394.5, 547.5, 391.5, 529.5, 394.5, 513.5, 401.5, 494.5, 410.5, 479.5, 420.5, 465.5, 437.5, 452.5, 448.5, 446.5, 454.5, 443.5, 463.5, 440.5, 469.5, 439.5, 473.5, 437.5, 482.5, 436.5, 485.5, 436.5, 492.5, 435.5]]}, {&#39;bbox&#39;: [117, 477, 257, 592], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[245.5, 582.5, 188.5, 592.5, 173.5, 592.5, 173.5, 581.5, 171.5, 565.5, 165.5, 547.5, 155.5, 529.5, 143.5, 513.5, 130.5, 504.5, 117.5, 495.5, 126.5, 484.5, 141.5, 477.5, 150.5, 483.5, 164.5, 490.5, 195.5, 495.5, 212.5, 494.5, 231.5, 491.5, 235.5, 490.5, 240.5, 498.5, 246.5, 508.5, 252.5, 521.5, 256.5, 536.5, 257.5, 555.5, 250.5, 563.5, 245.5, 582.5]]}, {&#39;bbox&#39;: [106, 594, 296, 679], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[106.5, 617.5, 131.5, 605.5, 166.5, 594.5, 198.5, 595.5, 220.5, 599.5, 241.5, 610.5, 254.5, 619.5, 279.5, 644.5, 290.5, 662.5, 296.5, 679.5, 271.5, 678.5, 123.5, 679.5, 106.5, 617.5]]}, {&#39;bbox&#39;: [82, 486, 172, 616], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[83.5, 486.5, 94.5, 488.5, 109.5, 493.5, 117.5, 495.5, 143.5, 513.5, 157.5, 530.5, 167.5, 552.5, 172.5, 575.5, 172.5, 594.5, 157.5, 597.5, 140.5, 601.5, 127.5, 606.5, 107.5, 616.5, 82.5, 504.5, 86.5, 499.5, 83.5, 486.5]]}, {&#39;bbox&#39;: [7, 189, 142, 403], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[99.5, 383.5, 110.5, 374.5, 121.5, 358.5, 132.5, 339.5, 142.5, 306.5, 139.5, 272.5, 130.5, 247.5, 119.5, 232.5, 104.5, 217.5, 79.5, 199.5, 52.5, 190.5, 34.5, 189.5, 7.5, 193.5, 37.5, 322.5, 58.5, 340.5, 75.5, 368.5, 83.5, 390.5, 90.5, 391.5, 90.5, 397.5, 93.5, 403.5, 98.5, 403.5, 102.5, 400.5, 101.5, 393.5, 98.5, 390.5, 99.5, 383.5]]}, {&#39;bbox&#39;: [38, 323, 84, 449], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[75.5, 449.5, 83.5, 429.5, 84.5, 402.5, 82.5, 389.5, 76.5, 371.5, 68.5, 356.5, 55.5, 337.5, 47.5, 331.5, 38.5, 323.5, 67.5, 446.5, 69.5, 444.5, 74.5, 446.5, 75.5, 449.5]]}, {&#39;bbox&#39;: [731, 516, 917, 655], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[901.5, 655.5, 911.5, 639.5, 915.5, 622.5, 917.5, 597.5, 910.5, 572.5, 896.5, 550.5, 876.5, 533.5, 857.5, 522.5, 835.5, 517.5, 809.5, 516.5, 791.5, 522.5, 774.5, 530.5, 758.5, 542.5, 743.5, 558.5, 736.5, 577.5, 732.5, 597.5, 731.5, 609.5, 757.5, 596.5, 785.5, 590.5, 821.5, 594.5, 847.5, 604.5, 865.5, 614.5, 879.5, 626.5, 896.5, 649.5, 901.5, 655.5]]}, {&#39;bbox&#39;: [694, 592, 909, 679], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[714.5, 628.5, 726.5, 616.5, 743.5, 604.5, 771.5, 595.5, 785.5, 592.5, 810.5, 595.5, 833.5, 601.5, 849.5, 606.5, 865.5, 617.5, 879.5, 628.5, 892.5, 644.5, 905.5, 662.5, 909.5, 678.5, 694.5, 679.5, 695.5, 668.5, 700.5, 654.5, 709.5, 635.5, 714.5, 628.5]]}, {&#39;bbox&#39;: [738, 405, 914, 550], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[738.5, 458.5, 747.5, 443.5, 764.5, 423.5, 781.5, 412.5, 802.5, 405.5, 819.5, 405.5, 833.5, 405.5, 841.5, 415.5, 858.5, 427.5, 876.5, 438.5, 898.5, 448.5, 907.5, 460.5, 913.5, 480.5, 914.5, 500.5, 911.5, 522.5, 902.5, 543.5, 895.5, 550.5, 878.5, 535.5, 859.5, 523.5, 837.5, 518.5, 819.5, 516.5, 801.5, 519.5, 786.5, 524.5, 774.5, 531.5, 762.5, 539.5, 756.5, 544.5, 749.5, 525.5, 738.5, 486.5, 742.5, 482.5, 744.5, 480.5, 743.5, 468.5, 742.5, 462.5, 738.5, 458.5]]}, {&#39;bbox&#39;: [803, 266, 953, 452], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[812.5, 340.5, 818.5, 327.5, 828.5, 310.5, 838.5, 299.5, 860.5, 293.5, 880.5, 287.5, 896.5, 278.5, 916.5, 266.5, 930.5, 266.5, 953.5, 268.5, 929.5, 452.5, 899.5, 448.5, 870.5, 435.5, 847.5, 420.5, 835.5, 408.5, 820.5, 385.5, 810.5, 365.5, 809.5, 357.5, 804.5, 355.5, 803.5, 351.5, 806.5, 345.5, 811.5, 344.5, 812.5, 340.5]]}, {&#39;bbox&#39;: [739, 67, 961, 297], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[739.5, 179.5, 744.5, 154.5, 751.5, 136.5, 763.5, 117.5, 777.5, 101.5, 790.5, 89.5, 808.5, 79.5, 834.5, 69.5, 855.5, 67.5, 884.5, 70.5, 907.5, 78.5, 926.5, 92.5, 946.5, 113.5, 955.5, 128.5, 959.5, 146.5, 961.5, 164.5, 961.5, 181.5, 959.5, 194.5, 955.5, 211.5, 951.5, 217.5, 936.5, 217.5, 933.5, 208.5, 927.5, 204.5, 923.5, 202.5, 918.5, 204.5, 913.5, 211.5, 912.5, 227.5, 912.5, 240.5, 913.5, 247.5, 918.5, 250.5, 922.5, 250.5, 926.5, 246.5, 931.5, 242.5, 933.5, 237.5, 943.5, 237.5, 940.5, 240.5, 937.5, 243.5, 935.5, 247.5, 922.5, 260.5, 911.5, 269.5, 894.5, 278.5, 877.5, 288.5, 844.5, 297.5, 809.5, 294.5, 779.5, 281.5, 765.5, 267.5, 749.5, 242.5, 739.5, 210.5, 739.5, 179.5]]}, {&#39;bbox&#39;: [571, 0, 732, 166], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[732.5, 113.5, 722.5, 132.5, 712.5, 148.5, 703.5, 161.5, 696.5, 166.5, 657.5, 163.5, 622.5, 155.5, 604.5, 143.5, 593.5, 131.5, 579.5, 106.5, 571.5, 78.5, 572.5, 53.5, 579.5, 28.5, 593.5, 8.5, 600.5, 0.5, 711.5, 1.5, 722.5, 14.5, 727.5, 22.5, 722.5, 39.5, 720.5, 57.5, 721.5, 76.5, 725.5, 99.5, 732.5, 113.5]]}, {&#39;bbox&#39;: [720, 1, 913, 135], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[745.5, 129.5, 736.5, 119.5, 730.5, 106.5, 722.5, 87.5, 720.5, 67.5, 720.5, 52.5, 722.5, 38.5, 727.5, 21.5, 734.5, 7.5, 738.5, 1.5, 900.5, 1.5, 908.5, 16.5, 911.5, 30.5, 913.5, 50.5, 912.5, 69.5, 907.5, 78.5, 886.5, 70.5, 865.5, 67.5, 848.5, 67.5, 832.5, 71.5, 814.5, 76.5, 798.5, 85.5, 784.5, 94.5, 770.5, 108.5, 760.5, 121.5, 751.5, 135.5, 745.5, 129.5]]}, {&#39;bbox&#39;: [286, 607, 433, 678], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[373.5, 618.5, 358.5, 608.5, 343.5, 607.5, 326.5, 609.5, 314.5, 622.5, 298.5, 639.5, 286.5, 653.5, 295.5, 673.5, 296.5, 678.5, 433.5, 678.5, 427.5, 667.5, 413.5, 653.5, 391.5, 632.5, 373.5, 618.5]]}, {&#39;bbox&#39;: [75, 400, 131, 495], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[96.5, 408.5, 104.5, 414.5, 108.5, 417.5, 111.5, 431.5, 115.5, 442.5, 124.5, 458.5, 131.5, 467.5, 130.5, 482.5, 119.5, 490.5, 116.5, 495.5, 89.5, 487.5, 82.5, 485.5, 75.5, 449.5, 84.5, 429.5, 85.5, 410.5, 86.5, 400.5, 96.5, 408.5]]}], &#39;file_name&#39;: &#39;./balloon/train/120853323_d4788431b9_b.jpg&#39;, &#39;height&#39;: 679, &#39;width&#39;: 1024}, {&#39;annotations&#39;: [{&#39;bbox&#39;: [625, 380, 724, 477], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;, &#39;category_id&#39;: 0, &#39;iscrowd&#39;: 0, &#39;segmentation&#39;: [[640.5, 399.5, 654.5, 387.5, 664.5, 382.5, 678.5, 380.5, 692.5, 380.5, 708.5, 386.5, 717.5, 397.5, 722.5, 410.5, 724.5, 432.5, 714.5, 452.5, 706.5, 462.5, 694.5, 470.5, 686.5, 474.5, 665.5, 477.5, 649.5, 476.5, 639.5, 476.5, 634.5, 473.5, 630.5, 476.5, 627.5, 475.5, 625.5, 473.5, 625.5, 470.5, 627.5, 466.5, 629.5, 466.5, 625.5, 460.5, 625.5, 441.5, 628.5, 425.5, 632.5, 412.5, 640.5, 399.5]]}], &#39;file_name&#39;: &#39;./balloon/train/53500107_d24b11b3c2_b.jpg&#39;, &#39;height&#39;: 768, &#39;width&#39;: 1024}] . # Register Balloon Dataset for d in [&quot;train&quot;, &quot;val&quot;]: DatasetCatalog.register(&quot;balloon/&quot; + d, lambda d=d: get_balloon_dicts(&quot;balloon/&quot; + d)) MetadataCatalog.get(&quot;balloon/&quot; + d).set(thing_classes=[&quot;balloon&quot;]) balloon_metadata = MetadataCatalog.get(&quot;balloon/train&quot;) . # Visualize Dataset dataset_dicts = get_balloon_dicts(&quot;balloon/train&quot;) for d in random.sample(dataset_dicts, 3): img = cv2.imread(d[&quot;file_name&quot;]) visualizer = Visualizer(img[:, :, ::-1], metadata=balloon_metadata, scale=0.5) vis = visualizer.draw_dataset_dict(d) cv2_imshow(vis.get_image()[:, :, ::-1]) . # Set the training Configs cfg = get_cfg() cfg.merge_from_file(&quot;./detectron2_repo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml&quot;) cfg.DATASETS.TRAIN = (&quot;balloon/train&quot;,) cfg.DATASETS.TEST = () # no metrics implemented for this dataset cfg.DATALOADER.NUM_WORKERS = 2 cfg.MODEL.WEIGHTS = &quot;detectron2://COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl&quot; # initialize from model zoo cfg.SOLVER.IMS_PER_BATCH = 2 cfg.SOLVER.BASE_LR = 0.00025 cfg.SOLVER.MAX_ITER = 300 # 300 iterations seems good enough, but you can certainly train longer cfg.MODEL.ROI_HEADS.BATCH_SIZE_PER_IMAGE = 128 # faster, and good enough for this toy dataset cfg.MODEL.ROI_HEADS.NUM_CLASSES = 1 # only has one class (ballon) . WARNING [10/11 09:48:44 d2.config.compat]: Config &#39;./detectron2_repo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml&#39; has no VERSION. Assuming it to be compatible with latest v2. . # Trainer os.makedirs(cfg.OUTPUT_DIR, exist_ok = True) trainer = DefaultTrainer(cfg) trainer.resume_or_load(resume = False) trainer.train() . [10/11 09:48:55 d2.engine.defaults]: Model: GeneralizedRCNN( (backbone): FPN( (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1)) (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1)) (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1)) (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1)) (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (top_block): LastLevelMaxPool() (bottom_up): ResNet( (stem): BasicStem( (conv1): Conv2d( 3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05) ) ) (res2): Sequential( (0): BottleneckBlock( (shortcut): Conv2d( 64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05) ) (conv1): Conv2d( 64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05) ) (conv2): Conv2d( 64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05) ) (conv3): Conv2d( 64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05) ) ) (1): BottleneckBlock( (conv1): Conv2d( 256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05) ) (conv2): Conv2d( 64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05) ) (conv3): Conv2d( 64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05) ) ) (2): BottleneckBlock( (conv1): Conv2d( 256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05) ) (conv2): Conv2d( 64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05) ) (conv3): Conv2d( 64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05) ) ) ) (res3): Sequential( (0): BottleneckBlock( (shortcut): Conv2d( 256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05) ) (conv1): Conv2d( 256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05) ) (conv2): Conv2d( 128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05) ) (conv3): Conv2d( 128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05) ) ) (1): BottleneckBlock( (conv1): Conv2d( 512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05) ) (conv2): Conv2d( 128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05) ) (conv3): Conv2d( 128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05) ) ) (2): BottleneckBlock( (conv1): Conv2d( 512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05) ) (conv2): Conv2d( 128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05) ) (conv3): Conv2d( 128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05) ) ) (3): BottleneckBlock( (conv1): Conv2d( 512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05) ) (conv2): Conv2d( 128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05) ) (conv3): Conv2d( 128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05) ) ) ) (res4): Sequential( (0): BottleneckBlock( (shortcut): Conv2d( 512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05) ) (conv1): Conv2d( 512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05) ) (conv2): Conv2d( 256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05) ) (conv3): Conv2d( 256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05) ) ) (1): BottleneckBlock( (conv1): Conv2d( 1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05) ) (conv2): Conv2d( 256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05) ) (conv3): Conv2d( 256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05) ) ) (2): BottleneckBlock( (conv1): Conv2d( 1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05) ) (conv2): Conv2d( 256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05) ) (conv3): Conv2d( 256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05) ) ) (3): BottleneckBlock( (conv1): Conv2d( 1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05) ) (conv2): Conv2d( 256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05) ) (conv3): Conv2d( 256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05) ) ) (4): BottleneckBlock( (conv1): Conv2d( 1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05) ) (conv2): Conv2d( 256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05) ) (conv3): Conv2d( 256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05) ) ) (5): BottleneckBlock( (conv1): Conv2d( 1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05) ) (conv2): Conv2d( 256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05) ) (conv3): Conv2d( 256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05) ) ) ) (res5): Sequential( (0): BottleneckBlock( (shortcut): Conv2d( 1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05) ) (conv1): Conv2d( 1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05) ) (conv2): Conv2d( 512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05) ) (conv3): Conv2d( 512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05) ) ) (1): BottleneckBlock( (conv1): Conv2d( 2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05) ) (conv2): Conv2d( 512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05) ) (conv3): Conv2d( 512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05) ) ) (2): BottleneckBlock( (conv1): Conv2d( 2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05) ) (conv2): Conv2d( 512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05) ) (conv3): Conv2d( 512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05) ) ) ) ) ) (proposal_generator): RPN( (anchor_generator): DefaultAnchorGenerator( (cell_anchors): BufferList() ) (rpn_head): StandardRPNHead( (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1)) (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1)) ) ) (roi_heads): StandardROIHeads( (box_pooler): ROIPooler( (level_poolers): ModuleList( (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True) (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True) (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True) (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True) ) ) (box_head): FastRCNNConvFCHead( (fc1): Linear(in_features=12544, out_features=1024, bias=True) (fc2): Linear(in_features=1024, out_features=1024, bias=True) ) (box_predictor): FastRCNNOutputLayers( (cls_score): Linear(in_features=1024, out_features=2, bias=True) (bbox_pred): Linear(in_features=1024, out_features=4, bias=True) ) (mask_pooler): ROIPooler( (level_poolers): ModuleList( (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True) (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True) (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True) (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True) ) ) (mask_head): MaskRCNNConvUpsampleHead( (mask_fcn1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (mask_fcn2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (mask_fcn3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (mask_fcn4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2)) (predictor): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1)) ) ) ) [10/11 09:48:57 d2.data.build]: Removed 0 images with no usable annotations. 61 images left. [10/11 09:48:57 d2.data.build]: Distribution of training instances among all 1 categories: | category | #instances | |:-:|:-| | balloon | 255 | | | | [10/11 09:48:57 d2.data.detection_utils]: TransformGens used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style=&#39;choice&#39;), RandomFlip()] [10/11 09:48:57 d2.data.build]: Using training sampler TrainingSampler . &#39;roi_heads.box_predictor.cls_score.weight&#39; has shape (81, 1024) in the checkpoint but (2, 1024) in the model! Skipped. &#39;roi_heads.box_predictor.cls_score.bias&#39; has shape (81,) in the checkpoint but (2,) in the model! Skipped. &#39;roi_heads.box_predictor.bbox_pred.weight&#39; has shape (320, 1024) in the checkpoint but (4, 1024) in the model! Skipped. &#39;roi_heads.box_predictor.bbox_pred.bias&#39; has shape (320,) in the checkpoint but (4,) in the model! Skipped. &#39;roi_heads.mask_head.predictor.weight&#39; has shape (80, 256, 1, 1) in the checkpoint but (1, 256, 1, 1) in the model! Skipped. &#39;roi_heads.mask_head.predictor.bias&#39; has shape (80,) in the checkpoint but (1,) in the model! Skipped. . [10/11 09:49:01 d2.engine.train_loop]: Starting training from iteration 0 [10/11 09:49:25 d2.utils.events]: eta: 0:05:35 iter: 19 total_loss: 2.006 loss_cls: 0.685 loss_box_reg: 0.608 loss_mask: 0.692 loss_rpn_cls: 0.021 loss_rpn_loc: 0.005 time: 1.2004 data_time: 0.0035 lr: 0.000005 max_mem: 2725M [10/11 09:49:49 d2.utils.events]: eta: 0:05:07 iter: 39 total_loss: 2.141 loss_cls: 0.650 loss_box_reg: 0.658 loss_mask: 0.663 loss_rpn_cls: 0.040 loss_rpn_loc: 0.010 time: 1.2014 data_time: 0.0038 lr: 0.000010 max_mem: 2726M [10/11 09:50:14 d2.utils.events]: eta: 0:04:53 iter: 59 total_loss: 1.734 loss_cls: 0.581 loss_box_reg: 0.583 loss_mask: 0.603 loss_rpn_cls: 0.018 loss_rpn_loc: 0.005 time: 1.2228 data_time: 0.0035 lr: 0.000015 max_mem: 2850M [10/11 09:50:38 d2.utils.events]: eta: 0:04:26 iter: 79 total_loss: 1.721 loss_cls: 0.509 loss_box_reg: 0.633 loss_mask: 0.538 loss_rpn_cls: 0.033 loss_rpn_loc: 0.007 time: 1.2148 data_time: 0.0039 lr: 0.000020 max_mem: 2850M [10/11 09:51:03 d2.utils.events]: eta: 0:04:04 iter: 99 total_loss: 1.681 loss_cls: 0.442 loss_box_reg: 0.700 loss_mask: 0.479 loss_rpn_cls: 0.031 loss_rpn_loc: 0.008 time: 1.2220 data_time: 0.0036 lr: 0.000025 max_mem: 2850M [10/11 09:51:29 d2.utils.events]: eta: 0:03:42 iter: 119 total_loss: 1.519 loss_cls: 0.408 loss_box_reg: 0.611 loss_mask: 0.401 loss_rpn_cls: 0.028 loss_rpn_loc: 0.004 time: 1.2303 data_time: 0.0036 lr: 0.000030 max_mem: 2850M [10/11 09:51:54 d2.utils.events]: eta: 0:03:18 iter: 139 total_loss: 1.490 loss_cls: 0.370 loss_box_reg: 0.696 loss_mask: 0.364 loss_rpn_cls: 0.018 loss_rpn_loc: 0.011 time: 1.2313 data_time: 0.0036 lr: 0.000035 max_mem: 2850M [10/11 09:52:18 d2.utils.events]: eta: 0:02:53 iter: 159 total_loss: 1.293 loss_cls: 0.307 loss_box_reg: 0.611 loss_mask: 0.303 loss_rpn_cls: 0.021 loss_rpn_loc: 0.006 time: 1.2321 data_time: 0.0034 lr: 0.000040 max_mem: 2850M [10/11 09:52:43 d2.utils.events]: eta: 0:02:30 iter: 179 total_loss: 1.221 loss_cls: 0.279 loss_box_reg: 0.629 loss_mask: 0.287 loss_rpn_cls: 0.024 loss_rpn_loc: 0.011 time: 1.2337 data_time: 0.0035 lr: 0.000045 max_mem: 2850M [10/11 09:53:08 d2.utils.events]: eta: 0:02:05 iter: 199 total_loss: 1.203 loss_cls: 0.242 loss_box_reg: 0.639 loss_mask: 0.241 loss_rpn_cls: 0.020 loss_rpn_loc: 0.006 time: 1.2365 data_time: 0.0035 lr: 0.000050 max_mem: 2850M [10/11 09:53:34 d2.utils.events]: eta: 0:01:40 iter: 219 total_loss: 1.109 loss_cls: 0.234 loss_box_reg: 0.659 loss_mask: 0.205 loss_rpn_cls: 0.015 loss_rpn_loc: 0.011 time: 1.2379 data_time: 0.0035 lr: 0.000055 max_mem: 2850M [10/11 09:53:59 d2.utils.events]: eta: 0:01:16 iter: 239 total_loss: 1.023 loss_cls: 0.202 loss_box_reg: 0.596 loss_mask: 0.186 loss_rpn_cls: 0.021 loss_rpn_loc: 0.009 time: 1.2428 data_time: 0.0034 lr: 0.000060 max_mem: 2850M [10/11 09:54:24 d2.utils.events]: eta: 0:00:51 iter: 259 total_loss: 0.989 loss_cls: 0.192 loss_box_reg: 0.599 loss_mask: 0.179 loss_rpn_cls: 0.020 loss_rpn_loc: 0.007 time: 1.2424 data_time: 0.0035 lr: 0.000065 max_mem: 2850M [10/11 09:54:49 d2.utils.events]: eta: 0:00:26 iter: 279 total_loss: 0.944 loss_cls: 0.155 loss_box_reg: 0.564 loss_mask: 0.151 loss_rpn_cls: 0.026 loss_rpn_loc: 0.011 time: 1.2431 data_time: 0.0034 lr: 0.000070 max_mem: 2850M [10/11 09:55:17 d2.utils.events]: eta: 0:00:01 iter: 299 total_loss: 0.761 loss_cls: 0.135 loss_box_reg: 0.468 loss_mask: 0.119 loss_rpn_cls: 0.017 loss_rpn_loc: 0.006 time: 1.2489 data_time: 0.0035 lr: 0.000075 max_mem: 2850M [10/11 09:55:18 d2.engine.hooks]: Overall training speed: 297 iterations in 0:06:12 (1.2531 s / it) [10/11 09:55:18 d2.engine.hooks]: Total training time: 0:06:14 (0:00:02 on hooks) . OrderedDict() . # Save model for testing cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR, &quot;model_final.pth&quot;) cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.7 # set the testing threshold for this model cfg.DATASETS.TEST = (&quot;balloon_val&quot;, ) predictor = DefaultPredictor(cfg) . # Inference on Validation Set from detectron2.utils.visualizer import ColorMode dataset_dicts = get_balloon_dicts(&quot;balloon/val&quot;) for d in random.sample(dataset_dicts, 3): im = cv2.imread(d[&quot;file_name&quot;]) outputs = predictor(im) v = Visualizer(im[:, :, ::-1], metadata=MetadataCatalog.get(&quot;balloon_val&quot;), scale=0.8, instance_mode=ColorMode.IMAGE_BW # remove the colors of unsegmented pixels ) v = v.draw_instance_predictions(outputs[&quot;instances&quot;].to(&quot;cpu&quot;)) cv2_imshow(v.get_image()[:, :, ::-1]) .",
            "url": "https://soumik12345.github.io/geekyrakshit-blog/computervision/deeplearning/segmentation/objectdetction/neuralnetwork/instancesegmentation/convolution/detectron/maskrcnn/python/pytorch/2020/04/13/detectron-mask-rcnn.html",
            "relUrl": "/computervision/deeplearning/segmentation/objectdetction/neuralnetwork/instancesegmentation/convolution/detectron/maskrcnn/python/pytorch/2020/04/13/detectron-mask-rcnn.html",
            "date": " • Apr 13, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Automatic Number Plate Recognition",
            "content": "Generating Training Data . #collapse-hide import os print(&#39;Generating Training Data n&#39;) os.chdir(&#39;./Korean-license-plate-Generator&#39;) !mkdir ../Train_Images print(&#39;Augmentated Images Generating... n&#39;) !python ./Generator_augmentation.py --img_dir &quot;../Train_Images/&quot; --num 10000 --save True print(&#39;Augmentated Images Generated n&#39;) print(&#39;Original Images Generating... n&#39;) !python ./Generator_original.py --img_dir &quot;../Train_Images/&quot; --num 10000 --save True print(&#39;Original Images Generated n&#39;) print(&#39;Perspective Images Generating... n&#39;) !python ./Generator_perspective.py --img_dir &quot;../Train_Images/&quot; --num 10000 --save True print(&#39;Perspective Images Generated n&#39;) os.chdir(&#39;../&#39;) print(&#39;Done.&#39;) . . Generating Training Data Augmentated Images Generating... Type 1 finish Type 2 finish Type 3 finish Type 4 finish Type 5 finish Augmentated Images Generated Original Images Generating... Type 1 finish Type 2 finish Type 3 finish Type 4 finish Type 5 finish Original Images Generated Perspective Images Generating... Type 1 finish Type 2 finish Type 3 finish Type 4 finish Type 5 finish Perspective Images Generated Done. . Generating Validation Data . #collapse-hide print(&#39;Generating Validation Data n&#39;) os.chdir(&#39;./Korean-license-plate-Generator&#39;) !mkdir ../Validation_Images print(&#39;Augmentated Images Generating... n&#39;) !python ./Generator_augmentation.py --img_dir &quot;../Validation_Images/&quot; --num 1000 --save True print(&#39;Augmentated Images Generated n&#39;) print(&#39;Original Images Generating... n&#39;) !python ./Generator_original.py --img_dir &quot;../Validation_Images/&quot; --num 1000 --save True print(&#39;Original Images Generated n&#39;) print(&#39;Perspective Images Generating... n&#39;) !python ./Generator_perspective.py --img_dir &quot;../Validation_Images/&quot; --num 1000 --save True print(&#39;Perspective Images Generated n&#39;) os.chdir(&#39;../&#39;) print(&#39;Done.&#39;) . . Generating Validation Data Augmentated Images Generating... Type 1 finish Type 2 finish Type 3 finish Type 4 finish Type 5 finish Augmentated Images Generated Original Images Generating... Type 1 finish Type 2 finish Type 3 finish Type 4 finish Type 5 finish Original Images Generated Perspective Images Generating... Type 1 finish Type 2 finish Type 3 finish Type 4 finish Type 5 finish Perspective Images Generated Done. . Importing Libraries . #collapse-hide import cv2 import itertools import os, random import numpy as np from glob import glob from tqdm import tqdm_notebook from matplotlib import pyplot as plt from keras import backend as K from keras.layers import ( Conv2D, MaxPooling2D, Input, Dense, Activation, Reshape, Lambda, BatchNormalization, CuDNNLSTM ) from keras.layers.merge import add, concatenate from keras.models import Model from keras.optimizers import Adadelta from keras.callbacks import EarlyStopping, ModelCheckpoint from keras.utils import plot_model, Sequence . . Using TensorFlow backend. . Configs . CHAR_VECTOR = &quot;adefghjknqrstwABCDEFGHIJKLMNOPZ0123456789&quot; letters = [letter for letter in CHAR_VECTOR] num_classes = len(letters) + 1 img_w, img_h = 128, 64 # Network parameters batch_size = 128 val_batch_size = 16 downsample_factor = 4 max_text_len = 9 K.set_learning_phase(0) . WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:66: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead. . Data Generation . def labels_to_text(labels): return &#39;&#39;.join(list(map(lambda x: letters[int(x)], labels))) def text_to_labels(text): return list(map(lambda x: letters.index(x), text)) . class DataGenerator(Sequence): def __init__(self, image_path, batch_size, image_width, image_height, downsample_factor, shuffle = True, max_text_len = 9): &#39;&#39;&#39;Datagenerator&#39;&#39;&#39; self.image_path = image_path self.image_list = glob(self.image_path + &#39;/*&#39;) self.batch_size = batch_size self.image_width = image_width self.image_height = image_height self.downsample_factor = downsample_factor self.shuffle = shuffle self.max_text_len = max_text_len self.on_epoch_end() def __len__(self): &#39;&#39;&#39;Denotes the number of batches per epoch&#39;&#39;&#39; return int(np.floor(len(self.image_list) / self.batch_size)) def __getitem__(self, index): &#39;&#39;&#39;Generate Single Batch of Data&#39;&#39;&#39; # Generate indexes of the batch indexes = self.indexes[index * self.batch_size:(index + 1) * self.batch_size] # Find list of IDs list_IDs_temp = [self.image_list[k] for k in indexes] # Generate data inputs, outputs = self.__data_generation(list_IDs_temp) return inputs, outputs def on_epoch_end(self): &#39;&#39;&#39;Updates indexes after each epoch&#39;&#39;&#39; self.indexes = np.arange(len(self.image_list)) if self.shuffle == True: np.random.shuffle(self.indexes) def __data_generation(self, list_IDs_temp): &#39;&#39;&#39;Generates data containing batch_size samples&#39;&#39;&#39; # Reading Data images = [] texts = [] label_length = np.zeros((self.batch_size, 1)) for i, img_file in enumerate(list_IDs_temp): image = cv2.imread(img_file, cv2.IMREAD_GRAYSCALE) image = cv2.resize(image, (self.image_width, self.image_height)) image = image.astype(np.float32) image = (image / 255.0) images.append(image.T) text = img_file[0 : -4].split(&#39;/&#39;)[-1] texts.append(text_to_labels(text)) label_length[i] = len(text) # images[i, :, :] = image input_length = np.ones((self.batch_size, 1)) * (self.image_width // self.downsample_factor - 2) images = np.expand_dims(np.array(images), axis = 3) inputs = { &#39;the_input&#39;: images, # (bs, 128, 64, 1) &#39;the_labels&#39;: np.array(texts), # (bs, 8) &#39;input_length&#39;: input_length, # (bs, 1) &#39;label_length&#39;: np.array(label_length) # (bs, 1) } outputs = {&#39;ctc&#39;: np.zeros([self.batch_size])} # (bs, 1) return (inputs, outputs) . datagen = DataGenerator(&#39;./Train_Images&#39;, batch_size, 128, 64, 4, True, 9) . fig, axes = plt.subplots(nrows = 4, ncols = 2, figsize = (16, 16)) plt.setp(axes.flat, xticks = [], yticks = []) inp, out = datagen.__getitem__(0) c = 1 for i, ax in enumerate(axes.flat): ax.imshow(inp[&#39;the_input&#39;][c].reshape(img_w, img_h).T) ax.set_xlabel(labels_to_text(inp[&#39;the_labels&#39;][c])) c += 1 plt.show() . Network Architecture . # # Loss and train functions, network architecture def ctc_lambda_func(args): y_pred, labels, input_length, label_length = args # the 2 is critical here since the first couple outputs of the RNN # tend to be garbage: y_pred = y_pred[:, 2:, :] return K.ctc_batch_cost(labels, y_pred, input_length, label_length) . def get_Model(training): input_shape = (img_w, img_h, 1) # (128, 64, 1) # Make Networkw inputs = Input(name=&#39;the_input&#39;, shape=input_shape, dtype=&#39;float32&#39;) # (None, 128, 64, 1) # Convolution layer (VGG) inner = Conv2D(64, (3, 3), padding=&#39;same&#39;, name=&#39;conv1&#39;, kernel_initializer=&#39;he_normal&#39;)(inputs) # (None, 128, 64, 64) inner = BatchNormalization()(inner) inner = Activation(&#39;relu&#39;)(inner) inner = MaxPooling2D(pool_size=(2, 2), name=&#39;max1&#39;)(inner) # (None,64, 32, 64) inner = Conv2D(128, (3, 3), padding=&#39;same&#39;, name=&#39;conv2&#39;, kernel_initializer=&#39;he_normal&#39;)(inner) # (None, 64, 32, 128) inner = BatchNormalization()(inner) inner = Activation(&#39;relu&#39;)(inner) inner = MaxPooling2D(pool_size=(2, 2), name=&#39;max2&#39;)(inner) # (None, 32, 16, 128) inner = Conv2D(256, (3, 3), padding=&#39;same&#39;, name=&#39;conv3&#39;, kernel_initializer=&#39;he_normal&#39;)(inner) # (None, 32, 16, 256) inner = BatchNormalization()(inner) inner = Activation(&#39;relu&#39;)(inner) inner = Conv2D(256, (3, 3), padding=&#39;same&#39;, name=&#39;conv4&#39;, kernel_initializer=&#39;he_normal&#39;)(inner) # (None, 32, 16, 256) inner = BatchNormalization()(inner) inner = Activation(&#39;relu&#39;)(inner) inner = MaxPooling2D(pool_size=(1, 2), name=&#39;max3&#39;)(inner) # (None, 32, 8, 256) inner = Conv2D(512, (3, 3), padding=&#39;same&#39;, name=&#39;conv5&#39;, kernel_initializer=&#39;he_normal&#39;)(inner) # (None, 32, 8, 512) inner = BatchNormalization()(inner) inner = Activation(&#39;relu&#39;)(inner) inner = Conv2D(512, (3, 3), padding=&#39;same&#39;, name=&#39;conv6&#39;)(inner) # (None, 32, 8, 512) inner = BatchNormalization()(inner) inner = Activation(&#39;relu&#39;)(inner) inner = MaxPooling2D(pool_size=(1, 2), name=&#39;max4&#39;)(inner) # (None, 32, 4, 512) inner = Conv2D(512, (2, 2), padding=&#39;same&#39;, kernel_initializer=&#39;he_normal&#39;, name=&#39;con7&#39;)(inner) # (None, 32, 4, 512) inner = BatchNormalization()(inner) inner = Activation(&#39;relu&#39;)(inner) # CNN to RNN inner = Reshape(target_shape=((32, 2048)), name=&#39;reshape&#39;)(inner) # (None, 32, 2048) inner = Dense(64, activation=&#39;relu&#39;, kernel_initializer=&#39;he_normal&#39;, name=&#39;dense1&#39;)(inner) # (None, 32, 64) # RNN layer lstm_1 = CuDNNLSTM(256, return_sequences=True, kernel_initializer=&#39;he_normal&#39;, name=&#39;lstm1&#39;)(inner) # (None, 32, 512) lstm_1b = CuDNNLSTM(256, return_sequences=True, go_backwards=True, kernel_initializer=&#39;he_normal&#39;, name=&#39;lstm1_b&#39;)(inner) lstm1_merged = add([lstm_1, lstm_1b]) # (None, 32, 512) lstm1_merged = BatchNormalization()(lstm1_merged) lstm_2 = CuDNNLSTM(256, return_sequences=True, kernel_initializer=&#39;he_normal&#39;, name=&#39;lstm2&#39;)(lstm1_merged) lstm_2b = CuDNNLSTM(256, return_sequences=True, go_backwards=True, kernel_initializer=&#39;he_normal&#39;, name=&#39;lstm2_b&#39;)(lstm1_merged) lstm2_merged = concatenate([lstm_2, lstm_2b]) # (None, 32, 1024) lstm_merged = BatchNormalization()(lstm2_merged) # transforms RNN output to character activations: inner = Dense(num_classes, kernel_initializer=&#39;he_normal&#39;,name=&#39;dense2&#39;)(lstm2_merged) #(None, 32, 63) y_pred = Activation(&#39;softmax&#39;, name=&#39;softmax&#39;)(inner) labels = Input(name=&#39;the_labels&#39;, shape=[max_text_len], dtype=&#39;float32&#39;) # (None ,8) input_length = Input(name=&#39;input_length&#39;, shape=[1], dtype=&#39;int64&#39;) # (None, 1) label_length = Input(name=&#39;label_length&#39;, shape=[1], dtype=&#39;int64&#39;) # (None, 1) # Keras doesn&#39;t currently support loss funcs with extra parameters # so CTC loss is implemented in a lambda layer loss_out = Lambda(ctc_lambda_func, output_shape=(1,), name=&#39;ctc&#39;)([y_pred, labels, input_length, label_length]) #(None, 1) if training: return Model(inputs=[inputs, labels, input_length, label_length], outputs=loss_out) else: return Model(inputs=[inputs], outputs=y_pred) . model = get_Model(training = True) model.summary() . WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:541: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead. WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4479: The name tf.truncated_normal is deprecated. Please use tf.random.truncated_normal instead. WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:190: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead. WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:197: The name tf.ConfigProto is deprecated. Please use tf.compat.v1.ConfigProto instead. WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:2041: The name tf.nn.fused_batch_norm is deprecated. Please use tf.compat.v1.nn.fused_batch_norm instead. WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4267: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead. WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/array_ops.py:1354: add_dispatch_support.&lt;locals&gt;.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version. Instructions for updating: Use tf.where in 2.0, which has the same broadcast rule as np.where Model: &#34;model_1&#34; __________________________________________________________________________________________________ Layer (type) Output Shape Param # Connected to ================================================================================================== the_input (InputLayer) (None, 128, 64, 1) 0 __________________________________________________________________________________________________ conv1 (Conv2D) (None, 128, 64, 64) 640 the_input[0][0] __________________________________________________________________________________________________ batch_normalization_1 (BatchNor (None, 128, 64, 64) 256 conv1[0][0] __________________________________________________________________________________________________ activation_1 (Activation) (None, 128, 64, 64) 0 batch_normalization_1[0][0] __________________________________________________________________________________________________ max1 (MaxPooling2D) (None, 64, 32, 64) 0 activation_1[0][0] __________________________________________________________________________________________________ conv2 (Conv2D) (None, 64, 32, 128) 73856 max1[0][0] __________________________________________________________________________________________________ batch_normalization_2 (BatchNor (None, 64, 32, 128) 512 conv2[0][0] __________________________________________________________________________________________________ activation_2 (Activation) (None, 64, 32, 128) 0 batch_normalization_2[0][0] __________________________________________________________________________________________________ max2 (MaxPooling2D) (None, 32, 16, 128) 0 activation_2[0][0] __________________________________________________________________________________________________ conv3 (Conv2D) (None, 32, 16, 256) 295168 max2[0][0] __________________________________________________________________________________________________ batch_normalization_3 (BatchNor (None, 32, 16, 256) 1024 conv3[0][0] __________________________________________________________________________________________________ activation_3 (Activation) (None, 32, 16, 256) 0 batch_normalization_3[0][0] __________________________________________________________________________________________________ conv4 (Conv2D) (None, 32, 16, 256) 590080 activation_3[0][0] __________________________________________________________________________________________________ batch_normalization_4 (BatchNor (None, 32, 16, 256) 1024 conv4[0][0] __________________________________________________________________________________________________ activation_4 (Activation) (None, 32, 16, 256) 0 batch_normalization_4[0][0] __________________________________________________________________________________________________ max3 (MaxPooling2D) (None, 32, 8, 256) 0 activation_4[0][0] __________________________________________________________________________________________________ conv5 (Conv2D) (None, 32, 8, 512) 1180160 max3[0][0] __________________________________________________________________________________________________ batch_normalization_5 (BatchNor (None, 32, 8, 512) 2048 conv5[0][0] __________________________________________________________________________________________________ activation_5 (Activation) (None, 32, 8, 512) 0 batch_normalization_5[0][0] __________________________________________________________________________________________________ conv6 (Conv2D) (None, 32, 8, 512) 2359808 activation_5[0][0] __________________________________________________________________________________________________ batch_normalization_6 (BatchNor (None, 32, 8, 512) 2048 conv6[0][0] __________________________________________________________________________________________________ activation_6 (Activation) (None, 32, 8, 512) 0 batch_normalization_6[0][0] __________________________________________________________________________________________________ max4 (MaxPooling2D) (None, 32, 4, 512) 0 activation_6[0][0] __________________________________________________________________________________________________ con7 (Conv2D) (None, 32, 4, 512) 1049088 max4[0][0] __________________________________________________________________________________________________ batch_normalization_7 (BatchNor (None, 32, 4, 512) 2048 con7[0][0] __________________________________________________________________________________________________ activation_7 (Activation) (None, 32, 4, 512) 0 batch_normalization_7[0][0] __________________________________________________________________________________________________ reshape (Reshape) (None, 32, 2048) 0 activation_7[0][0] __________________________________________________________________________________________________ dense1 (Dense) (None, 32, 64) 131136 reshape[0][0] __________________________________________________________________________________________________ lstm1 (CuDNNLSTM) (None, 32, 256) 329728 dense1[0][0] __________________________________________________________________________________________________ lstm1_b (CuDNNLSTM) (None, 32, 256) 329728 dense1[0][0] __________________________________________________________________________________________________ add_1 (Add) (None, 32, 256) 0 lstm1[0][0] lstm1_b[0][0] __________________________________________________________________________________________________ batch_normalization_8 (BatchNor (None, 32, 256) 1024 add_1[0][0] __________________________________________________________________________________________________ lstm2 (CuDNNLSTM) (None, 32, 256) 526336 batch_normalization_8[0][0] __________________________________________________________________________________________________ lstm2_b (CuDNNLSTM) (None, 32, 256) 526336 batch_normalization_8[0][0] __________________________________________________________________________________________________ concatenate_1 (Concatenate) (None, 32, 512) 0 lstm2[0][0] lstm2_b[0][0] __________________________________________________________________________________________________ dense2 (Dense) (None, 32, 42) 21546 concatenate_1[0][0] __________________________________________________________________________________________________ softmax (Activation) (None, 32, 42) 0 dense2[0][0] __________________________________________________________________________________________________ the_labels (InputLayer) (None, 9) 0 __________________________________________________________________________________________________ input_length (InputLayer) (None, 1) 0 __________________________________________________________________________________________________ label_length (InputLayer) (None, 1) 0 __________________________________________________________________________________________________ ctc (Lambda) (None, 1) 0 softmax[0][0] the_labels[0][0] input_length[0][0] label_length[0][0] ================================================================================================== Total params: 7,423,594 Trainable params: 7,418,602 Non-trainable params: 4,992 __________________________________________________________________________________________________ . plot_model( model, to_file = &#39;model.png&#39;, show_shapes = True, show_layer_names = True, rankdir = &#39;TB&#39; ) . Training Model . model.compile(loss = {&#39;ctc&#39;: lambda y_true, y_pred: y_pred}, optimizer = Adadelta()) . WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:793: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead. . train_datagen = DataGenerator(&#39;./Train_Images&#39;, batch_size, img_w, img_h, downsample_factor, True, max_text_len) valid_datagen = DataGenerator(&#39;./Validation_Images&#39;, batch_size, img_w, img_h, downsample_factor, True, max_text_len) . early_stop = EarlyStopping( monitor = &#39;val_loss&#39;, min_delta = 0.001, patience = 4, mode = &#39;min&#39;, verbose = 1 ) checkpoint = ModelCheckpoint( filepath = &#39;CuDNNLSTM+BN5--{epoch:02d}--{loss:.3f}--{val_loss:.3f}.hdf5&#39;, monitor = &#39;val_loss&#39;, verbose = 1, mode = &#39;min&#39;, period = 1 ) . history = model.fit_generator( generator = train_datagen, steps_per_epoch = int(len(train_datagen.image_list) // batch_size), epochs = 30, callbacks = [checkpoint], validation_data = valid_datagen, validation_steps = int(len(valid_datagen.image_list) // batch_size) ) . Epoch 1/30 1171/1171 [==============================] - 812s 693ms/step - loss: 23.8972 - val_loss: 20.9087 Epoch 00001: saving model to CuDNNLSTM+BN5--01--23.897--20.909.hdf5 Epoch 2/30 1171/1171 [==============================] - 789s 674ms/step - loss: 21.5477 - val_loss: 22.0248 Epoch 00002: saving model to CuDNNLSTM+BN5--02--21.548--22.025.hdf5 Epoch 3/30 1171/1171 [==============================] - 790s 675ms/step - loss: 21.1628 - val_loss: 21.1927 Epoch 00003: saving model to CuDNNLSTM+BN5--03--21.163--21.193.hdf5 Epoch 4/30 1171/1171 [==============================] - 789s 673ms/step - loss: 21.3286 - val_loss: 20.7860 Epoch 00004: saving model to CuDNNLSTM+BN5--04--21.329--20.786.hdf5 Epoch 5/30 1171/1171 [==============================] - 797s 681ms/step - loss: 20.6932 - val_loss: 20.4295 Epoch 00005: saving model to CuDNNLSTM+BN5--05--20.693--20.430.hdf5 Epoch 6/30 1171/1171 [==============================] - 803s 686ms/step - loss: 19.6645 - val_loss: 18.8030 Epoch 00006: saving model to CuDNNLSTM+BN5--06--19.665--18.803.hdf5 Epoch 7/30 1171/1171 [==============================] - 802s 685ms/step - loss: 17.7595 - val_loss: 16.2503 Epoch 00007: saving model to CuDNNLSTM+BN5--07--17.760--16.250.hdf5 Epoch 8/30 1171/1171 [==============================] - 805s 688ms/step - loss: 13.9199 - val_loss: 15.0267 Epoch 00008: saving model to CuDNNLSTM+BN5--08--13.920--15.027.hdf5 Epoch 9/30 1171/1171 [==============================] - 805s 687ms/step - loss: 10.0150 - val_loss: 8.5883 Epoch 00009: saving model to CuDNNLSTM+BN5--09--10.015--8.588.hdf5 Epoch 10/30 1171/1171 [==============================] - 807s 689ms/step - loss: 7.3612 - val_loss: 7.0621 Epoch 00010: saving model to CuDNNLSTM+BN5--10--7.361--7.062.hdf5 Epoch 11/30 1171/1171 [==============================] - 806s 689ms/step - loss: 5.2345 - val_loss: 4.6761 Epoch 00011: saving model to CuDNNLSTM+BN5--11--5.235--4.676.hdf5 Epoch 12/30 1171/1171 [==============================] - 807s 689ms/step - loss: 3.8050 - val_loss: 3.4709 Epoch 00012: saving model to CuDNNLSTM+BN5--12--3.805--3.471.hdf5 Epoch 13/30 1171/1171 [==============================] - 807s 690ms/step - loss: 2.9636 - val_loss: 2.3625 Epoch 00013: saving model to CuDNNLSTM+BN5--13--2.964--2.363.hdf5 Epoch 14/30 1171/1171 [==============================] - 809s 691ms/step - loss: 2.3031 - val_loss: 2.2098 Epoch 00014: saving model to CuDNNLSTM+BN5--14--2.303--2.210.hdf5 Epoch 15/30 1171/1171 [==============================] - 808s 690ms/step - loss: 1.8695 - val_loss: 1.5765 Epoch 00015: saving model to CuDNNLSTM+BN5--15--1.869--1.576.hdf5 Epoch 16/30 1171/1171 [==============================] - 807s 689ms/step - loss: 1.4990 - val_loss: 1.2549 Epoch 00016: saving model to CuDNNLSTM+BN5--16--1.499--1.255.hdf5 Epoch 17/30 1171/1171 [==============================] - 808s 690ms/step - loss: 1.2347 - val_loss: 1.0244 Epoch 00017: saving model to CuDNNLSTM+BN5--17--1.235--1.024.hdf5 Epoch 18/30 1171/1171 [==============================] - 808s 690ms/step - loss: 0.9716 - val_loss: 1.1324 Epoch 00018: saving model to CuDNNLSTM+BN5--18--0.972--1.132.hdf5 Epoch 19/30 1171/1171 [==============================] - 808s 690ms/step - loss: 0.8176 - val_loss: 0.8872 Epoch 00019: saving model to CuDNNLSTM+BN5--19--0.818--0.887.hdf5 Epoch 20/30 1171/1171 [==============================] - 808s 690ms/step - loss: 0.7288 - val_loss: 0.7103 Epoch 00020: saving model to CuDNNLSTM+BN5--20--0.729--0.710.hdf5 Epoch 21/30 1171/1171 [==============================] - 807s 689ms/step - loss: 0.5723 - val_loss: 0.5983 Epoch 00021: saving model to CuDNNLSTM+BN5--21--0.572--0.598.hdf5 Epoch 22/30 1171/1171 [==============================] - 807s 689ms/step - loss: 0.4767 - val_loss: 0.5898 Epoch 00022: saving model to CuDNNLSTM+BN5--22--0.477--0.590.hdf5 Epoch 23/30 1171/1171 [==============================] - 803s 686ms/step - loss: 0.4160 - val_loss: 1.2394 Epoch 00023: saving model to CuDNNLSTM+BN5--23--0.416--1.239.hdf5 Epoch 24/30 1171/1171 [==============================] - 801s 684ms/step - loss: 0.3898 - val_loss: 0.4743 Epoch 00024: saving model to CuDNNLSTM+BN5--24--0.390--0.474.hdf5 Epoch 25/30 1171/1171 [==============================] - 804s 687ms/step - loss: 0.3087 - val_loss: 0.4375 Epoch 00025: saving model to CuDNNLSTM+BN5--25--0.309--0.437.hdf5 Epoch 26/30 1171/1171 [==============================] - 803s 686ms/step - loss: 0.3340 - val_loss: 0.3675 Epoch 00026: saving model to CuDNNLSTM+BN5--26--0.334--0.368.hdf5 Epoch 27/30 1171/1171 [==============================] - 802s 685ms/step - loss: 0.2315 - val_loss: 0.4050 Epoch 00027: saving model to CuDNNLSTM+BN5--27--0.232--0.405.hdf5 Epoch 28/30 1171/1171 [==============================] - 804s 687ms/step - loss: 0.2043 - val_loss: 0.3836 Epoch 00028: saving model to CuDNNLSTM+BN5--28--0.204--0.384.hdf5 Epoch 29/30 1171/1171 [==============================] - 806s 688ms/step - loss: 0.2105 - val_loss: 0.3188 Epoch 00029: saving model to CuDNNLSTM+BN5--29--0.211--0.319.hdf5 Epoch 30/30 1171/1171 [==============================] - 806s 688ms/step - loss: 0.1601 - val_loss: 0.3610 Epoch 00030: saving model to CuDNNLSTM+BN5--30--0.160--0.361.hdf5 . plt.plot(history.history[&#39;loss&#39;], color = &#39;b&#39;) plt.plot(history.history[&#39;val_loss&#39;], color = &#39;r&#39;) plt.show() . Region = {&quot;A&quot;: &quot;서울 &quot;, &quot;B&quot;: &quot;경기 &quot;, &quot;C&quot;: &quot;인천 &quot;, &quot;D&quot;: &quot;강원 &quot;, &quot;E&quot;: &quot;충남 &quot;, &quot;F&quot;: &quot;대전 &quot;, &quot;G&quot;: &quot;충북 &quot;, &quot;H&quot;: &quot;부산 &quot;, &quot;I&quot;: &quot;울산 &quot;, &quot;J&quot;: &quot;대구 &quot;, &quot;K&quot;: &quot;경북 &quot;, &quot;L&quot;: &quot;경남 &quot;, &quot;M&quot;: &quot;전남 &quot;, &quot;N&quot;: &quot;광주 &quot;, &quot;O&quot;: &quot;전북 &quot;, &quot;P&quot;: &quot;제주 &quot;} Hangul = {&quot;dk&quot;: &quot;아&quot;, &quot;dj&quot;: &quot;어&quot;, &quot;dh&quot;: &quot;오&quot;, &quot;dn&quot;: &quot;우&quot;, &quot;qk&quot;: &quot;바&quot;, &quot;qj&quot;: &quot;버&quot;, &quot;qh&quot;: &quot;보&quot;, &quot;qn&quot;: &quot;부&quot;, &quot;ek&quot;: &quot;다&quot;, &quot;ej&quot;: &quot;더&quot;, &quot;eh&quot;: &quot;도&quot;, &quot;en&quot;: &quot;두&quot;, &quot;rk&quot;: &quot;가&quot;, &quot;rj&quot;: &quot;거&quot;, &quot;rh&quot;: &quot;고&quot;, &quot;rn&quot;: &quot;구&quot;, &quot;wk&quot;: &quot;자&quot;, &quot;wj&quot;: &quot;저&quot;, &quot;wh&quot;: &quot;조&quot;, &quot;wn&quot;: &quot;주&quot;, &quot;ak&quot;: &quot;마&quot;, &quot;aj&quot;: &quot;머&quot;, &quot;ah&quot;: &quot;모&quot;, &quot;an&quot;: &quot;무&quot;, &quot;sk&quot;: &quot;나&quot;, &quot;sj&quot;: &quot;너&quot;, &quot;sh&quot;: &quot;노&quot;, &quot;sn&quot;: &quot;누&quot;, &quot;fk&quot;: &quot;라&quot;, &quot;fj&quot;: &quot;러&quot;, &quot;fh&quot;: &quot;로&quot;, &quot;fn&quot;: &quot;루&quot;, &quot;tk&quot;: &quot;사&quot;, &quot;tj&quot;: &quot;서&quot;, &quot;th&quot;: &quot;소&quot;, &quot;tn&quot;: &quot;수&quot;, &quot;gj&quot;: &quot;허&quot;} . def decode_label(out): # out : (1, 32, 42) out_best = list(np.argmax(out[0, 2:], axis=1)) # get max index -&gt; len = 32 out_best = [k for k, g in itertools.groupby(out_best)] # remove overlap value outstr = &#39;&#39; for i in out_best: if i &lt; len(letters): outstr += letters[i] return outstr . def label_to_hangul(label): # eng -&gt; hangul region = label[0] two_num = label[1:3] hangul = label[3:5] four_num = label[5:] try: region = Region[region] if region != &#39;Z&#39; else &#39;&#39; except: pass try: hangul = Hangul[hangul] except: pass return region + two_num + hangul + four_num . model = get_Model(training = False) model.load_weights(&#39;CuDNNLSTM+BN5--29--0.211--0.319.hdf5&#39;) . WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:541: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead. WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4479: The name tf.truncated_normal is deprecated. Please use tf.random.truncated_normal instead. WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:190: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead. WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:197: The name tf.ConfigProto is deprecated. Please use tf.compat.v1.ConfigProto instead. WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:2041: The name tf.nn.fused_batch_norm is deprecated. Please use tf.compat.v1.nn.fused_batch_norm instead. WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4267: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead. WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/array_ops.py:1354: add_dispatch_support.&lt;locals&gt;.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version. Instructions for updating: Use tf.where in 2.0, which has the same broadcast rule as np.where . inp, out = valid_datagen.__getitem__(0) images = inp[&#39;the_input&#39;] images.shape . (128, 128, 64, 1) . predictions = model.predict(images[0].reshape(1, img_w, img_h, 1), verbose = 1) predictions.shape . 1/1 [==============================] - 2s 2s/step . (1, 32, 42) . pred_texts = decode_label(predictions) pred_texts . &#39;Z16th6435&#39; . plt.imshow(images[0].reshape(img_w, img_h).T) plt.title(pred_texts) . Text(0.5, 1.0, &#39;Z16th6435&#39;) . #collapse-hide fig, axes = plt.subplots(nrows = 4, ncols = 2, figsize = (16, 16)) plt.setp(axes.flat, xticks = [], yticks = []) c = 1 for i, ax in enumerate(axes.flat): image = inp[&#39;the_input&#39;][c].reshape(1, img_w, img_h, 1) prediction = model.predict(image) ax.imshow(image.reshape(img_w, img_h).T) ax.set_xlabel(decode_label(prediction) + &#39; n&#39; + &#39;Hangul: &#39; + label_to_hangul(decode_label(prediction))) c += 1 plt.show() . .",
            "url": "https://soumik12345.github.io/geekyrakshit-blog/computervision/deeplearning/anpr/numberplate/neuralnetwork/crnn/convolution/recurrent/keras/python/tensorflow/2020/04/13/anpr.html",
            "relUrl": "/computervision/deeplearning/anpr/numberplate/neuralnetwork/crnn/convolution/recurrent/keras/python/tensorflow/2020/04/13/anpr.html",
            "date": " • Apr 13, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Depthwise Separable Convolutions in Deep Learning",
            "content": "The Convolution operation is a widely used function in Functional Analysis, Image Processing Deep Learning. The convolution operation when applied on two functions f and g, produces a third function expressing how the shape of one is modified by the other. While it is immensely popular, especially in the domain of Deep Learning, the vanilla convolution operation is quite expensive computationally. Modern Neural Network architectures such as Xception and MobileNet use a special type of Convolution called Depthwise Separable Convolution to speed up training and inference, especially on Mobile and Embedded Devices. . The Vanilla Convolution Operation . The convolution function can be mathematically defined as the following: . (f⊛g)(t)=∫−∞∞f(τ)g(t−τ)dτ(f circledast g)(t) = int_{- infty}^{ infty} f( tau) g(t - tau) d tau(f⊛g)(t)=∫−∞∞​f(τ)g(t−τ)dτ . For all non-negative values of t (i.e, for all values of t such that t ∈ [0, ∞) ), we could truncate the limits of integration resulting in, . (f⊛g)(t)=∫0tf(τ)g(t−τ)dτ(f circledast g)(t) = int_{0}^{t} f( tau) g(t - tau) d tau(f⊛g)(t)=∫0t​f(τ)g(t−τ)dτ . It can also be defined as the overlap of two functions f and g as one slides over the other, performing a sum of products. . Source: https://en.wikipedia.org/wiki/Convolution Convolution as Sum of Products. Source: https://towardsdatascience.com/intuitively-understanding-convolutions-for-deep-learning-1f6f42faee1 Computational Complexity of Convolution . In order to decide the computational complexity of the convolutional operation, we would count the number of multiplication operations for a convolution. This is because the Binary Addition of two numbers may be performed in a single clock cycle using two registers with the inputs latched and a bunch of combinatorial logic gates. Binary multiplication, however, requires successive shift and addition operations which must be performed as many times as there are bits in the multiplier and is thus a more expensive operation. . Let us consider an input volume of the dimension (DVD_{V}DV​, DVD_{V}DV​, N) where DVD_{V}DV​ is the height and width of the volume and NNN is the number of channels. In the case of a standard RGB image N=3N = 3N=3 and for a gray-scale image N=1N = 1N=1. . Let us convolve V with a tensor of shape (DVD_{V}DV​, DVD_{V}DV​, N) or N tensors with the shape (DkD_{k}Dk​, DkD_{k}Dk​) which results in a volume GGG of shape (DGD_{G}DG​, DGD_{G}DG​, N). . Let us count the number of multiplication operations for this operation. . Number of multiplication operations for a single stride across a single channel = Dk∗DkD_{k} * D_{k}Dk​∗Dk​. . For M channels in the initial volume, the number of multiplication operations = (Dk)2∗M(D_{k})^{2} * M(Dk​)2∗M. . Sliding the kernel over a volume of (DVD_{V}DV​, DVD_{V}DV​, M), we get a tensor of shape (DGD_{G}DG​, DGD_{G}DG​, N). Hence the total number of multiplication operations for a single channel of the convolution kernel = (DG)2∗(Dk)2∗M(D_{G})^{2} * (D_{k})^{2} * M(DG​)2∗(Dk​)2∗M. . Since there are N channels in the convolutional kernel, this operation is repeated N times. Hence, the total number of multiplication operations for the above convolution operation = N∗(DG)2∗(Dk)2∗MN * (D_{G})^{2} * (D_{k})^{2} * MN∗(DG​)2∗(Dk​)2∗M. . Now, let us see how using an alternate form of the vanilla convolution operation, we can reduce time complexity. . Depthwise Separable Convolution . In the vanilla convolution operation all, the kernel is applied to all the channels of the input volume. However, Depthwise Separable Convolutions breaks down the whole operation into 2 steps: . Depthwise Convolution or the Filtering Stage | Pointwise Convolution or the Combination Stage | Depthwise Convolutions . Let us consider the same input volume (DVD_{V}DV​, DVD_{V}DV​, M) convolving with M (DKD_{K}DK​, DKD_{K}DK​) kernels. A single convolution with a single kernel gives a volume of (DGD_{G}DG​, DGD_{G}DG​, 1). Repeating this N times, we get N such tensors and stacking them up channel-wise, we get a single tensor of shape (DGD_{G}DG​, DGD_{G}DG​, M). . Now, the number of multiplication operations for a single kernel convolving over a single input channel = DK∗DKD_{K} * D_{K}DK​∗DK​. When the convolution is applied over an entire input volume . Let us now find the computational complexity for Depthwise Convolution. . The number of multiplication operations for the convolution of a single (DKD_{K}DK​, DKD_{K}DK​) kernel over a single stride over the input volume = (DK)2(D_{K})^{2}(DK​)2. . Since the output shape is (DGD_{G}DG​, DGD_{G}DG​), the number of multiplication operations for convolving over a single channel of the input image = (DG)2∗(DK)2(D_{G})^{2} * (D_{K})^{2}(DG​)2∗(DK​)2. . Since there are MMM number of kernels for convolving with MMM number of channels, the number of multiplication operations for Depthwise Convolution operation = M∗(DG)2∗(DK)2M * (D_{G})^{2} * (D_{K})^{2}M∗(DG​)2∗(DK​)2. . Pointwise Convolution . For Pointwise Convolution, we convolve the (DGD_{G}DG​, DGD_{G}DG​, M) volume with NNN kernels of (1, 1, MMM) producing the desired output of shape (DVD_{V}DV​, DVD_{V}DV​, N). . We will now find the computational complexity of the Pointwise Convolution operation. . For convolving a single kernel over a single stride of the input image, the number of multiplication operations = 1∗1∗M1 * 1 * M1∗1∗M = MMM. . For convolving a single kernel over a single channel of the input tensor producing a shape of (DGD_{G}DG​, DGD_{G}DG​), the number of multiplication operations = M∗(DG)2M * (D_{G})^{2}M∗(DG​)2. . For convolving NNN number of kernels over the whole of input tensor, the number of multiplication operations = N∗M∗(DG)2N * M * (D_{G})^{2}N∗M∗(DG​)2. . Comparing Vanilla Convolution with Depthwise Separable Convolution . Let us take the ratios between the Complexity of the Vanilla Convolution () operation and that of the Depthwise Separable Convolution operation. . convvanillaconvdsc=N∗(DG)2∗(DK)2∗MM∗(DG)2∗[(DK)2+N] frac{conv_{vanilla}}{conv_{dsc}} = frac{N * (D_{G})^{2} * (D_{K})^{2} * M}{M * (D_{G})^{2} * [(D_{K})^{2} + N]}convdsc​convvanilla​​=M∗(DG​)2∗[(DK​)2+N]N∗(DG​)2∗(DK​)2∗M​ . or, . convvanillaconvdsc=(DK)2∗M(DK)2+N frac{conv_{vanilla}}{conv_{dsc}} = frac{(D_{K})^{2} * M}{(D_{K})^{2} + N}convdsc​convvanilla​​=(DK​)2+N(DK​)2∗M​ . or, . convvanillaconvdsc=1(DK)2+1N frac{conv_{vanilla}}{conv_{dsc}} = frac{1}{(D_{K})^{2}} + frac{1}{N}convdsc​convvanilla​​=(DK​)21​+N1​ . Now, let us consider N=3N = 3N=3 and DK = [2 ** i for i in range(5, 11)] and visualize how the ratio varies. . Note that the ratio of Time Complexity of Vanilla Convolution to that of Depthwise Separable Convolution is always much less than 1 and it decreases with increasing Kernel Dimension, making it much faster compared to Vanilla Convolution. . Depthwise Separable Convolutions are widely used in building fast CNN architectures such as Xception, Mobilenet and Multi-modal Neural Networks. In the upcoming articles, we would discuss these two articles in detail. .",
            "url": "https://soumik12345.github.io/geekyrakshit-blog/algebra/cnn/computervision/convolution/convolutionaneuralnetwork/datascience/deeplearning/depthwiseseperableconvolution/dnn/embeddeddevices/google/mathematics/maths/mobiledevices/mobilenet/multimodealnetwork/neural-networks/plotly/python/xception/2019/10/19/depthwise-seperable-convolution.html",
            "relUrl": "/algebra/cnn/computervision/convolution/convolutionaneuralnetwork/datascience/deeplearning/depthwiseseperableconvolution/dnn/embeddeddevices/google/mathematics/maths/mobiledevices/mobilenet/multimodealnetwork/neural-networks/plotly/python/xception/2019/10/19/depthwise-seperable-convolution.html",
            "date": " • Oct 19, 2019"
        }
        
    
  
    
        ,"post3": {
            "title": "Nearest Celebrity Face using Deep Learning",
            "content": "Face Recognition . Face Recognition is one of the more interesting applications of Deep Learning i. At a single glance, it may seem like a simple classification problem; classify if this photo shows Soumik’s face or Souranil’s. You might be quick to jump to the conclusion, oh, the handsome face on the right belongs to Soumik and the ugly face on the left belongs to Souranil but, Ahem!!! We beg to differ. . Dear ConvNet, which of these is Soumik and which one is Souranil??? See, the problem with traditional ConvNets is that they need to look at lots of images of your face and lots of other faces to learn to correctly classify them; maybe a thousand images from each category. Imagine yourself as the teacher of a class where you want to install a system, which monitors every student and recognize them by faces so that they would not bunk classes (poor students 😓). In order to do so you have to collect 1000 mugshots of each of your students!!! Even if you manage to do this insane task, just imagine having to retrain the model again if a new student decides to join your lecture!!! . Ideally, we would want to verify the face of a person from any footage given only one photo of the person available in the database. Hence, our challenge, in this case, can be formalized as a One-Shot Learning problem. History has been witness to the fact that Deep Learning algorithms do not work well if you have only one training example. . One-Shot Learning . Let’s focus a bit more light on the problem discussed earlier with an example. Our dear friend Atul is supposed to appear for a video interview for a company and he wants to remain undisturbed during the interview, so he won’t allow anyone into his room other than Abhik who speaks a lot of Crox English and would help him with the interview (from behind the laptop of course). So, he wants sets up a system using his phone camera which would verify if the person who wants to enter his room is Abhik or not. Now, Atul can simply design a ConvNet with convolutional layers followed by a couple of fully connected layers ending in a softmax activation with 3 outputs corresponding to the three of us. . Which of us speaks the best Crox will be decided upon by Atul’s algorithm!!! There are several demerits to this approach such as . Atul does not have more than thirty of our mugshots which he painfully collected from Facebook and Instagram. Such a small training set would not be enough. | If he decides to accept help from Avishek besides Abhik, he would have to retrain the model again (after painfully collecting his mugshots) in order for the algorithm to recognize Avishek also. | . So, in order to make this work, Atul thinks of a different approach. Instead of building a model to differentiate various faces, he decides to build a model that would learn a Similarity Function D. Then that would say how similar the current image is with a mugshot of Abhik that is present in his dataset and he decides upon a similarity threshold τ upon meeting which the door will open. . D(image1, image2) = Degree of Difference between the Images D(image1, image2) &lt;= τ means images are same, and D(image1, image2) &gt; τ means images are different Siamese Networks . The job of the function D is to learn the level of difference between two different images of faces. A nice way to do this is by using Siamese Networks. While a traditional ConvNet consists of Convolutional layers followed by Fully Connected or Dense Layers which are then fed into a Softmax function to perform classification, in case of a Siamese Network, there is no Softmax unit, instead the last Dense layer acts as the output layers which gives a list or vector of numbers. Let us call the outputs for images x_1 and x_2, f(x_1) and f(x_2) respectively. Let’s say that the output layer has 128 fully connected units, hence, f(x_1) and f(x_2) will each be a vector of 128 numbers. f(x_1) and f(x_2) are called the Encoding of x_1 and x_2 respectively. . If we believe the encodings to be a good enough representation of the input images, we can define the function D as the square of norm of the difference between the Encodings. . D(x1,x2)=∣∣f(x1)−f(x2)∣∣2D(x_{1}, x_{2}) = ||f(x_{1}) - f(x_{2})||^{2}D(x1​,x2​)=∣∣f(x1​)−f(x2​)∣∣2 . Now the question comes that how do we train such a network. Since the same network is used to compute the Encodings from two different images, we have to train the parameters so that the trained network defines as accurate Encoding. . Training a Siamese Network . One way to learn the parameters of the neural network so that it gives you an accurate enough encoding for the images is to define an applied gradient descent on the Triplet Loss Function. In this case, we will have an anchor image, a positive image (the same person as the anchor image) and a negative image (a different person from the anchor image). Now we train the Siamese Network so that the distance between the anchor and the positive image is minimized. This also increases the distance between the anchor and the negative image is maximized. The fact that at each instance, we are looking at three images gives rise to the terminology Triplet Loss. The dataset, in this case, should consist of multiple triplets of Anchor, Positive and Negative Images. . Learning Objective . For Positive Image, . D(A,P)=∣∣f(A)−f(P)∣∣2D(A, P) = ||f(A) - f(P)||^{2}D(A,P)=∣∣f(A)−f(P)∣∣2 . For Negative Image, . D(A,N)=∣∣f(A)−f(N)∣∣2D(A, N) = ||f(A) - f(N)||^{2}D(A,N)=∣∣f(A)−f(N)∣∣2 . Learning Objective is . D(A,P)−D(A,N)+α≤0D(A, P) - D(A, N) + alpha leq 0D(A,P)−D(A,N)+α≤0 . where α is defined as a margin and the Loss Function is given as . loss=∑i=1nmax(∣∣f(Ai)−f(Pi)∣∣2−∣∣f(Ai)−f(Pi)∣∣2+α,0)loss = sum_{i=1}^{n} max(||f(A_{i}) - f(P_{i})||^{2} - ||f(A_{i}) - f(P_{i})||^{2} + alpha, 0)loss=i=1∑n​max(∣∣f(Ai​)−f(Pi​)∣∣2−∣∣f(Ai​)−f(Pi​)∣∣2+α,0) . where n is the number of triplets in the dataset. . All the ideas till this point have been presented in the paper FaceNet by Florian Schroff, Dmitry Kalinichenko, and James Philbin. . After having trained the FaceNet on a large Triplet Dataset, we can use it to verify any face. Now, Atul would only need to store the Encodings of the faces of Abhik and Avishek. Then he would have to decide upon the value of Similarity Threshold τ. Whenever someone approaches the door, his face will be localized and passed through the FaceNet. If their D value is less than τ then it is a match!!! . Extending the Idea to Nearest Celebrity Face . I always wondered about those Facebook applications which used to predict stuff like which Celebrity or Footballer you look like. I tried building a similar application using the idea of FaceNet. Instead of keeping images of existing people to be verified in the database, I collected images of famous celebrities from Google Images, closely cropped their faces and stored their Encodings in the database. The Encodings were generated by a pre-trained FaceNet with an Inception backbone. Now theoretically, if I input some of my friends’ faces, they should ideally match the closest image in the database. Well, I tried implementing it and the results were hilarious 😂 . The project can be found at https://github.com/soumik12345/Nearest-Celebrity-Face. If you like the project and found the results to be hilarious, please leave a star on the Github repository. For more such exciting articles, stay tuned at http://geekyrakshit.com. .",
            "url": "https://soumik12345.github.io/geekyrakshit-blog/computervision/deeplearning/facenet/inception/keras/nearestcelebrityface/python/tensorflow/2019/08/07/nearest-celebrity-face.html",
            "relUrl": "/computervision/deeplearning/facenet/inception/keras/nearestcelebrityface/python/tensorflow/2019/08/07/nearest-celebrity-face.html",
            "date": " • Aug 7, 2019"
        }
        
    
  

  
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://soumik12345.github.io/geekyrakshit-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}